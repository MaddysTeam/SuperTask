//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Business {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Data;
    using System.ComponentModel.DataAnnotations;
    using Symber.Web.Data;
    
    
    /// <summary>
    /// APDBDef 是一个自动生成的具有 Partial 修饰的类，用于定义 APTableDef 和 APRelationDef。你可以添加同名的 Partial 类来扩充功能。
    /// </summary>
    public partial class APDBDef : APDatabase {
        
        private static AccountTableDef _account;
        
        private static UserInfoTableDef _userInfo;
        
        private static AppTableDef _app;
        
        private static RoleTableDef _role;
        
        private static UserRoleTableDef _userRole;
        
        private static CompanyInfoTableDef _companyInfo;
        
        private static ProjectTableDef _project;
        
        private static ProjectRecordTableDef _projectRecord;
        
        private static ProjectRoleTableDef _projectRole;
        
        private static ResourceTableDef _resource;
        
        private static PaymentsTableDef _payments;
        
        private static MileStoneTableDef _mileStone;
        
        private static ProjectMileStoneTableDef _projectMileStone;
        
        private static ProjectStoneTaskTableDef _projectStoneTask;
        
        private static WorkTaskTableDef _workTask;
        
        private static WorkTaskLogTableDef _workTaskLog;
        
        private static WorkTaskComplextiyTableDef _workTaskComplextiy;
        
        private static WorkTaskIssueTableDef _workTaskIssue;
        
        private static TaskCompelxtiyRoleTableDef _taskCompelxtiyRole;
        
        private static TaskStandardItemTableDef _taskStandardItem;
        
        private static IssueItemTableDef _issueItem;
        
        private static WorkJournalTableDef _workJournal;
        
        private static AttachmentTableDef _attachment;
        
        private static DictionaryTableDef _dictionary;
        
        private static ReviewTableDef _review;
        
        private static WorkflowTaskTableDef _workflowTask;
        
        private static IndicationTableDef _indication;
        
        private static EvalIndicationTableDef _evalIndication;
        
        private static EvalIndicationItemTableDef _evalIndicationItem;
        
        private static EvalTableTableDef _evalTable;
        
        private static EvalPeriodTableDef _evalPeriod;
        
        private static EvalTargetTablePropertionTableDef _evalTargetTablePropertion;
        
        private static EvalGroupTableDef _evalGroup;
        
        private static EvalGroupMemberTableDef _evalGroupMember;
        
        private static EvalGroupAccessorTableDef _evalGroupAccessor;
        
        private static EvalAccessorTargetTableDef _evalAccessorTarget;
        
        private static EvalResultTableDef _evalResult;
        
        private static EvalResultItemTableDef _evalResultItem;
        
        private static EvalSubmitResultTableDef _evalSubmitResult;
        
        private static FolderTableDef _folder;
        
        private static FolderFileTableDef _folderFile;
        
        private static AdviceTableDef _advice;
        
        private static AdviceSupportTableDef _adviceSupport;
        
        private static APDalProvider staticProvider = Provider;
        
        private APDalDef.AccountDal _accountDal;
        
        private APDalDef.UserInfoDal _userInfoDal;
        
        private APDalDef.AppDal _appDal;
        
        private APDalDef.RoleDal _roleDal;
        
        private APDalDef.UserRoleDal _userRoleDal;
        
        private APDalDef.CompanyInfoDal _companyInfoDal;
        
        private APDalDef.ProjectDal _projectDal;
        
        private APDalDef.ProjectRecordDal _projectRecordDal;
        
        private APDalDef.ProjectRoleDal _projectRoleDal;
        
        private APDalDef.ResourceDal _resourceDal;
        
        private APDalDef.PaymentsDal _paymentsDal;
        
        private APDalDef.MileStoneDal _mileStoneDal;
        
        private APDalDef.ProjectMileStoneDal _projectMileStoneDal;
        
        private APDalDef.ProjectStoneTaskDal _projectStoneTaskDal;
        
        private APDalDef.WorkTaskDal _workTaskDal;
        
        private APDalDef.WorkTaskLogDal _workTaskLogDal;
        
        private APDalDef.WorkTaskComplextiyDal _workTaskComplextiyDal;
        
        private APDalDef.WorkTaskIssueDal _workTaskIssueDal;
        
        private APDalDef.TaskCompelxtiyRoleDal _taskCompelxtiyRoleDal;
        
        private APDalDef.TaskStandardItemDal _taskStandardItemDal;
        
        private APDalDef.IssueItemDal _issueItemDal;
        
        private APDalDef.WorkJournalDal _workJournalDal;
        
        private APDalDef.AttachmentDal _attachmentDal;
        
        private APDalDef.DictionaryDal _dictionaryDal;
        
        private APDalDef.ReviewDal _reviewDal;
        
        private APDalDef.WorkflowTaskDal _workflowTaskDal;
        
        private APDalDef.IndicationDal _indicationDal;
        
        private APDalDef.EvalIndicationDal _evalIndicationDal;
        
        private APDalDef.EvalIndicationItemDal _evalIndicationItemDal;
        
        private APDalDef.EvalTableDal _evalTableDal;
        
        private APDalDef.EvalPeriodDal _evalPeriodDal;
        
        private APDalDef.EvalTargetTablePropertionDal _evalTargetTablePropertionDal;
        
        private APDalDef.EvalGroupDal _evalGroupDal;
        
        private APDalDef.EvalGroupMemberDal _evalGroupMemberDal;
        
        private APDalDef.EvalGroupAccessorDal _evalGroupAccessorDal;
        
        private APDalDef.EvalAccessorTargetDal _evalAccessorTargetDal;
        
        private APDalDef.EvalResultDal _evalResultDal;
        
        private APDalDef.EvalResultItemDal _evalResultItemDal;
        
        private APDalDef.EvalSubmitResultDal _evalSubmitResultDal;
        
        private APDalDef.FolderDal _folderDal;
        
        private APDalDef.FolderFileDal _folderFileDal;
        
        private APDalDef.AdviceDal _adviceDal;
        
        private APDalDef.AdviceSupportDal _adviceSupportDal;
        
        public APDBDef() : 
                base(staticProvider) {
        }
        
        public APDBDef(string providerName) : 
                base(providerName) {
        }
        
        /// <summary>
        /// 用户账号 TableDef
        /// </summary>
        public static AccountTableDef Account {
            get {
                if ((_account == null)) {
                    _account = new AccountTableDef("Users");
                }
                return _account;
            }
        }
        
        /// <summary>
        /// 用户信息 TableDef
        /// </summary>
        public static UserInfoTableDef UserInfo {
            get {
                if ((_userInfo == null)) {
                    _userInfo = new UserInfoTableDef("UserInfo");
                }
                return _userInfo;
            }
        }
        
        /// <summary>
        /// 应用程序库(权限) TableDef
        /// </summary>
        public static AppTableDef App {
            get {
                if ((_app == null)) {
                    _app = new AppTableDef("AppLibrary");
                }
                return _app;
            }
        }
        
        /// <summary>
        /// 角色 TableDef
        /// </summary>
        public static RoleTableDef Role {
            get {
                if ((_role == null)) {
                    _role = new RoleTableDef("Role");
                }
                return _role;
            }
        }
        
        /// <summary>
        /// 用户角色 TableDef
        /// </summary>
        public static UserRoleTableDef UserRole {
            get {
                if ((_userRole == null)) {
                    _userRole = new UserRoleTableDef("UsersRole");
                }
                return _userRole;
            }
        }
        
        /// <summary>
        /// 单位表 TableDef
        /// </summary>
        public static CompanyInfoTableDef CompanyInfo {
            get {
                if ((_companyInfo == null)) {
                    _companyInfo = new CompanyInfoTableDef("CompanyInfo");
                }
                return _companyInfo;
            }
        }
        
        /// <summary>
        /// 项目 TableDef
        /// </summary>
        public static ProjectTableDef Project {
            get {
                if ((_project == null)) {
                    _project = new ProjectTableDef("Project");
                }
                return _project;
            }
        }
        
        /// <summary>
        /// 项目记录 TableDef
        /// </summary>
        public static ProjectRecordTableDef ProjectRecord {
            get {
                if ((_projectRecord == null)) {
                    _projectRecord = new ProjectRecordTableDef("ProjectRecord");
                }
                return _projectRecord;
            }
        }
        
        /// <summary>
        /// 项目角色 TableDef
        /// </summary>
        public static ProjectRoleTableDef ProjectRole {
            get {
                if ((_projectRole == null)) {
                    _projectRole = new ProjectRoleTableDef("ProjectRole");
                }
                return _projectRole;
            }
        }
        
        /// <summary>
        /// 项目资源 TableDef
        /// </summary>
        public static ResourceTableDef Resource {
            get {
                if ((_resource == null)) {
                    _resource = new ResourceTableDef("Resource");
                }
                return _resource;
            }
        }
        
        /// <summary>
        /// 款项 TableDef
        /// </summary>
        public static PaymentsTableDef Payments {
            get {
                if ((_payments == null)) {
                    _payments = new PaymentsTableDef("Payments");
                }
                return _payments;
            }
        }
        
        /// <summary>
        ///  TableDef
        /// </summary>
        public static MileStoneTableDef MileStone {
            get {
                if ((_mileStone == null)) {
                    _mileStone = new MileStoneTableDef("MileStone");
                }
                return _mileStone;
            }
        }
        
        /// <summary>
        ///  TableDef
        /// </summary>
        public static ProjectMileStoneTableDef ProjectMileStone {
            get {
                if ((_projectMileStone == null)) {
                    _projectMileStone = new ProjectMileStoneTableDef("ProjectMileStone");
                }
                return _projectMileStone;
            }
        }
        
        /// <summary>
        ///  TableDef
        /// </summary>
        public static ProjectStoneTaskTableDef ProjectStoneTask {
            get {
                if ((_projectStoneTask == null)) {
                    _projectStoneTask = new ProjectStoneTaskTableDef("ProjectStoneTask");
                }
                return _projectStoneTask;
            }
        }
        
        /// <summary>
        /// 工作任务 TableDef
        /// </summary>
        public static WorkTaskTableDef WorkTask {
            get {
                if ((_workTask == null)) {
                    _workTask = new WorkTaskTableDef("WorkTask");
                }
                return _workTask;
            }
        }
        
        /// <summary>
        /// 任务记录 TableDef
        /// </summary>
        public static WorkTaskLogTableDef WorkTaskLog {
            get {
                if ((_workTaskLog == null)) {
                    _workTaskLog = new WorkTaskLogTableDef("WorkTaskLog");
                }
                return _workTaskLog;
            }
        }
        
        /// <summary>
        /// 任务复杂度 TableDef
        /// </summary>
        public static WorkTaskComplextiyTableDef WorkTaskComplextiy {
            get {
                if ((_workTaskComplextiy == null)) {
                    _workTaskComplextiy = new WorkTaskComplextiyTableDef("WorkTaskComplextiy");
                }
                return _workTaskComplextiy;
            }
        }
        
        /// <summary>
        /// 任务问题 TableDef
        /// </summary>
        public static WorkTaskIssueTableDef WorkTaskIssue {
            get {
                if ((_workTaskIssue == null)) {
                    _workTaskIssue = new WorkTaskIssueTableDef("WorkTaskIssue");
                }
                return _workTaskIssue;
            }
        }
        
        /// <summary>
        /// 任务复杂度调整角色权重，(例如项目经理-调整某个复杂度为50%的占比，所有角色占比和为100%)，注意如果是标准复杂度，角色为空 TableDef
        /// </summary>
        public static TaskCompelxtiyRoleTableDef TaskCompelxtiyRole {
            get {
                if ((_taskCompelxtiyRole == null)) {
                    _taskCompelxtiyRole = new TaskCompelxtiyRoleTableDef("TaskCompelxtiyRole");
                }
                return _taskCompelxtiyRole;
            }
        }
        
        /// <summary>
        /// 任务标准项（包含标准复杂度和标准工时） TableDef
        /// </summary>
        public static TaskStandardItemTableDef TaskStandardItem {
            get {
                if ((_taskStandardItem == null)) {
                    _taskStandardItem = new TaskStandardItemTableDef("TaskStandardItem");
                }
                return _taskStandardItem;
            }
        }
        
        /// <summary>
        /// 问题项 TableDef
        /// </summary>
        public static IssueItemTableDef IssueItem {
            get {
                if ((_issueItem == null)) {
                    _issueItem = new IssueItemTableDef("IssueItem");
                }
                return _issueItem;
            }
        }
        
        /// <summary>
        /// 工作日志 TableDef
        /// </summary>
        public static WorkJournalTableDef WorkJournal {
            get {
                if ((_workJournal == null)) {
                    _workJournal = new WorkJournalTableDef("WorkJournal");
                }
                return _workJournal;
            }
        }
        
        /// <summary>
        /// 文件 TableDef
        /// </summary>
        public static AttachmentTableDef Attachment {
            get {
                if ((_attachment == null)) {
                    _attachment = new AttachmentTableDef("Attachments");
                }
                return _attachment;
            }
        }
        
        /// <summary>
        /// 字典 TableDef
        /// </summary>
        public static DictionaryTableDef Dictionary {
            get {
                if ((_dictionary == null)) {
                    _dictionary = new DictionaryTableDef("Dictionary");
                }
                return _dictionary;
            }
        }
        
        /// <summary>
        ///  TableDef
        /// </summary>
        public static ReviewTableDef Review {
            get {
                if ((_review == null)) {
                    _review = new ReviewTableDef("Review");
                }
                return _review;
            }
        }
        
        /// <summary>
        /// 流程任务（专属于第三方工作流） TableDef
        /// </summary>
        public static WorkflowTaskTableDef WorkflowTask {
            get {
                if ((_workflowTask == null)) {
                    _workflowTask = new WorkflowTaskTableDef("WorkFlowTask");
                }
                return _workflowTask;
            }
        }
        
        /// <summary>
        /// 指标 TableDef
        /// </summary>
        public static IndicationTableDef Indication {
            get {
                if ((_indication == null)) {
                    _indication = new IndicationTableDef("Indication");
                }
                return _indication;
            }
        }
        
        /// <summary>
        /// 考核表-指标-关联 TableDef
        /// </summary>
        public static EvalIndicationTableDef EvalIndication {
            get {
                if ((_evalIndication == null)) {
                    _evalIndication = new EvalIndicationTableDef("EvalIndication");
                }
                return _evalIndication;
            }
        }
        
        /// <summary>
        /// 考核-指标-指标项 TableDef
        /// </summary>
        public static EvalIndicationItemTableDef EvalIndicationItem {
            get {
                if ((_evalIndicationItem == null)) {
                    _evalIndicationItem = new EvalIndicationItemTableDef("EvalIndicationItem");
                }
                return _evalIndicationItem;
            }
        }
        
        /// <summary>
        /// 考核表 TableDef
        /// </summary>
        public static EvalTableTableDef EvalTable {
            get {
                if ((_evalTable == null)) {
                    _evalTable = new EvalTableTableDef("EvalTable");
                }
                return _evalTable;
            }
        }
        
        /// <summary>
        /// 评价-周期 TableDef
        /// </summary>
        public static EvalPeriodTableDef EvalPeriod {
            get {
                if ((_evalPeriod == null)) {
                    _evalPeriod = new EvalPeriodTableDef("EvalPeriod");
                }
                return _evalPeriod;
            }
        }
        
        /// <summary>
        /// 考核表-比重 TableDef
        /// </summary>
        public static EvalTargetTablePropertionTableDef EvalTargetTablePropertion {
            get {
                if ((_evalTargetTablePropertion == null)) {
                    _evalTargetTablePropertion = new EvalTargetTablePropertionTableDef("EvalTargetTablePropertion");
                }
                return _evalTargetTablePropertion;
            }
        }
        
        /// <summary>
        /// 考核组 TableDef
        /// </summary>
        public static EvalGroupTableDef EvalGroup {
            get {
                if ((_evalGroup == null)) {
                    _evalGroup = new EvalGroupTableDef("EvalGroup");
                }
                return _evalGroup;
            }
        }
        
        /// <summary>
        /// 考核组-成员 TableDef
        /// </summary>
        public static EvalGroupMemberTableDef EvalGroupMember {
            get {
                if ((_evalGroupMember == null)) {
                    _evalGroupMember = new EvalGroupMemberTableDef("EvalGroupMember");
                }
                return _evalGroupMember;
            }
        }
        
        /// <summary>
        /// 考核组-评审人 TableDef
        /// </summary>
        public static EvalGroupAccessorTableDef EvalGroupAccessor {
            get {
                if ((_evalGroupAccessor == null)) {
                    _evalGroupAccessor = new EvalGroupAccessorTableDef("EvalGroupAccessor");
                }
                return _evalGroupAccessor;
            }
        }
        
        /// <summary>
        /// 评审人-评审对象 TableDef
        /// </summary>
        public static EvalAccessorTargetTableDef EvalAccessorTarget {
            get {
                if ((_evalAccessorTarget == null)) {
                    _evalAccessorTarget = new EvalAccessorTargetTableDef("EvalAccessorTarget");
                }
                return _evalAccessorTarget;
            }
        }
        
        /// <summary>
        /// 评价-结果 TableDef
        /// </summary>
        public static EvalResultTableDef EvalResult {
            get {
                if ((_evalResult == null)) {
                    _evalResult = new EvalResultTableDef("EvalResult");
                }
                return _evalResult;
            }
        }
        
        /// <summary>
        /// 评价-结果-结果项 TableDef
        /// </summary>
        public static EvalResultItemTableDef EvalResultItem {
            get {
                if ((_evalResultItem == null)) {
                    _evalResultItem = new EvalResultItemTableDef("EvalResultItem");
                }
                return _evalResultItem;
            }
        }
        
        /// <summary>
        /// 评价-最终-结果 TableDef
        /// </summary>
        public static EvalSubmitResultTableDef EvalSubmitResult {
            get {
                if ((_evalSubmitResult == null)) {
                    _evalSubmitResult = new EvalSubmitResultTableDef("EvalSubmitResult");
                }
                return _evalSubmitResult;
            }
        }
        
        /// <summary>
        /// 文件夹 TableDef
        /// </summary>
        public static FolderTableDef Folder {
            get {
                if ((_folder == null)) {
                    _folder = new FolderTableDef("Folder");
                }
                return _folder;
            }
        }
        
        /// <summary>
        ///  TableDef
        /// </summary>
        public static FolderFileTableDef FolderFile {
            get {
                if ((_folderFile == null)) {
                    _folderFile = new FolderFileTableDef("FolderFile");
                }
                return _folderFile;
            }
        }
        
        /// <summary>
        /// 建议 TableDef
        /// </summary>
        public static AdviceTableDef Advice {
            get {
                if ((_advice == null)) {
                    _advice = new AdviceTableDef("Advice");
                }
                return _advice;
            }
        }
        
        /// <summary>
        /// 建议支持者明细 TableDef
        /// </summary>
        public static AdviceSupportTableDef AdviceSupport {
            get {
                if ((_adviceSupport == null)) {
                    _adviceSupport = new AdviceSupportTableDef("AdviceSupport");
                }
                return _adviceSupport;
            }
        }
        
        /// <summary>
        /// 用户账号 Dal
        /// </summary>
        public virtual APDalDef.AccountDal AccountDal {
            get {
                if ((_accountDal == null)) {
                    _accountDal = new APDalDef.AccountDal(this);
                }
                return _accountDal;
            }
        }
        
        /// <summary>
        /// 用户信息 Dal
        /// </summary>
        public virtual APDalDef.UserInfoDal UserInfoDal {
            get {
                if ((_userInfoDal == null)) {
                    _userInfoDal = new APDalDef.UserInfoDal(this);
                }
                return _userInfoDal;
            }
        }
        
        /// <summary>
        /// 应用程序库(权限) Dal
        /// </summary>
        public virtual APDalDef.AppDal AppDal {
            get {
                if ((_appDal == null)) {
                    _appDal = new APDalDef.AppDal(this);
                }
                return _appDal;
            }
        }
        
        /// <summary>
        /// 角色 Dal
        /// </summary>
        public virtual APDalDef.RoleDal RoleDal {
            get {
                if ((_roleDal == null)) {
                    _roleDal = new APDalDef.RoleDal(this);
                }
                return _roleDal;
            }
        }
        
        /// <summary>
        /// 用户角色 Dal
        /// </summary>
        public virtual APDalDef.UserRoleDal UserRoleDal {
            get {
                if ((_userRoleDal == null)) {
                    _userRoleDal = new APDalDef.UserRoleDal(this);
                }
                return _userRoleDal;
            }
        }
        
        /// <summary>
        /// 单位表 Dal
        /// </summary>
        public virtual APDalDef.CompanyInfoDal CompanyInfoDal {
            get {
                if ((_companyInfoDal == null)) {
                    _companyInfoDal = new APDalDef.CompanyInfoDal(this);
                }
                return _companyInfoDal;
            }
        }
        
        /// <summary>
        /// 项目 Dal
        /// </summary>
        public virtual APDalDef.ProjectDal ProjectDal {
            get {
                if ((_projectDal == null)) {
                    _projectDal = new APDalDef.ProjectDal(this);
                }
                return _projectDal;
            }
        }
        
        /// <summary>
        /// 项目记录 Dal
        /// </summary>
        public virtual APDalDef.ProjectRecordDal ProjectRecordDal {
            get {
                if ((_projectRecordDal == null)) {
                    _projectRecordDal = new APDalDef.ProjectRecordDal(this);
                }
                return _projectRecordDal;
            }
        }
        
        /// <summary>
        /// 项目角色 Dal
        /// </summary>
        public virtual APDalDef.ProjectRoleDal ProjectRoleDal {
            get {
                if ((_projectRoleDal == null)) {
                    _projectRoleDal = new APDalDef.ProjectRoleDal(this);
                }
                return _projectRoleDal;
            }
        }
        
        /// <summary>
        /// 项目资源 Dal
        /// </summary>
        public virtual APDalDef.ResourceDal ResourceDal {
            get {
                if ((_resourceDal == null)) {
                    _resourceDal = new APDalDef.ResourceDal(this);
                }
                return _resourceDal;
            }
        }
        
        /// <summary>
        /// 款项 Dal
        /// </summary>
        public virtual APDalDef.PaymentsDal PaymentsDal {
            get {
                if ((_paymentsDal == null)) {
                    _paymentsDal = new APDalDef.PaymentsDal(this);
                }
                return _paymentsDal;
            }
        }
        
        /// <summary>
        ///  Dal
        /// </summary>
        public virtual APDalDef.MileStoneDal MileStoneDal {
            get {
                if ((_mileStoneDal == null)) {
                    _mileStoneDal = new APDalDef.MileStoneDal(this);
                }
                return _mileStoneDal;
            }
        }
        
        /// <summary>
        ///  Dal
        /// </summary>
        public virtual APDalDef.ProjectMileStoneDal ProjectMileStoneDal {
            get {
                if ((_projectMileStoneDal == null)) {
                    _projectMileStoneDal = new APDalDef.ProjectMileStoneDal(this);
                }
                return _projectMileStoneDal;
            }
        }
        
        /// <summary>
        ///  Dal
        /// </summary>
        public virtual APDalDef.ProjectStoneTaskDal ProjectStoneTaskDal {
            get {
                if ((_projectStoneTaskDal == null)) {
                    _projectStoneTaskDal = new APDalDef.ProjectStoneTaskDal(this);
                }
                return _projectStoneTaskDal;
            }
        }
        
        /// <summary>
        /// 工作任务 Dal
        /// </summary>
        public virtual APDalDef.WorkTaskDal WorkTaskDal {
            get {
                if ((_workTaskDal == null)) {
                    _workTaskDal = new APDalDef.WorkTaskDal(this);
                }
                return _workTaskDal;
            }
        }
        
        /// <summary>
        /// 任务记录 Dal
        /// </summary>
        public virtual APDalDef.WorkTaskLogDal WorkTaskLogDal {
            get {
                if ((_workTaskLogDal == null)) {
                    _workTaskLogDal = new APDalDef.WorkTaskLogDal(this);
                }
                return _workTaskLogDal;
            }
        }
        
        /// <summary>
        /// 任务复杂度 Dal
        /// </summary>
        public virtual APDalDef.WorkTaskComplextiyDal WorkTaskComplextiyDal {
            get {
                if ((_workTaskComplextiyDal == null)) {
                    _workTaskComplextiyDal = new APDalDef.WorkTaskComplextiyDal(this);
                }
                return _workTaskComplextiyDal;
            }
        }
        
        /// <summary>
        /// 任务问题 Dal
        /// </summary>
        public virtual APDalDef.WorkTaskIssueDal WorkTaskIssueDal {
            get {
                if ((_workTaskIssueDal == null)) {
                    _workTaskIssueDal = new APDalDef.WorkTaskIssueDal(this);
                }
                return _workTaskIssueDal;
            }
        }
        
        /// <summary>
        /// 任务复杂度调整角色权重，(例如项目经理-调整某个复杂度为50%的占比，所有角色占比和为100%)，注意如果是标准复杂度，角色为空 Dal
        /// </summary>
        public virtual APDalDef.TaskCompelxtiyRoleDal TaskCompelxtiyRoleDal {
            get {
                if ((_taskCompelxtiyRoleDal == null)) {
                    _taskCompelxtiyRoleDal = new APDalDef.TaskCompelxtiyRoleDal(this);
                }
                return _taskCompelxtiyRoleDal;
            }
        }
        
        /// <summary>
        /// 任务标准项（包含标准复杂度和标准工时） Dal
        /// </summary>
        public virtual APDalDef.TaskStandardItemDal TaskStandardItemDal {
            get {
                if ((_taskStandardItemDal == null)) {
                    _taskStandardItemDal = new APDalDef.TaskStandardItemDal(this);
                }
                return _taskStandardItemDal;
            }
        }
        
        /// <summary>
        /// 问题项 Dal
        /// </summary>
        public virtual APDalDef.IssueItemDal IssueItemDal {
            get {
                if ((_issueItemDal == null)) {
                    _issueItemDal = new APDalDef.IssueItemDal(this);
                }
                return _issueItemDal;
            }
        }
        
        /// <summary>
        /// 工作日志 Dal
        /// </summary>
        public virtual APDalDef.WorkJournalDal WorkJournalDal {
            get {
                if ((_workJournalDal == null)) {
                    _workJournalDal = new APDalDef.WorkJournalDal(this);
                }
                return _workJournalDal;
            }
        }
        
        /// <summary>
        /// 文件 Dal
        /// </summary>
        public virtual APDalDef.AttachmentDal AttachmentDal {
            get {
                if ((_attachmentDal == null)) {
                    _attachmentDal = new APDalDef.AttachmentDal(this);
                }
                return _attachmentDal;
            }
        }
        
        /// <summary>
        /// 字典 Dal
        /// </summary>
        public virtual APDalDef.DictionaryDal DictionaryDal {
            get {
                if ((_dictionaryDal == null)) {
                    _dictionaryDal = new APDalDef.DictionaryDal(this);
                }
                return _dictionaryDal;
            }
        }
        
        /// <summary>
        ///  Dal
        /// </summary>
        public virtual APDalDef.ReviewDal ReviewDal {
            get {
                if ((_reviewDal == null)) {
                    _reviewDal = new APDalDef.ReviewDal(this);
                }
                return _reviewDal;
            }
        }
        
        /// <summary>
        /// 流程任务（专属于第三方工作流） Dal
        /// </summary>
        public virtual APDalDef.WorkflowTaskDal WorkflowTaskDal {
            get {
                if ((_workflowTaskDal == null)) {
                    _workflowTaskDal = new APDalDef.WorkflowTaskDal(this);
                }
                return _workflowTaskDal;
            }
        }
        
        /// <summary>
        /// 指标 Dal
        /// </summary>
        public virtual APDalDef.IndicationDal IndicationDal {
            get {
                if ((_indicationDal == null)) {
                    _indicationDal = new APDalDef.IndicationDal(this);
                }
                return _indicationDal;
            }
        }
        
        /// <summary>
        /// 考核表-指标-关联 Dal
        /// </summary>
        public virtual APDalDef.EvalIndicationDal EvalIndicationDal {
            get {
                if ((_evalIndicationDal == null)) {
                    _evalIndicationDal = new APDalDef.EvalIndicationDal(this);
                }
                return _evalIndicationDal;
            }
        }
        
        /// <summary>
        /// 考核-指标-指标项 Dal
        /// </summary>
        public virtual APDalDef.EvalIndicationItemDal EvalIndicationItemDal {
            get {
                if ((_evalIndicationItemDal == null)) {
                    _evalIndicationItemDal = new APDalDef.EvalIndicationItemDal(this);
                }
                return _evalIndicationItemDal;
            }
        }
        
        /// <summary>
        /// 考核表 Dal
        /// </summary>
        public virtual APDalDef.EvalTableDal EvalTableDal {
            get {
                if ((_evalTableDal == null)) {
                    _evalTableDal = new APDalDef.EvalTableDal(this);
                }
                return _evalTableDal;
            }
        }
        
        /// <summary>
        /// 评价-周期 Dal
        /// </summary>
        public virtual APDalDef.EvalPeriodDal EvalPeriodDal {
            get {
                if ((_evalPeriodDal == null)) {
                    _evalPeriodDal = new APDalDef.EvalPeriodDal(this);
                }
                return _evalPeriodDal;
            }
        }
        
        /// <summary>
        /// 考核表-比重 Dal
        /// </summary>
        public virtual APDalDef.EvalTargetTablePropertionDal EvalTargetTablePropertionDal {
            get {
                if ((_evalTargetTablePropertionDal == null)) {
                    _evalTargetTablePropertionDal = new APDalDef.EvalTargetTablePropertionDal(this);
                }
                return _evalTargetTablePropertionDal;
            }
        }
        
        /// <summary>
        /// 考核组 Dal
        /// </summary>
        public virtual APDalDef.EvalGroupDal EvalGroupDal {
            get {
                if ((_evalGroupDal == null)) {
                    _evalGroupDal = new APDalDef.EvalGroupDal(this);
                }
                return _evalGroupDal;
            }
        }
        
        /// <summary>
        /// 考核组-成员 Dal
        /// </summary>
        public virtual APDalDef.EvalGroupMemberDal EvalGroupMemberDal {
            get {
                if ((_evalGroupMemberDal == null)) {
                    _evalGroupMemberDal = new APDalDef.EvalGroupMemberDal(this);
                }
                return _evalGroupMemberDal;
            }
        }
        
        /// <summary>
        /// 考核组-评审人 Dal
        /// </summary>
        public virtual APDalDef.EvalGroupAccessorDal EvalGroupAccessorDal {
            get {
                if ((_evalGroupAccessorDal == null)) {
                    _evalGroupAccessorDal = new APDalDef.EvalGroupAccessorDal(this);
                }
                return _evalGroupAccessorDal;
            }
        }
        
        /// <summary>
        /// 评审人-评审对象 Dal
        /// </summary>
        public virtual APDalDef.EvalAccessorTargetDal EvalAccessorTargetDal {
            get {
                if ((_evalAccessorTargetDal == null)) {
                    _evalAccessorTargetDal = new APDalDef.EvalAccessorTargetDal(this);
                }
                return _evalAccessorTargetDal;
            }
        }
        
        /// <summary>
        /// 评价-结果 Dal
        /// </summary>
        public virtual APDalDef.EvalResultDal EvalResultDal {
            get {
                if ((_evalResultDal == null)) {
                    _evalResultDal = new APDalDef.EvalResultDal(this);
                }
                return _evalResultDal;
            }
        }
        
        /// <summary>
        /// 评价-结果-结果项 Dal
        /// </summary>
        public virtual APDalDef.EvalResultItemDal EvalResultItemDal {
            get {
                if ((_evalResultItemDal == null)) {
                    _evalResultItemDal = new APDalDef.EvalResultItemDal(this);
                }
                return _evalResultItemDal;
            }
        }
        
        /// <summary>
        /// 评价-最终-结果 Dal
        /// </summary>
        public virtual APDalDef.EvalSubmitResultDal EvalSubmitResultDal {
            get {
                if ((_evalSubmitResultDal == null)) {
                    _evalSubmitResultDal = new APDalDef.EvalSubmitResultDal(this);
                }
                return _evalSubmitResultDal;
            }
        }
        
        /// <summary>
        /// 文件夹 Dal
        /// </summary>
        public virtual APDalDef.FolderDal FolderDal {
            get {
                if ((_folderDal == null)) {
                    _folderDal = new APDalDef.FolderDal(this);
                }
                return _folderDal;
            }
        }
        
        /// <summary>
        ///  Dal
        /// </summary>
        public virtual APDalDef.FolderFileDal FolderFileDal {
            get {
                if ((_folderFileDal == null)) {
                    _folderFileDal = new APDalDef.FolderFileDal(this);
                }
                return _folderFileDal;
            }
        }
        
        /// <summary>
        /// 建议 Dal
        /// </summary>
        public virtual APDalDef.AdviceDal AdviceDal {
            get {
                if ((_adviceDal == null)) {
                    _adviceDal = new APDalDef.AdviceDal(this);
                }
                return _adviceDal;
            }
        }
        
        /// <summary>
        /// 建议支持者明细 Dal
        /// </summary>
        public virtual APDalDef.AdviceSupportDal AdviceSupportDal {
            get {
                if ((_adviceSupportDal == null)) {
                    _adviceSupportDal = new APDalDef.AdviceSupportDal(this);
                }
                return _adviceSupportDal;
            }
        }
        
        public override void Rollback() {
            base.Rollback();
        }
        
        public override void Close() {
            base.Close();
        }
        
        /// <summary>
        /// 初始化数据。
        /// </summary>
        public static void InitData() {
            APDBDef db = new APDBDef();
            db.BeginTrans();
            try {
                db.AccountDal.InitData(db);
                db.UserInfoDal.InitData(db);
                db.AppDal.InitData(db);
                db.RoleDal.InitData(db);
                db.UserRoleDal.InitData(db);
                db.CompanyInfoDal.InitData(db);
                db.ProjectDal.InitData(db);
                db.ProjectRecordDal.InitData(db);
                db.ProjectRoleDal.InitData(db);
                db.ResourceDal.InitData(db);
                db.PaymentsDal.InitData(db);
                db.MileStoneDal.InitData(db);
                db.ProjectMileStoneDal.InitData(db);
                db.ProjectStoneTaskDal.InitData(db);
                db.WorkTaskDal.InitData(db);
                db.WorkTaskLogDal.InitData(db);
                db.WorkTaskComplextiyDal.InitData(db);
                db.WorkTaskIssueDal.InitData(db);
                db.TaskCompelxtiyRoleDal.InitData(db);
                db.TaskStandardItemDal.InitData(db);
                db.IssueItemDal.InitData(db);
                db.WorkJournalDal.InitData(db);
                db.AttachmentDal.InitData(db);
                db.DictionaryDal.InitData(db);
                db.ReviewDal.InitData(db);
                db.WorkflowTaskDal.InitData(db);
                db.IndicationDal.InitData(db);
                db.EvalIndicationDal.InitData(db);
                db.EvalIndicationItemDal.InitData(db);
                db.EvalTableDal.InitData(db);
                db.EvalPeriodDal.InitData(db);
                db.EvalTargetTablePropertionDal.InitData(db);
                db.EvalGroupDal.InitData(db);
                db.EvalGroupMemberDal.InitData(db);
                db.EvalGroupAccessorDal.InitData(db);
                db.EvalAccessorTargetDal.InitData(db);
                db.EvalResultDal.InitData(db);
                db.EvalResultItemDal.InitData(db);
                db.EvalSubmitResultDal.InitData(db);
                db.FolderDal.InitData(db);
                db.FolderFileDal.InitData(db);
                db.AdviceDal.InitData(db);
                db.AdviceSupportDal.InitData(db);
                db.Commit();
            }
            catch (System.Exception ) {
                db.Rollback();
                throw;
            }
            finally {
                db.Close();
            }
        }
        
        [Serializable()]
        public partial class AccountTableDef : APTableDef {
            
            private GuidAPColumnDef _userId;
            
            private StringAPColumnDef _userName;
            
            private StringAPColumnDef _account;
            
            private StringAPColumnDef _password;
            
            private Int32APColumnDef _status;
            
            private Int32APColumnDef _sort;
            
            private StringAPColumnDef _note;
            
            public AccountTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected AccountTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new GuidAPColumnDef(this, "ID", false);
                        _userId.Display = "ID";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// UserName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef UserName {
                get {
                    if (Object.ReferenceEquals(_userName, null)) {
                        _userName = new StringAPColumnDef(this, "Name", false, 40);
                        _userName.Display = "用户名";
                        _userName.Required = true;
                    }
                    return _userName;
                }
            }
            
            /// <summary>
            /// Account ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Account {
                get {
                    if (Object.ReferenceEquals(_account, null)) {
                        _account = new StringAPColumnDef(this, "Account", false, 40);
                        _account.Display = "账号";
                        _account.Required = true;
                    }
                    return _account;
                }
            }
            
            /// <summary>
            /// Password ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Password {
                get {
                    if (Object.ReferenceEquals(_password, null)) {
                        _password = new StringAPColumnDef(this, "Password", false, 40);
                        _password.Display = "密码";
                        _password.Required = true;
                    }
                    return _password;
                }
            }
            
            /// <summary>
            /// Status ColumnDef
            /// </summary>
            public virtual Int32APColumnDef Status {
                get {
                    if (Object.ReferenceEquals(_status, null)) {
                        _status = new Int32APColumnDef(this, "Status", true);
                        _status.Display = "账号状态";
                    }
                    return _status;
                }
            }
            
            /// <summary>
            /// Sort ColumnDef
            /// </summary>
            public virtual Int32APColumnDef Sort {
                get {
                    if (Object.ReferenceEquals(_sort, null)) {
                        _sort = new Int32APColumnDef(this, "Sort", true);
                        _sort.Display = "账号排序号";
                    }
                    return _sort;
                }
            }
            
            /// <summary>
            /// Note ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Note {
                get {
                    if (Object.ReferenceEquals(_note, null)) {
                        _note = new StringAPColumnDef(this, "Note", true, 1000);
                        _note.Display = "备注";
                    }
                    return _note;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual AccountTableDef As(string name) {
                return new AccountTableDef("Users", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Account data, bool throwIfValidColumnName) {
                data.UserId = UserId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.UserName = UserName.GetValue<string>(reader, throwIfValidColumnName);
                data.Account = Account.GetValue<string>(reader, throwIfValidColumnName);
                data.Password = Password.GetValue<string>(reader, throwIfValidColumnName);
                data.Status = Status.GetValue<int>(reader, throwIfValidColumnName, 0);
                data.Sort = Sort.GetValue<int>(reader, throwIfValidColumnName, 0);
                data.Note = Note.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Account Map(IDataReader reader) {
                Account data = new Account();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Account TolerantMap(IDataReader reader) {
                Account data = new Account();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Account> MapList(IDataReader reader) {
                List<Account> list = new List<Account>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Account> TolerantMapList(IDataReader reader) {
                List<Account> list = new List<Account>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class UserInfoTableDef : APTableDef {
            
            private GuidAPColumnDef _userId;
            
            private StringAPColumnDef _userName;
            
            private StringAPColumnDef _realName;
            
            private StringAPColumnDef _nickName;
            
            private Int32APColumnDef _gender;
            
            private StringAPColumnDef _department;
            
            private StringAPColumnDef _position;
            
            private StringAPColumnDef _phone;
            
            private StringAPColumnDef _mobile;
            
            private StringAPColumnDef _email;
            
            private DateTimeAPColumnDef _birthday;
            
            private StringAPColumnDef _introduce;
            
            private BooleanAPColumnDef _isDelete;
            
            public UserInfoTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected UserInfoTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new GuidAPColumnDef(this, "ID", false);
                        _userId.Display = "ID";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// UserName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef UserName {
                get {
                    if (Object.ReferenceEquals(_userName, null)) {
                        _userName = new StringAPColumnDef(this, "UserName", false, 40);
                        _userName.Display = "用户名";
                        _userName.Required = true;
                    }
                    return _userName;
                }
            }
            
            /// <summary>
            /// RealName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef RealName {
                get {
                    if (Object.ReferenceEquals(_realName, null)) {
                        _realName = new StringAPColumnDef(this, "RealName", true, 40);
                        _realName.Display = "真实姓名";
                    }
                    return _realName;
                }
            }
            
            /// <summary>
            /// NickName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef NickName {
                get {
                    if (Object.ReferenceEquals(_nickName, null)) {
                        _nickName = new StringAPColumnDef(this, "NickName", true, 40);
                        _nickName.Display = "用户昵称";
                    }
                    return _nickName;
                }
            }
            
            /// <summary>
            /// Gender ColumnDef
            /// </summary>
            public virtual Int32APColumnDef Gender {
                get {
                    if (Object.ReferenceEquals(_gender, null)) {
                        _gender = new Int32APColumnDef(this, "Gender", false);
                        _gender.Display = "性别";
                    }
                    return _gender;
                }
            }
            
            /// <summary>
            /// Department ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Department {
                get {
                    if (Object.ReferenceEquals(_department, null)) {
                        _department = new StringAPColumnDef(this, "Department", true, 255);
                        _department.Display = "所在部门";
                    }
                    return _department;
                }
            }
            
            /// <summary>
            /// Position ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Position {
                get {
                    if (Object.ReferenceEquals(_position, null)) {
                        _position = new StringAPColumnDef(this, "Position", true, 255);
                        _position.Display = "职位";
                    }
                    return _position;
                }
            }
            
            /// <summary>
            /// Phone ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Phone {
                get {
                    if (Object.ReferenceEquals(_phone, null)) {
                        _phone = new StringAPColumnDef(this, "Phone", true, 20);
                        _phone.Display = "公司电话";
                    }
                    return _phone;
                }
            }
            
            /// <summary>
            /// Mobile ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Mobile {
                get {
                    if (Object.ReferenceEquals(_mobile, null)) {
                        _mobile = new StringAPColumnDef(this, "Mobile", true, 20);
                        _mobile.Display = "手机号";
                    }
                    return _mobile;
                }
            }
            
            /// <summary>
            /// Email ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Email {
                get {
                    if (Object.ReferenceEquals(_email, null)) {
                        _email = new StringAPColumnDef(this, "Email", true, 50);
                        _email.Display = "邮箱";
                    }
                    return _email;
                }
            }
            
            /// <summary>
            /// Birthday ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef Birthday {
                get {
                    if (Object.ReferenceEquals(_birthday, null)) {
                        _birthday = new DateTimeAPColumnDef(this, "Birthday", true);
                        _birthday.Display = "生日";
                    }
                    return _birthday;
                }
            }
            
            /// <summary>
            /// Introduce ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Introduce {
                get {
                    if (Object.ReferenceEquals(_introduce, null)) {
                        _introduce = new StringAPColumnDef(this, "Introduce", true, 500);
                        _introduce.Display = "自我介绍";
                    }
                    return _introduce;
                }
            }
            
            /// <summary>
            /// IsDelete ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsDelete {
                get {
                    if (Object.ReferenceEquals(_isDelete, null)) {
                        _isDelete = new BooleanAPColumnDef(this, "IsDelete", true);
                        _isDelete.Display = "IsDelete";
                    }
                    return _isDelete;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual UserInfoTableDef As(string name) {
                return new UserInfoTableDef("UserInfo", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, UserInfo data, bool throwIfValidColumnName) {
                data.UserId = UserId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.UserName = UserName.GetValue<string>(reader, throwIfValidColumnName);
                data.RealName = RealName.GetValue<string>(reader, throwIfValidColumnName);
                data.NickName = NickName.GetValue<string>(reader, throwIfValidColumnName);
                data.Gender = Gender.GetValue<int>(reader, throwIfValidColumnName);
                data.Department = Department.GetValue<string>(reader, throwIfValidColumnName);
                data.Position = Position.GetValue<string>(reader, throwIfValidColumnName);
                data.Phone = Phone.GetValue<string>(reader, throwIfValidColumnName);
                data.Mobile = Mobile.GetValue<string>(reader, throwIfValidColumnName);
                data.Email = Email.GetValue<string>(reader, throwIfValidColumnName);
                data.Birthday = Birthday.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.Introduce = Introduce.GetValue<string>(reader, throwIfValidColumnName);
                data.IsDelete = IsDelete.GetValue<bool>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual UserInfo Map(IDataReader reader) {
                UserInfo data = new UserInfo();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual UserInfo TolerantMap(IDataReader reader) {
                UserInfo data = new UserInfo();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<UserInfo> MapList(IDataReader reader) {
                List<UserInfo> list = new List<UserInfo>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<UserInfo> TolerantMapList(IDataReader reader) {
                List<UserInfo> list = new List<UserInfo>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class AppTableDef : APTableDef {
            
            private GuidAPColumnDef _appId;
            
            private StringAPColumnDef _title;
            
            private StringAPColumnDef _address;
            
            private GuidAPColumnDef _appType;
            
            private StringAPColumnDef _code;
            
            private StringAPColumnDef _note;
            
            private Int32APColumnDef _backup1;
            
            private Int32APColumnDef _backup2;
            
            private Int32APColumnDef _backup3;
            
            private StringAPColumnDef _backup4;
            
            private StringAPColumnDef _backup5;
            
            private StringAPColumnDef _backup6;
            
            public AppTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected AppTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// AppId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef AppId {
                get {
                    if (Object.ReferenceEquals(_appId, null)) {
                        _appId = new GuidAPColumnDef(this, "ID", false);
                        _appId.Display = "ID";
                    }
                    return _appId;
                }
            }
            
            /// <summary>
            /// Title ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Title {
                get {
                    if (Object.ReferenceEquals(_title, null)) {
                        _title = new StringAPColumnDef(this, "Title", false, 255);
                        _title.Display = "标题";
                    }
                    return _title;
                }
            }
            
            /// <summary>
            /// Address ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Address {
                get {
                    if (Object.ReferenceEquals(_address, null)) {
                        _address = new StringAPColumnDef(this, "Address", false, 255);
                        _address.Display = "应用地址";
                    }
                    return _address;
                }
            }
            
            /// <summary>
            /// AppType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef AppType {
                get {
                    if (Object.ReferenceEquals(_appType, null)) {
                        _appType = new GuidAPColumnDef(this, "Type", false);
                        _appType.Display = "Type";
                    }
                    return _appType;
                }
            }
            
            /// <summary>
            /// Code ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Code {
                get {
                    if (Object.ReferenceEquals(_code, null)) {
                        _code = new StringAPColumnDef(this, "Code", true, 200);
                        _code.Display = "Code";
                    }
                    return _code;
                }
            }
            
            /// <summary>
            /// Note ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Note {
                get {
                    if (Object.ReferenceEquals(_note, null)) {
                        _note = new StringAPColumnDef(this, "Note", true, 200);
                        _note.Display = "应用描述";
                    }
                    return _note;
                }
            }
            
            /// <summary>
            /// backup1 ColumnDef
            /// </summary>
            public virtual Int32APColumnDef backup1 {
                get {
                    if (Object.ReferenceEquals(_backup1, null)) {
                        _backup1 = new Int32APColumnDef(this, "OpenMode", true);
                        _backup1.Display = "OpenMode";
                    }
                    return _backup1;
                }
            }
            
            /// <summary>
            /// backup2 ColumnDef
            /// </summary>
            public virtual Int32APColumnDef backup2 {
                get {
                    if (Object.ReferenceEquals(_backup2, null)) {
                        _backup2 = new Int32APColumnDef(this, "Width", true);
                        _backup2.Display = "Width";
                    }
                    return _backup2;
                }
            }
            
            /// <summary>
            /// backup3 ColumnDef
            /// </summary>
            public virtual Int32APColumnDef backup3 {
                get {
                    if (Object.ReferenceEquals(_backup3, null)) {
                        _backup3 = new Int32APColumnDef(this, "Height", true);
                        _backup3.Display = "Height";
                    }
                    return _backup3;
                }
            }
            
            /// <summary>
            /// backup4 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef backup4 {
                get {
                    if (Object.ReferenceEquals(_backup4, null)) {
                        _backup4 = new StringAPColumnDef(this, "Params", true, 2000);
                        _backup4.Display = "Params";
                    }
                    return _backup4;
                }
            }
            
            /// <summary>
            /// backup5 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef backup5 {
                get {
                    if (Object.ReferenceEquals(_backup5, null)) {
                        _backup5 = new StringAPColumnDef(this, "Manager", true, 2000);
                        _backup5.Display = "Manager";
                    }
                    return _backup5;
                }
            }
            
            /// <summary>
            /// backup6 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef backup6 {
                get {
                    if (Object.ReferenceEquals(_backup6, null)) {
                        _backup6 = new StringAPColumnDef(this, "UseMember", true, 2000);
                        _backup6.Display = "UseMember";
                    }
                    return _backup6;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual AppTableDef As(string name) {
                return new AppTableDef("AppLibrary", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, App data, bool throwIfValidColumnName) {
                data.AppId = AppId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Title = Title.GetValue<string>(reader, throwIfValidColumnName);
                data.Address = Address.GetValue<string>(reader, throwIfValidColumnName);
                data.AppType = AppType.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Code = Code.GetValue<string>(reader, throwIfValidColumnName);
                data.Note = Note.GetValue<string>(reader, throwIfValidColumnName);
                data.backup1 = backup1.GetValue<int>(reader, throwIfValidColumnName);
                data.backup2 = backup2.GetValue<int>(reader, throwIfValidColumnName);
                data.backup3 = backup3.GetValue<int>(reader, throwIfValidColumnName);
                data.backup4 = backup4.GetValue<string>(reader, throwIfValidColumnName);
                data.backup5 = backup5.GetValue<string>(reader, throwIfValidColumnName);
                data.backup6 = backup6.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual App Map(IDataReader reader) {
                App data = new App();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual App TolerantMap(IDataReader reader) {
                App data = new App();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<App> MapList(IDataReader reader) {
                List<App> list = new List<App>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<App> TolerantMapList(IDataReader reader) {
                List<App> list = new List<App>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class RoleTableDef : APTableDef {
            
            private GuidAPColumnDef _roleId;
            
            private StringAPColumnDef _roleName;
            
            private StringAPColumnDef _roleUseMember;
            
            private StringAPColumnDef _note;
            
            private Int32APColumnDef _roleType;
            
            public RoleTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected RoleTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// RoleId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef RoleId {
                get {
                    if (Object.ReferenceEquals(_roleId, null)) {
                        _roleId = new GuidAPColumnDef(this, "ID", false);
                        _roleId.Display = "ID";
                    }
                    return _roleId;
                }
            }
            
            /// <summary>
            /// RoleName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef RoleName {
                get {
                    if (Object.ReferenceEquals(_roleName, null)) {
                        _roleName = new StringAPColumnDef(this, "Name", false, 200);
                        _roleName.Display = "角色名称";
                    }
                    return _roleName;
                }
            }
            
            /// <summary>
            /// RoleUseMember ColumnDef
            /// </summary>
            public virtual StringAPColumnDef RoleUseMember {
                get {
                    if (Object.ReferenceEquals(_roleUseMember, null)) {
                        _roleUseMember = new StringAPColumnDef(this, "UseMember", true, 8000);
                        _roleUseMember.Display = "UseMember";
                    }
                    return _roleUseMember;
                }
            }
            
            /// <summary>
            /// Note ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Note {
                get {
                    if (Object.ReferenceEquals(_note, null)) {
                        _note = new StringAPColumnDef(this, "Note", true, 8000);
                        _note.Display = "备注";
                    }
                    return _note;
                }
            }
            
            /// <summary>
            /// RoleType ColumnDef
            /// </summary>
            public virtual Int32APColumnDef RoleType {
                get {
                    if (Object.ReferenceEquals(_roleType, null)) {
                        _roleType = new Int32APColumnDef(this, "Type", true);
                        _roleType.Display = "Type";
                    }
                    return _roleType;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual RoleTableDef As(string name) {
                return new RoleTableDef("Role", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Role data, bool throwIfValidColumnName) {
                data.RoleId = RoleId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.RoleName = RoleName.GetValue<string>(reader, throwIfValidColumnName);
                data.RoleUseMember = RoleUseMember.GetValue<string>(reader, throwIfValidColumnName);
                data.Note = Note.GetValue<string>(reader, throwIfValidColumnName);
                data.RoleType = RoleType.GetValue<int>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Role Map(IDataReader reader) {
                Role data = new Role();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Role TolerantMap(IDataReader reader) {
                Role data = new Role();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Role> MapList(IDataReader reader) {
                List<Role> list = new List<Role>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Role> TolerantMapList(IDataReader reader) {
                List<Role> list = new List<Role>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class UserRoleTableDef : APTableDef {
            
            private GuidAPColumnDef _iD;
            
            private GuidAPColumnDef _userId;
            
            private GuidAPColumnDef _roleId;
            
            private Int32APColumnDef _isDefault;
            
            public UserRoleTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected UserRoleTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ID ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ID {
                get {
                    if (Object.ReferenceEquals(_iD, null)) {
                        _iD = new GuidAPColumnDef(this, "ID", false);
                        _iD.Display = "ID";
                    }
                    return _iD;
                }
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new GuidAPColumnDef(this, "MemberID", false);
                        _userId.Display = "MemberID";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// RoleId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef RoleId {
                get {
                    if (Object.ReferenceEquals(_roleId, null)) {
                        _roleId = new GuidAPColumnDef(this, "RoleID", false);
                        _roleId.Display = "RoleID";
                    }
                    return _roleId;
                }
            }
            
            /// <summary>
            /// IsDefault ColumnDef
            /// </summary>
            public virtual Int32APColumnDef IsDefault {
                get {
                    if (Object.ReferenceEquals(_isDefault, null)) {
                        _isDefault = new Int32APColumnDef(this, "IsDefault", false);
                        _isDefault.Display = "IsDefault";
                    }
                    return _isDefault;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual UserRoleTableDef As(string name) {
                return new UserRoleTableDef("UsersRole", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, UserRole data, bool throwIfValidColumnName) {
                data.ID = ID.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.UserId = UserId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.RoleId = RoleId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.IsDefault = IsDefault.GetValue<int>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual UserRole Map(IDataReader reader) {
                UserRole data = new UserRole();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual UserRole TolerantMap(IDataReader reader) {
                UserRole data = new UserRole();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<UserRole> MapList(IDataReader reader) {
                List<UserRole> list = new List<UserRole>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<UserRole> TolerantMapList(IDataReader reader) {
                List<UserRole> list = new List<UserRole>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class CompanyInfoTableDef : APTableDef {
            
            private GuidAPColumnDef _companyId;
            
            private StringAPColumnDef _companyName;
            
            private StringAPColumnDef _companyStatus;
            
            public CompanyInfoTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected CompanyInfoTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// CompanyId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef CompanyId {
                get {
                    if (Object.ReferenceEquals(_companyId, null)) {
                        _companyId = new GuidAPColumnDef(this, "ID", false);
                        _companyId.Display = "ID";
                    }
                    return _companyId;
                }
            }
            
            /// <summary>
            /// CompanyName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef CompanyName {
                get {
                    if (Object.ReferenceEquals(_companyName, null)) {
                        _companyName = new StringAPColumnDef(this, "CompanyName", false, 40);
                        _companyName.Display = "单位名称";
                        _companyName.Required = true;
                    }
                    return _companyName;
                }
            }
            
            /// <summary>
            /// CompanyStatus ColumnDef
            /// </summary>
            public virtual StringAPColumnDef CompanyStatus {
                get {
                    if (Object.ReferenceEquals(_companyStatus, null)) {
                        _companyStatus = new StringAPColumnDef(this, "CompanyStatus", false, 40);
                        _companyStatus.Display = "状态";
                        _companyStatus.Required = true;
                    }
                    return _companyStatus;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual CompanyInfoTableDef As(string name) {
                return new CompanyInfoTableDef("CompanyInfo", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, CompanyInfo data, bool throwIfValidColumnName) {
                data.CompanyId = CompanyId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.CompanyName = CompanyName.GetValue<string>(reader, throwIfValidColumnName);
                data.CompanyStatus = CompanyStatus.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual CompanyInfo Map(IDataReader reader) {
                CompanyInfo data = new CompanyInfo();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual CompanyInfo TolerantMap(IDataReader reader) {
                CompanyInfo data = new CompanyInfo();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<CompanyInfo> MapList(IDataReader reader) {
                List<CompanyInfo> list = new List<CompanyInfo>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<CompanyInfo> TolerantMapList(IDataReader reader) {
                List<CompanyInfo> list = new List<CompanyInfo>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class ProjectTableDef : APTableDef {
            
            private GuidAPColumnDef _projectId;
            
            private StringAPColumnDef _projectName;
            
            private StringAPColumnDef _description;
            
            private GuidAPColumnDef _projectStatus;
            
            private GuidAPColumnDef _projectType;
            
            private DoubleAPColumnDef _rateOfProgress;
            
            private GuidAPColumnDef _pMId;
            
            private GuidAPColumnDef _creatorId;
            
            private DateTimeAPColumnDef _startDate;
            
            private DateTimeAPColumnDef _endDate;
            
            private DateTimeAPColumnDef _realStartDate;
            
            private DateTimeAPColumnDef _realEndDate;
            
            private StringAPColumnDef _projectOwner;
            
            private DateTimeAPColumnDef _createDate;
            
            private DateTimeAPColumnDef _modifyDate;
            
            private GuidAPColumnDef _orgId;
            
            private StringAPColumnDef _code;
            
            private StringAPColumnDef _realCode;
            
            private GuidAPColumnDef _reviewerId;
            
            private StringAPColumnDef _projectExecutor;
            
            private GuidAPColumnDef _managerId;
            
            private StringAPColumnDef _processName;
            
            private GuidAPColumnDef _folderId;
            
            private DoubleAPColumnDef _money;
            
            private DoubleAPColumnDef _cMoney;
            
            public ProjectTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected ProjectTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ProjectId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ProjectId {
                get {
                    if (Object.ReferenceEquals(_projectId, null)) {
                        _projectId = new GuidAPColumnDef(this, "ID", false);
                        _projectId.Display = "项目ID";
                    }
                    return _projectId;
                }
            }
            
            /// <summary>
            /// ProjectName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ProjectName {
                get {
                    if (Object.ReferenceEquals(_projectName, null)) {
                        _projectName = new StringAPColumnDef(this, "Name", false, 200);
                        _projectName.Display = "项目名称";
                        _projectName.Required = true;
                    }
                    return _projectName;
                }
            }
            
            /// <summary>
            /// Description ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Description {
                get {
                    if (Object.ReferenceEquals(_description, null)) {
                        _description = new StringAPColumnDef(this, "Description", true, 40000);
                        _description.Display = "项目描述";
                    }
                    return _description;
                }
            }
            
            /// <summary>
            /// ProjectStatus ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ProjectStatus {
                get {
                    if (Object.ReferenceEquals(_projectStatus, null)) {
                        _projectStatus = new GuidAPColumnDef(this, "Status", true);
                        _projectStatus.Display = "项目状态";
                    }
                    return _projectStatus;
                }
            }
            
            /// <summary>
            /// ProjectType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ProjectType {
                get {
                    if (Object.ReferenceEquals(_projectType, null)) {
                        _projectType = new GuidAPColumnDef(this, "Type", true);
                        _projectType.Display = "项目类型";
                    }
                    return _projectType;
                }
            }
            
            /// <summary>
            /// RateOfProgress ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef RateOfProgress {
                get {
                    if (Object.ReferenceEquals(_rateOfProgress, null)) {
                        _rateOfProgress = new DoubleAPColumnDef(this, "progress", true);
                        _rateOfProgress.Display = "项目进度";
                    }
                    return _rateOfProgress;
                }
            }
            
            /// <summary>
            /// PMId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef PMId {
                get {
                    if (Object.ReferenceEquals(_pMId, null)) {
                        _pMId = new GuidAPColumnDef(this, "PMId", true);
                        _pMId.Display = "项目负责人ID";
                    }
                    return _pMId;
                }
            }
            
            /// <summary>
            /// CreatorId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef CreatorId {
                get {
                    if (Object.ReferenceEquals(_creatorId, null)) {
                        _creatorId = new GuidAPColumnDef(this, "CreateorId", true);
                        _creatorId.Display = "项目创建者ID";
                    }
                    return _creatorId;
                }
            }
            
            /// <summary>
            /// StartDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef StartDate {
                get {
                    if (Object.ReferenceEquals(_startDate, null)) {
                        _startDate = new DateTimeAPColumnDef(this, "StartDate", true);
                        _startDate.Display = "预估开始时间";
                    }
                    return _startDate;
                }
            }
            
            /// <summary>
            /// EndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef EndDate {
                get {
                    if (Object.ReferenceEquals(_endDate, null)) {
                        _endDate = new DateTimeAPColumnDef(this, "EndDate", true);
                        _endDate.Display = "预估结束时间";
                    }
                    return _endDate;
                }
            }
            
            /// <summary>
            /// RealStartDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef RealStartDate {
                get {
                    if (Object.ReferenceEquals(_realStartDate, null)) {
                        _realStartDate = new DateTimeAPColumnDef(this, "RealStartDate", true);
                        _realStartDate.Display = "实际开始时间";
                    }
                    return _realStartDate;
                }
            }
            
            /// <summary>
            /// RealEndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef RealEndDate {
                get {
                    if (Object.ReferenceEquals(_realEndDate, null)) {
                        _realEndDate = new DateTimeAPColumnDef(this, "RealEndDate", true);
                        _realEndDate.Display = "实际结束时间";
                    }
                    return _realEndDate;
                }
            }
            
            /// <summary>
            /// ProjectOwner ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ProjectOwner {
                get {
                    if (Object.ReferenceEquals(_projectOwner, null)) {
                        _projectOwner = new StringAPColumnDef(this, "Owner", true, 100);
                        _projectOwner.Display = "项目甲方";
                    }
                    return _projectOwner;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", true);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "最近修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// OrgId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef OrgId {
                get {
                    if (Object.ReferenceEquals(_orgId, null)) {
                        _orgId = new GuidAPColumnDef(this, "OrgId", true);
                        _orgId.Display = "项目归属部门";
                    }
                    return _orgId;
                }
            }
            
            /// <summary>
            /// Code ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Code {
                get {
                    if (Object.ReferenceEquals(_code, null)) {
                        _code = new StringAPColumnDef(this, "Code", true, 100);
                        _code.Display = "内部项目编号";
                    }
                    return _code;
                }
            }
            
            /// <summary>
            /// RealCode ColumnDef
            /// </summary>
            public virtual StringAPColumnDef RealCode {
                get {
                    if (Object.ReferenceEquals(_realCode, null)) {
                        _realCode = new StringAPColumnDef(this, "RealCode", true, 100);
                        _realCode.Display = "立项编号";
                    }
                    return _realCode;
                }
            }
            
            /// <summary>
            /// ReviewerId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ReviewerId {
                get {
                    if (Object.ReferenceEquals(_reviewerId, null)) {
                        _reviewerId = new GuidAPColumnDef(this, "ReviewerId", true);
                        _reviewerId.Display = "审核人ID";
                    }
                    return _reviewerId;
                }
            }
            
            /// <summary>
            /// ProjectExecutor ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ProjectExecutor {
                get {
                    if (Object.ReferenceEquals(_projectExecutor, null)) {
                        _projectExecutor = new StringAPColumnDef(this, "Executor", true, 100);
                        _projectExecutor.Display = "项目乙方";
                    }
                    return _projectExecutor;
                }
            }
            
            /// <summary>
            /// ManagerId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ManagerId {
                get {
                    if (Object.ReferenceEquals(_managerId, null)) {
                        _managerId = new GuidAPColumnDef(this, "ManagerId", true);
                        _managerId.Display = "项目经理";
                    }
                    return _managerId;
                }
            }
            
            /// <summary>
            /// ProcessName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ProcessName {
                get {
                    if (Object.ReferenceEquals(_processName, null)) {
                        _processName = new StringAPColumnDef(this, "ProcessName", true, 100);
                        _processName.Display = "项目进展";
                    }
                    return _processName;
                }
            }
            
            /// <summary>
            /// FolderId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef FolderId {
                get {
                    if (Object.ReferenceEquals(_folderId, null)) {
                        _folderId = new GuidAPColumnDef(this, "FolderId", true);
                        _folderId.Display = "项目文件夹ID";
                    }
                    return _folderId;
                }
            }
            
            /// <summary>
            /// Money ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Money {
                get {
                    if (Object.ReferenceEquals(_money, null)) {
                        _money = new DoubleAPColumnDef(this, "money", true);
                        _money.Display = "预估总金额";
                    }
                    return _money;
                }
            }
            
            /// <summary>
            /// CMoney ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef CMoney {
                get {
                    if (Object.ReferenceEquals(_cMoney, null)) {
                        _cMoney = new DoubleAPColumnDef(this, "cmoney", true);
                        _cMoney.Display = "合同总金额";
                    }
                    return _cMoney;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual ProjectTableDef As(string name) {
                return new ProjectTableDef("Project", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Project data, bool throwIfValidColumnName) {
                data.ProjectId = ProjectId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ProjectName = ProjectName.GetValue<string>(reader, throwIfValidColumnName);
                data.Description = Description.GetValue<string>(reader, throwIfValidColumnName);
                data.ProjectStatus = ProjectStatus.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ProjectType = ProjectType.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.RateOfProgress = RateOfProgress.GetValue<double>(reader, throwIfValidColumnName);
                data.PMId = PMId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.CreatorId = CreatorId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.StartDate = StartDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
                data.EndDate = EndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.RealStartDate = RealStartDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.RealEndDate = RealEndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.ProjectOwner = ProjectOwner.GetValue<string>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.ModifyDate = ModifyDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.OrgId = OrgId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Code = Code.GetValue<string>(reader, throwIfValidColumnName);
                data.RealCode = RealCode.GetValue<string>(reader, throwIfValidColumnName);
                data.ReviewerId = ReviewerId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ProjectExecutor = ProjectExecutor.GetValue<string>(reader, throwIfValidColumnName);
                data.ManagerId = ManagerId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ProcessName = ProcessName.GetValue<string>(reader, throwIfValidColumnName);
                data.FolderId = FolderId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Money = Money.GetValue<double>(reader, throwIfValidColumnName);
                data.CMoney = CMoney.GetValue<double>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Project Map(IDataReader reader) {
                Project data = new Project();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Project TolerantMap(IDataReader reader) {
                Project data = new Project();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Project> MapList(IDataReader reader) {
                List<Project> list = new List<Project>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Project> TolerantMapList(IDataReader reader) {
                List<Project> list = new List<Project>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class ProjectRecordTableDef : APTableDef {
            
            private GuidAPColumnDef _recordId;
            
            private StringAPColumnDef _projectName;
            
            private GuidAPColumnDef _projectId;
            
            private DoubleAPColumnDef _progress;
            
            private DateTimeAPColumnDef _recordDate;
            
            private StringAPColumnDef _processName;
            
            private GuidAPColumnDef _projectStatus;
            
            private GuidAPColumnDef _projectType;
            
            private DoubleAPColumnDef _rateOfProgress;
            
            private GuidAPColumnDef _pMId;
            
            private DateTimeAPColumnDef _startDate;
            
            private DateTimeAPColumnDef _endDate;
            
            private StringAPColumnDef _projectOwner;
            
            private StringAPColumnDef _realCode;
            
            private GuidAPColumnDef _reviewerId;
            
            private StringAPColumnDef _projectExecutor;
            
            private GuidAPColumnDef _managerId;
            
            private StringAPColumnDef _code;
            
            private GuidAPColumnDef _operatorId;
            
            public ProjectRecordTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected ProjectRecordTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// RecordId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef RecordId {
                get {
                    if (Object.ReferenceEquals(_recordId, null)) {
                        _recordId = new GuidAPColumnDef(this, "ID", false);
                        _recordId.Display = "日志ID";
                    }
                    return _recordId;
                }
            }
            
            /// <summary>
            /// ProjectName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ProjectName {
                get {
                    if (Object.ReferenceEquals(_projectName, null)) {
                        _projectName = new StringAPColumnDef(this, "ProjectName", false, 200);
                        _projectName.Display = "项目名称";
                        _projectName.Required = true;
                    }
                    return _projectName;
                }
            }
            
            /// <summary>
            /// ProjectId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ProjectId {
                get {
                    if (Object.ReferenceEquals(_projectId, null)) {
                        _projectId = new GuidAPColumnDef(this, "ProjectId", false);
                        _projectId.Display = "项目ID";
                    }
                    return _projectId;
                }
            }
            
            /// <summary>
            /// Progress ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Progress {
                get {
                    if (Object.ReferenceEquals(_progress, null)) {
                        _progress = new DoubleAPColumnDef(this, "progress", true);
                        _progress.Display = "项目进度";
                    }
                    return _progress;
                }
            }
            
            /// <summary>
            /// RecordDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef RecordDate {
                get {
                    if (Object.ReferenceEquals(_recordDate, null)) {
                        _recordDate = new DateTimeAPColumnDef(this, "RecordDate", true);
                        _recordDate.Display = "记录时间";
                    }
                    return _recordDate;
                }
            }
            
            /// <summary>
            /// ProcessName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ProcessName {
                get {
                    if (Object.ReferenceEquals(_processName, null)) {
                        _processName = new StringAPColumnDef(this, "ProcessName", true, 100);
                        _processName.Display = "项目进展";
                    }
                    return _processName;
                }
            }
            
            /// <summary>
            /// ProjectStatus ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ProjectStatus {
                get {
                    if (Object.ReferenceEquals(_projectStatus, null)) {
                        _projectStatus = new GuidAPColumnDef(this, "ProjectStatus", true);
                        _projectStatus.Display = "项目状态";
                    }
                    return _projectStatus;
                }
            }
            
            /// <summary>
            /// ProjectType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ProjectType {
                get {
                    if (Object.ReferenceEquals(_projectType, null)) {
                        _projectType = new GuidAPColumnDef(this, "ProjectType", true);
                        _projectType.Display = "项目类型";
                    }
                    return _projectType;
                }
            }
            
            /// <summary>
            /// RateOfProgress ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef RateOfProgress {
                get {
                    if (Object.ReferenceEquals(_rateOfProgress, null)) {
                        _rateOfProgress = new DoubleAPColumnDef(this, "RateOfProgress", true);
                        _rateOfProgress.Display = "项目进度";
                    }
                    return _rateOfProgress;
                }
            }
            
            /// <summary>
            /// PMId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef PMId {
                get {
                    if (Object.ReferenceEquals(_pMId, null)) {
                        _pMId = new GuidAPColumnDef(this, "PMId", true);
                        _pMId.Display = "项目负责人ID";
                    }
                    return _pMId;
                }
            }
            
            /// <summary>
            /// StartDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef StartDate {
                get {
                    if (Object.ReferenceEquals(_startDate, null)) {
                        _startDate = new DateTimeAPColumnDef(this, "StartDate", true);
                        _startDate.Display = "预估开始时间";
                    }
                    return _startDate;
                }
            }
            
            /// <summary>
            /// EndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef EndDate {
                get {
                    if (Object.ReferenceEquals(_endDate, null)) {
                        _endDate = new DateTimeAPColumnDef(this, "EndDate", true);
                        _endDate.Display = "预估结束时间";
                    }
                    return _endDate;
                }
            }
            
            /// <summary>
            /// ProjectOwner ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ProjectOwner {
                get {
                    if (Object.ReferenceEquals(_projectOwner, null)) {
                        _projectOwner = new StringAPColumnDef(this, "ProjectOwner", true, 100);
                        _projectOwner.Display = "项目甲方";
                    }
                    return _projectOwner;
                }
            }
            
            /// <summary>
            /// RealCode ColumnDef
            /// </summary>
            public virtual StringAPColumnDef RealCode {
                get {
                    if (Object.ReferenceEquals(_realCode, null)) {
                        _realCode = new StringAPColumnDef(this, "RealCode", true, 100);
                        _realCode.Display = "立项编号";
                    }
                    return _realCode;
                }
            }
            
            /// <summary>
            /// ReviewerId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ReviewerId {
                get {
                    if (Object.ReferenceEquals(_reviewerId, null)) {
                        _reviewerId = new GuidAPColumnDef(this, "ReviewerId", true);
                        _reviewerId.Display = "审核人ID";
                    }
                    return _reviewerId;
                }
            }
            
            /// <summary>
            /// ProjectExecutor ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ProjectExecutor {
                get {
                    if (Object.ReferenceEquals(_projectExecutor, null)) {
                        _projectExecutor = new StringAPColumnDef(this, "ProjectExecutor", true, 100);
                        _projectExecutor.Display = "项目乙方";
                    }
                    return _projectExecutor;
                }
            }
            
            /// <summary>
            /// ManagerId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ManagerId {
                get {
                    if (Object.ReferenceEquals(_managerId, null)) {
                        _managerId = new GuidAPColumnDef(this, "ManagerId", true);
                        _managerId.Display = "项目经理";
                    }
                    return _managerId;
                }
            }
            
            /// <summary>
            /// Code ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Code {
                get {
                    if (Object.ReferenceEquals(_code, null)) {
                        _code = new StringAPColumnDef(this, "Code", true, 100);
                        _code.Display = "内部项目编号";
                    }
                    return _code;
                }
            }
            
            /// <summary>
            /// OperatorId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef OperatorId {
                get {
                    if (Object.ReferenceEquals(_operatorId, null)) {
                        _operatorId = new GuidAPColumnDef(this, "OperatorId", true);
                        _operatorId.Display = "操作人";
                    }
                    return _operatorId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual ProjectRecordTableDef As(string name) {
                return new ProjectRecordTableDef("ProjectRecord", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, ProjectRecord data, bool throwIfValidColumnName) {
                data.RecordId = RecordId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ProjectName = ProjectName.GetValue<string>(reader, throwIfValidColumnName);
                data.ProjectId = ProjectId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Progress = Progress.GetValue<double>(reader, throwIfValidColumnName);
                data.RecordDate = RecordDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.ProcessName = ProcessName.GetValue<string>(reader, throwIfValidColumnName);
                data.ProjectStatus = ProjectStatus.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ProjectType = ProjectType.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.RateOfProgress = RateOfProgress.GetValue<double>(reader, throwIfValidColumnName);
                data.PMId = PMId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.StartDate = StartDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
                data.EndDate = EndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.ProjectOwner = ProjectOwner.GetValue<string>(reader, throwIfValidColumnName);
                data.RealCode = RealCode.GetValue<string>(reader, throwIfValidColumnName);
                data.ReviewerId = ReviewerId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ProjectExecutor = ProjectExecutor.GetValue<string>(reader, throwIfValidColumnName);
                data.ManagerId = ManagerId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Code = Code.GetValue<string>(reader, throwIfValidColumnName);
                data.OperatorId = OperatorId.GetValue<System.Guid>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ProjectRecord Map(IDataReader reader) {
                ProjectRecord data = new ProjectRecord();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ProjectRecord TolerantMap(IDataReader reader) {
                ProjectRecord data = new ProjectRecord();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ProjectRecord> MapList(IDataReader reader) {
                List<ProjectRecord> list = new List<ProjectRecord>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ProjectRecord> TolerantMapList(IDataReader reader) {
                List<ProjectRecord> list = new List<ProjectRecord>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class ProjectRoleTableDef : APTableDef {
            
            private GuidAPColumnDef _pRID;
            
            private GuidAPColumnDef _projectId;
            
            private GuidAPColumnDef _roleId;
            
            private Int32APColumnDef _isDefault;
            
            private StringAPColumnDef _appIds;
            
            public ProjectRoleTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected ProjectRoleTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// PRID ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef PRID {
                get {
                    if (Object.ReferenceEquals(_pRID, null)) {
                        _pRID = new GuidAPColumnDef(this, "ID", false);
                        _pRID.Display = "ID";
                    }
                    return _pRID;
                }
            }
            
            /// <summary>
            /// ProjectId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ProjectId {
                get {
                    if (Object.ReferenceEquals(_projectId, null)) {
                        _projectId = new GuidAPColumnDef(this, "ProjectID", false);
                        _projectId.Display = "ProjectID";
                    }
                    return _projectId;
                }
            }
            
            /// <summary>
            /// RoleId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef RoleId {
                get {
                    if (Object.ReferenceEquals(_roleId, null)) {
                        _roleId = new GuidAPColumnDef(this, "RoleID", false);
                        _roleId.Display = "RoleID";
                    }
                    return _roleId;
                }
            }
            
            /// <summary>
            /// IsDefault ColumnDef
            /// </summary>
            public virtual Int32APColumnDef IsDefault {
                get {
                    if (Object.ReferenceEquals(_isDefault, null)) {
                        _isDefault = new Int32APColumnDef(this, "IsDefault", false);
                        _isDefault.Display = "IsDefault";
                    }
                    return _isDefault;
                }
            }
            
            /// <summary>
            /// AppIds ColumnDef
            /// </summary>
            public virtual StringAPColumnDef AppIds {
                get {
                    if (Object.ReferenceEquals(_appIds, null)) {
                        _appIds = new StringAPColumnDef(this, "AppIds", true, 2000);
                        _appIds.Display = "项目角色权限";
                    }
                    return _appIds;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual ProjectRoleTableDef As(string name) {
                return new ProjectRoleTableDef("ProjectRole", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, ProjectRole data, bool throwIfValidColumnName) {
                data.PRID = PRID.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ProjectId = ProjectId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.RoleId = RoleId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.IsDefault = IsDefault.GetValue<int>(reader, throwIfValidColumnName, 1);
                data.AppIds = AppIds.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ProjectRole Map(IDataReader reader) {
                ProjectRole data = new ProjectRole();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ProjectRole TolerantMap(IDataReader reader) {
                ProjectRole data = new ProjectRole();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ProjectRole> MapList(IDataReader reader) {
                List<ProjectRole> list = new List<ProjectRole>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ProjectRole> TolerantMapList(IDataReader reader) {
                List<ProjectRole> list = new List<ProjectRole>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class ResourceTableDef : APTableDef {
            
            private GuidAPColumnDef _resourceId;
            
            private GuidAPColumnDef _userId;
            
            private GuidAPColumnDef _projectid;
            
            private GuidAPColumnDef _taskId;
            
            private StringAPColumnDef _resourceName;
            
            private StringAPColumnDef _resourceTypes;
            
            private StringAPColumnDef _description;
            
            private DateTimeAPColumnDef _createDate;
            
            private DateTimeAPColumnDef _modifyDate;
            
            private GuidAPColumnDef _status;
            
            public ResourceTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected ResourceTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ResourceId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ResourceId {
                get {
                    if (Object.ReferenceEquals(_resourceId, null)) {
                        _resourceId = new GuidAPColumnDef(this, "ResourceId", false);
                        _resourceId.Display = "ResourceId";
                    }
                    return _resourceId;
                }
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new GuidAPColumnDef(this, "UserId", false);
                        _userId.Display = "UserId";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// Projectid ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef Projectid {
                get {
                    if (Object.ReferenceEquals(_projectid, null)) {
                        _projectid = new GuidAPColumnDef(this, "Projectid", true);
                        _projectid.Display = "Projectid";
                    }
                    return _projectid;
                }
            }
            
            /// <summary>
            /// TaskId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskId {
                get {
                    if (Object.ReferenceEquals(_taskId, null)) {
                        _taskId = new GuidAPColumnDef(this, "TaskId", true);
                        _taskId.Display = "TaskId";
                    }
                    return _taskId;
                }
            }
            
            /// <summary>
            /// ResourceName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ResourceName {
                get {
                    if (Object.ReferenceEquals(_resourceName, null)) {
                        _resourceName = new StringAPColumnDef(this, "Name", false, 100);
                        _resourceName.Display = "资源名称";
                    }
                    return _resourceName;
                }
            }
            
            /// <summary>
            /// ResourceTypes ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ResourceTypes {
                get {
                    if (Object.ReferenceEquals(_resourceTypes, null)) {
                        _resourceTypes = new StringAPColumnDef(this, "Types", true, 200);
                        _resourceTypes.Display = "资源类型";
                    }
                    return _resourceTypes;
                }
            }
            
            /// <summary>
            /// Description ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Description {
                get {
                    if (Object.ReferenceEquals(_description, null)) {
                        _description = new StringAPColumnDef(this, "Description", true, 1000);
                        _description.Display = "资源描述";
                    }
                    return _description;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", true);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// Status ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef Status {
                get {
                    if (Object.ReferenceEquals(_status, null)) {
                        _status = new GuidAPColumnDef(this, "Status", true);
                        _status.Display = "资源状态";
                    }
                    return _status;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual ResourceTableDef As(string name) {
                return new ResourceTableDef("Resource", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Resource data, bool throwIfValidColumnName) {
                data.ResourceId = ResourceId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.UserId = UserId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Projectid = Projectid.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TaskId = TaskId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ResourceName = ResourceName.GetValue<string>(reader, throwIfValidColumnName);
                data.ResourceTypes = ResourceTypes.GetValue<string>(reader, throwIfValidColumnName);
                data.Description = Description.GetValue<string>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
                data.ModifyDate = ModifyDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Status = Status.GetValue<System.Guid>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Resource Map(IDataReader reader) {
                Resource data = new Resource();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Resource TolerantMap(IDataReader reader) {
                Resource data = new Resource();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Resource> MapList(IDataReader reader) {
                List<Resource> list = new List<Resource>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Resource> TolerantMapList(IDataReader reader) {
                List<Resource> list = new List<Resource>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class PaymentsTableDef : APTableDef {
            
            private GuidAPColumnDef _payId;
            
            private StringAPColumnDef _payName;
            
            private GuidAPColumnDef _projectId;
            
            private DoubleAPColumnDef _money;
            
            private DoubleAPColumnDef _rateOfProgress;
            
            private DateTimeAPColumnDef _invoiceDate;
            
            private DateTimeAPColumnDef _payDate;
            
            private GuidAPColumnDef _payType;
            
            private GuidAPColumnDef _resourceId;
            
            private DoubleAPColumnDef _sort;
            
            private BooleanAPColumnDef _isConfirm;
            
            private GuidAPColumnDef _parentId;
            
            public PaymentsTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected PaymentsTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// PayId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef PayId {
                get {
                    if (Object.ReferenceEquals(_payId, null)) {
                        _payId = new GuidAPColumnDef(this, "ID", false);
                        _payId.Display = "ID";
                    }
                    return _payId;
                }
            }
            
            /// <summary>
            /// PayName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef PayName {
                get {
                    if (Object.ReferenceEquals(_payName, null)) {
                        _payName = new StringAPColumnDef(this, "PayName", false, 100);
                        _payName.Display = "款项名称";
                    }
                    return _payName;
                }
            }
            
            /// <summary>
            /// ProjectId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ProjectId {
                get {
                    if (Object.ReferenceEquals(_projectId, null)) {
                        _projectId = new GuidAPColumnDef(this, "ProjectId", true);
                        _projectId.Display = "ProjectId";
                    }
                    return _projectId;
                }
            }
            
            /// <summary>
            /// Money ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Money {
                get {
                    if (Object.ReferenceEquals(_money, null)) {
                        _money = new DoubleAPColumnDef(this, "Money", false);
                        _money.Display = "总金额";
                    }
                    return _money;
                }
            }
            
            /// <summary>
            /// RateOfProgress ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef RateOfProgress {
                get {
                    if (Object.ReferenceEquals(_rateOfProgress, null)) {
                        _rateOfProgress = new DoubleAPColumnDef(this, "Progress", false);
                        _rateOfProgress.Display = "付款进度";
                    }
                    return _rateOfProgress;
                }
            }
            
            /// <summary>
            /// InvoiceDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef InvoiceDate {
                get {
                    if (Object.ReferenceEquals(_invoiceDate, null)) {
                        _invoiceDate = new DateTimeAPColumnDef(this, "InvoiceDate", true);
                        _invoiceDate.Display = "开始时间";
                    }
                    return _invoiceDate;
                }
            }
            
            /// <summary>
            /// PayDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef PayDate {
                get {
                    if (Object.ReferenceEquals(_payDate, null)) {
                        _payDate = new DateTimeAPColumnDef(this, "PayDate", true);
                        _payDate.Display = "结束时间";
                    }
                    return _payDate;
                }
            }
            
            /// <summary>
            /// PayType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef PayType {
                get {
                    if (Object.ReferenceEquals(_payType, null)) {
                        _payType = new GuidAPColumnDef(this, "PayType", false);
                        _payType.Display = "付款类型";
                    }
                    return _payType;
                }
            }
            
            /// <summary>
            /// ResourceId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ResourceId {
                get {
                    if (Object.ReferenceEquals(_resourceId, null)) {
                        _resourceId = new GuidAPColumnDef(this, "ResourceId", false);
                        _resourceId.Display = "ResourceId";
                    }
                    return _resourceId;
                }
            }
            
            /// <summary>
            /// Sort ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Sort {
                get {
                    if (Object.ReferenceEquals(_sort, null)) {
                        _sort = new DoubleAPColumnDef(this, "Sort", true);
                        _sort.Display = "Sort";
                    }
                    return _sort;
                }
            }
            
            /// <summary>
            /// IsConfirm ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsConfirm {
                get {
                    if (Object.ReferenceEquals(_isConfirm, null)) {
                        _isConfirm = new BooleanAPColumnDef(this, "IsConfirm", false);
                        _isConfirm.Display = "IsConfirm";
                    }
                    return _isConfirm;
                }
            }
            
            /// <summary>
            /// ParentId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ParentId {
                get {
                    if (Object.ReferenceEquals(_parentId, null)) {
                        _parentId = new GuidAPColumnDef(this, "ParentId", true);
                        _parentId.Display = "ParentId";
                    }
                    return _parentId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual PaymentsTableDef As(string name) {
                return new PaymentsTableDef("Payments", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Payments data, bool throwIfValidColumnName) {
                data.PayId = PayId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.PayName = PayName.GetValue<string>(reader, throwIfValidColumnName);
                data.ProjectId = ProjectId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Money = Money.GetValue<double>(reader, throwIfValidColumnName, 0);
                data.RateOfProgress = RateOfProgress.GetValue<double>(reader, throwIfValidColumnName, 0);
                data.InvoiceDate = InvoiceDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.PayDate = PayDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.PayType = PayType.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ResourceId = ResourceId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Sort = Sort.GetValue<double>(reader, throwIfValidColumnName);
                data.IsConfirm = IsConfirm.GetValue<bool>(reader, throwIfValidColumnName);
                data.ParentId = ParentId.GetValue<System.Guid>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Payments Map(IDataReader reader) {
                Payments data = new Payments();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Payments TolerantMap(IDataReader reader) {
                Payments data = new Payments();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Payments> MapList(IDataReader reader) {
                List<Payments> list = new List<Payments>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Payments> TolerantMapList(IDataReader reader) {
                List<Payments> list = new List<Payments>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class MileStoneTableDef : APTableDef {
            
            private GuidAPColumnDef _stoneId;
            
            private StringAPColumnDef _stoneName;
            
            private GuidAPColumnDef _stoneStatus;
            
            private GuidAPColumnDef _stoneType;
            
            private DoubleAPColumnDef _sort;
            
            public MileStoneTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected MileStoneTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// StoneId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef StoneId {
                get {
                    if (Object.ReferenceEquals(_stoneId, null)) {
                        _stoneId = new GuidAPColumnDef(this, "ID", false);
                        _stoneId.Display = "ID";
                    }
                    return _stoneId;
                }
            }
            
            /// <summary>
            /// StoneName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef StoneName {
                get {
                    if (Object.ReferenceEquals(_stoneName, null)) {
                        _stoneName = new StringAPColumnDef(this, "StoneName", false, 100);
                        _stoneName.Display = "节点名称";
                    }
                    return _stoneName;
                }
            }
            
            /// <summary>
            /// StoneStatus ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef StoneStatus {
                get {
                    if (Object.ReferenceEquals(_stoneStatus, null)) {
                        _stoneStatus = new GuidAPColumnDef(this, "StoneStatus", false);
                        _stoneStatus.Display = "节点状态";
                    }
                    return _stoneStatus;
                }
            }
            
            /// <summary>
            /// StoneType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef StoneType {
                get {
                    if (Object.ReferenceEquals(_stoneType, null)) {
                        _stoneType = new GuidAPColumnDef(this, "StoneType", false);
                        _stoneType.Display = "节点类型";
                    }
                    return _stoneType;
                }
            }
            
            /// <summary>
            /// Sort ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Sort {
                get {
                    if (Object.ReferenceEquals(_sort, null)) {
                        _sort = new DoubleAPColumnDef(this, "Sort", true);
                        _sort.Display = "Sort";
                    }
                    return _sort;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual MileStoneTableDef As(string name) {
                return new MileStoneTableDef("MileStone", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, MileStone data, bool throwIfValidColumnName) {
                data.StoneId = StoneId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.StoneName = StoneName.GetValue<string>(reader, throwIfValidColumnName);
                data.StoneStatus = StoneStatus.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.StoneType = StoneType.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Sort = Sort.GetValue<double>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual MileStone Map(IDataReader reader) {
                MileStone data = new MileStone();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual MileStone TolerantMap(IDataReader reader) {
                MileStone data = new MileStone();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<MileStone> MapList(IDataReader reader) {
                List<MileStone> list = new List<MileStone>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<MileStone> TolerantMapList(IDataReader reader) {
                List<MileStone> list = new List<MileStone>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class ProjectMileStoneTableDef : APTableDef {
            
            private GuidAPColumnDef _pmsId;
            
            private GuidAPColumnDef _stoneId;
            
            private GuidAPColumnDef _projectid;
            
            private GuidAPColumnDef _folderId;
            
            private StringAPColumnDef _content;
            
            private DateTimeAPColumnDef _startDate;
            
            private DateTimeAPColumnDef _endDate;
            
            private GuidAPColumnDef _status;
            
            private DateTimeAPColumnDef _createDate;
            
            public ProjectMileStoneTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected ProjectMileStoneTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// PmsId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef PmsId {
                get {
                    if (Object.ReferenceEquals(_pmsId, null)) {
                        _pmsId = new GuidAPColumnDef(this, "ID", false);
                        _pmsId.Display = "ID";
                    }
                    return _pmsId;
                }
            }
            
            /// <summary>
            /// StoneId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef StoneId {
                get {
                    if (Object.ReferenceEquals(_stoneId, null)) {
                        _stoneId = new GuidAPColumnDef(this, "StoneId", false);
                        _stoneId.Display = "节点ID";
                    }
                    return _stoneId;
                }
            }
            
            /// <summary>
            /// Projectid ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef Projectid {
                get {
                    if (Object.ReferenceEquals(_projectid, null)) {
                        _projectid = new GuidAPColumnDef(this, "Projectid", true);
                        _projectid.Display = "Projectid";
                    }
                    return _projectid;
                }
            }
            
            /// <summary>
            /// FolderId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef FolderId {
                get {
                    if (Object.ReferenceEquals(_folderId, null)) {
                        _folderId = new GuidAPColumnDef(this, "FolderId", false);
                        _folderId.Display = "FolderId";
                    }
                    return _folderId;
                }
            }
            
            /// <summary>
            /// Content ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Content {
                get {
                    if (Object.ReferenceEquals(_content, null)) {
                        _content = new StringAPColumnDef(this, "Description", true, 2000);
                        _content.Display = "内容";
                    }
                    return _content;
                }
            }
            
            /// <summary>
            /// StartDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef StartDate {
                get {
                    if (Object.ReferenceEquals(_startDate, null)) {
                        _startDate = new DateTimeAPColumnDef(this, "StartDate", true);
                        _startDate.Display = "开始时间";
                    }
                    return _startDate;
                }
            }
            
            /// <summary>
            /// EndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef EndDate {
                get {
                    if (Object.ReferenceEquals(_endDate, null)) {
                        _endDate = new DateTimeAPColumnDef(this, "EndDate", true);
                        _endDate.Display = "结束时间";
                    }
                    return _endDate;
                }
            }
            
            /// <summary>
            /// Status ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef Status {
                get {
                    if (Object.ReferenceEquals(_status, null)) {
                        _status = new GuidAPColumnDef(this, "Status", false);
                        _status.Display = "当前项目里程碑状态";
                    }
                    return _status;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual ProjectMileStoneTableDef As(string name) {
                return new ProjectMileStoneTableDef("ProjectMileStone", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, ProjectMileStone data, bool throwIfValidColumnName) {
                data.PmsId = PmsId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.StoneId = StoneId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Projectid = Projectid.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.FolderId = FolderId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Content = Content.GetValue<string>(reader, throwIfValidColumnName);
                data.StartDate = StartDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
                data.EndDate = EndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Status = Status.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ProjectMileStone Map(IDataReader reader) {
                ProjectMileStone data = new ProjectMileStone();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ProjectMileStone TolerantMap(IDataReader reader) {
                ProjectMileStone data = new ProjectMileStone();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ProjectMileStone> MapList(IDataReader reader) {
                List<ProjectMileStone> list = new List<ProjectMileStone>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ProjectMileStone> TolerantMapList(IDataReader reader) {
                List<ProjectMileStone> list = new List<ProjectMileStone>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class ProjectStoneTaskTableDef : APTableDef {
            
            private GuidAPColumnDef _pstId;
            
            private GuidAPColumnDef _pmsId;
            
            private GuidAPColumnDef _projectId;
            
            private StringAPColumnDef _taskName;
            
            private DateTimeAPColumnDef _startDate;
            
            private DateTimeAPColumnDef _endDate;
            
            private DateTimeAPColumnDef _realStartDate;
            
            private DateTimeAPColumnDef _realEndDate;
            
            private GuidAPColumnDef _taskStatus;
            
            private DateTimeAPColumnDef _createDate;
            
            private GuidAPColumnDef _taskType;
            
            private GuidAPColumnDef _managerId;
            
            private GuidAPColumnDef _reviewerID;
            
            private DoubleAPColumnDef _sortId;
            
            private DateTimeAPColumnDef _upgradeEndDate;
            
            public ProjectStoneTaskTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected ProjectStoneTaskTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// PstId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef PstId {
                get {
                    if (Object.ReferenceEquals(_pstId, null)) {
                        _pstId = new GuidAPColumnDef(this, "ID", false);
                        _pstId.Display = "ID";
                    }
                    return _pstId;
                }
            }
            
            /// <summary>
            /// PmsId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef PmsId {
                get {
                    if (Object.ReferenceEquals(_pmsId, null)) {
                        _pmsId = new GuidAPColumnDef(this, "PmsId", false);
                        _pmsId.Display = "PmsId";
                    }
                    return _pmsId;
                }
            }
            
            /// <summary>
            /// ProjectId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ProjectId {
                get {
                    if (Object.ReferenceEquals(_projectId, null)) {
                        _projectId = new GuidAPColumnDef(this, "ProjectId", false);
                        _projectId.Display = "ProjectId";
                    }
                    return _projectId;
                }
            }
            
            /// <summary>
            /// TaskName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef TaskName {
                get {
                    if (Object.ReferenceEquals(_taskName, null)) {
                        _taskName = new StringAPColumnDef(this, "Name", false, 200);
                        _taskName.Display = "任务名称";
                        _taskName.Required = true;
                    }
                    return _taskName;
                }
            }
            
            /// <summary>
            /// StartDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef StartDate {
                get {
                    if (Object.ReferenceEquals(_startDate, null)) {
                        _startDate = new DateTimeAPColumnDef(this, "StartDate", true);
                        _startDate.Display = "开始时间";
                    }
                    return _startDate;
                }
            }
            
            /// <summary>
            /// EndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef EndDate {
                get {
                    if (Object.ReferenceEquals(_endDate, null)) {
                        _endDate = new DateTimeAPColumnDef(this, "EndDate", true);
                        _endDate.Display = "结束时间";
                    }
                    return _endDate;
                }
            }
            
            /// <summary>
            /// RealStartDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef RealStartDate {
                get {
                    if (Object.ReferenceEquals(_realStartDate, null)) {
                        _realStartDate = new DateTimeAPColumnDef(this, "RealStartDate", true);
                        _realStartDate.Display = "实际开始时间";
                    }
                    return _realStartDate;
                }
            }
            
            /// <summary>
            /// RealEndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef RealEndDate {
                get {
                    if (Object.ReferenceEquals(_realEndDate, null)) {
                        _realEndDate = new DateTimeAPColumnDef(this, "RealEndDate", true);
                        _realEndDate.Display = "实际结束时间";
                    }
                    return _realEndDate;
                }
            }
            
            /// <summary>
            /// TaskStatus ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskStatus {
                get {
                    if (Object.ReferenceEquals(_taskStatus, null)) {
                        _taskStatus = new GuidAPColumnDef(this, "Status", true);
                        _taskStatus.Display = "任务状态";
                    }
                    return _taskStatus;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// TaskType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskType {
                get {
                    if (Object.ReferenceEquals(_taskType, null)) {
                        _taskType = new GuidAPColumnDef(this, "Type", true);
                        _taskType.Display = "任务类型";
                    }
                    return _taskType;
                }
            }
            
            /// <summary>
            /// ManagerId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ManagerId {
                get {
                    if (Object.ReferenceEquals(_managerId, null)) {
                        _managerId = new GuidAPColumnDef(this, "ManagerId", true);
                        _managerId.Display = "任务负责人ID";
                    }
                    return _managerId;
                }
            }
            
            /// <summary>
            /// ReviewerID ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ReviewerID {
                get {
                    if (Object.ReferenceEquals(_reviewerID, null)) {
                        _reviewerID = new GuidAPColumnDef(this, "ReviewerId", true);
                        _reviewerID.Display = "任务审核者ID";
                    }
                    return _reviewerID;
                }
            }
            
            /// <summary>
            /// SortId ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef SortId {
                get {
                    if (Object.ReferenceEquals(_sortId, null)) {
                        _sortId = new DoubleAPColumnDef(this, "SortId", true);
                        _sortId.Display = "SortId";
                    }
                    return _sortId;
                }
            }
            
            /// <summary>
            /// UpgradeEndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef UpgradeEndDate {
                get {
                    if (Object.ReferenceEquals(_upgradeEndDate, null)) {
                        _upgradeEndDate = new DateTimeAPColumnDef(this, "UpgradeEndDate", true);
                        _upgradeEndDate.Display = "变更结束时间";
                    }
                    return _upgradeEndDate;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual ProjectStoneTaskTableDef As(string name) {
                return new ProjectStoneTaskTableDef("ProjectStoneTask", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, ProjectStoneTask data, bool throwIfValidColumnName) {
                data.PstId = PstId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.PmsId = PmsId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ProjectId = ProjectId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TaskName = TaskName.GetValue<string>(reader, throwIfValidColumnName);
                data.StartDate = StartDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
                data.EndDate = EndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.RealStartDate = RealStartDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.RealEndDate = RealEndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.TaskStatus = TaskStatus.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
                data.TaskType = TaskType.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ManagerId = ManagerId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ReviewerID = ReviewerID.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.SortId = SortId.GetValue<double>(reader, throwIfValidColumnName);
                data.UpgradeEndDate = UpgradeEndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ProjectStoneTask Map(IDataReader reader) {
                ProjectStoneTask data = new ProjectStoneTask();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ProjectStoneTask TolerantMap(IDataReader reader) {
                ProjectStoneTask data = new ProjectStoneTask();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ProjectStoneTask> MapList(IDataReader reader) {
                List<ProjectStoneTask> list = new List<ProjectStoneTask>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ProjectStoneTask> TolerantMapList(IDataReader reader) {
                List<ProjectStoneTask> list = new List<ProjectStoneTask>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class WorkTaskTableDef : APTableDef {
            
            private GuidAPColumnDef _taskId;
            
            private GuidAPColumnDef _projectid;
            
            private StringAPColumnDef _taskName;
            
            private StringAPColumnDef _description;
            
            private GuidAPColumnDef _taskType;
            
            private Int32APColumnDef _taskLevel;
            
            private GuidAPColumnDef _taskStatus;
            
            private DoubleAPColumnDef _rateOfProgress;
            
            private GuidAPColumnDef _parentId;
            
            private DoubleAPColumnDef _workHours;
            
            private DoubleAPColumnDef _estimateWorkHours;
            
            private GuidAPColumnDef _managerId;
            
            private GuidAPColumnDef _creatorId;
            
            private GuidAPColumnDef _reviewerID;
            
            private DateTimeAPColumnDef _startDate;
            
            private DateTimeAPColumnDef _endDate;
            
            private DateTimeAPColumnDef _realStartDate;
            
            private DateTimeAPColumnDef _realEndDate;
            
            private DateTimeAPColumnDef _createDate;
            
            private DateTimeAPColumnDef _modifyDate;
            
            private Int32APColumnDef _sortId;
            
            private BooleanAPColumnDef _isParent;
            
            private GuidAPColumnDef _taskFileType;
            
            private Int32APColumnDef _serviceCount;
            
            private GuidAPColumnDef _standardItemId;
            
            private GuidAPColumnDef _subTypeId;
            
            private DoubleAPColumnDef _subTypeValue;
            
            public WorkTaskTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected WorkTaskTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// TaskId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskId {
                get {
                    if (Object.ReferenceEquals(_taskId, null)) {
                        _taskId = new GuidAPColumnDef(this, "ID", false);
                        _taskId.Display = "任务ID";
                    }
                    return _taskId;
                }
            }
            
            /// <summary>
            /// Projectid ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef Projectid {
                get {
                    if (Object.ReferenceEquals(_projectid, null)) {
                        _projectid = new GuidAPColumnDef(this, "ProjectId", false);
                        _projectid.Display = "项目ID";
                    }
                    return _projectid;
                }
            }
            
            /// <summary>
            /// TaskName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef TaskName {
                get {
                    if (Object.ReferenceEquals(_taskName, null)) {
                        _taskName = new StringAPColumnDef(this, "Name", false, 200);
                        _taskName.Display = "任务名称";
                        _taskName.Required = true;
                    }
                    return _taskName;
                }
            }
            
            /// <summary>
            /// Description ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Description {
                get {
                    if (Object.ReferenceEquals(_description, null)) {
                        _description = new StringAPColumnDef(this, "Description", true, 1000);
                        _description.Display = "任务描述";
                    }
                    return _description;
                }
            }
            
            /// <summary>
            /// TaskType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskType {
                get {
                    if (Object.ReferenceEquals(_taskType, null)) {
                        _taskType = new GuidAPColumnDef(this, "Type", true);
                        _taskType.Display = "任务类型";
                    }
                    return _taskType;
                }
            }
            
            /// <summary>
            /// TaskLevel ColumnDef
            /// </summary>
            public virtual Int32APColumnDef TaskLevel {
                get {
                    if (Object.ReferenceEquals(_taskLevel, null)) {
                        _taskLevel = new Int32APColumnDef(this, "Level", true);
                        _taskLevel.Display = "任务级别";
                    }
                    return _taskLevel;
                }
            }
            
            /// <summary>
            /// TaskStatus ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskStatus {
                get {
                    if (Object.ReferenceEquals(_taskStatus, null)) {
                        _taskStatus = new GuidAPColumnDef(this, "Status", true);
                        _taskStatus.Display = "任务状态";
                    }
                    return _taskStatus;
                }
            }
            
            /// <summary>
            /// RateOfProgress ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef RateOfProgress {
                get {
                    if (Object.ReferenceEquals(_rateOfProgress, null)) {
                        _rateOfProgress = new DoubleAPColumnDef(this, "Progress", false);
                        _rateOfProgress.Display = "任务进度";
                    }
                    return _rateOfProgress;
                }
            }
            
            /// <summary>
            /// ParentId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ParentId {
                get {
                    if (Object.ReferenceEquals(_parentId, null)) {
                        _parentId = new GuidAPColumnDef(this, "ParentId", true);
                        _parentId.Display = "父任务ID";
                    }
                    return _parentId;
                }
            }
            
            /// <summary>
            /// WorkHours ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef WorkHours {
                get {
                    if (Object.ReferenceEquals(_workHours, null)) {
                        _workHours = new DoubleAPColumnDef(this, "WorkHours", true);
                        _workHours.Display = "已用工时";
                    }
                    return _workHours;
                }
            }
            
            /// <summary>
            /// EstimateWorkHours ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef EstimateWorkHours {
                get {
                    if (Object.ReferenceEquals(_estimateWorkHours, null)) {
                        _estimateWorkHours = new DoubleAPColumnDef(this, "EstimateWorkHours", true);
                        _estimateWorkHours.Display = "预计工时";
                    }
                    return _estimateWorkHours;
                }
            }
            
            /// <summary>
            /// ManagerId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ManagerId {
                get {
                    if (Object.ReferenceEquals(_managerId, null)) {
                        _managerId = new GuidAPColumnDef(this, "ManagerId", true);
                        _managerId.Display = "任务负责人ID";
                    }
                    return _managerId;
                }
            }
            
            /// <summary>
            /// CreatorId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef CreatorId {
                get {
                    if (Object.ReferenceEquals(_creatorId, null)) {
                        _creatorId = new GuidAPColumnDef(this, "CreatorId", true);
                        _creatorId.Display = "任务创建者ID";
                    }
                    return _creatorId;
                }
            }
            
            /// <summary>
            /// ReviewerID ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ReviewerID {
                get {
                    if (Object.ReferenceEquals(_reviewerID, null)) {
                        _reviewerID = new GuidAPColumnDef(this, "ReviewerId", true);
                        _reviewerID.Display = "任务审核者ID";
                    }
                    return _reviewerID;
                }
            }
            
            /// <summary>
            /// StartDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef StartDate {
                get {
                    if (Object.ReferenceEquals(_startDate, null)) {
                        _startDate = new DateTimeAPColumnDef(this, "StartDate", true);
                        _startDate.Display = "开始时间";
                    }
                    return _startDate;
                }
            }
            
            /// <summary>
            /// EndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef EndDate {
                get {
                    if (Object.ReferenceEquals(_endDate, null)) {
                        _endDate = new DateTimeAPColumnDef(this, "EndDate", true);
                        _endDate.Display = "结束时间";
                    }
                    return _endDate;
                }
            }
            
            /// <summary>
            /// RealStartDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef RealStartDate {
                get {
                    if (Object.ReferenceEquals(_realStartDate, null)) {
                        _realStartDate = new DateTimeAPColumnDef(this, "RealStartDate", true);
                        _realStartDate.Display = "实际开始时间";
                    }
                    return _realStartDate;
                }
            }
            
            /// <summary>
            /// RealEndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef RealEndDate {
                get {
                    if (Object.ReferenceEquals(_realEndDate, null)) {
                        _realEndDate = new DateTimeAPColumnDef(this, "RealEndDate", true);
                        _realEndDate.Display = "实际结束时间";
                    }
                    return _realEndDate;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "最近修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// SortId ColumnDef
            /// </summary>
            public virtual Int32APColumnDef SortId {
                get {
                    if (Object.ReferenceEquals(_sortId, null)) {
                        _sortId = new Int32APColumnDef(this, "SortId", true);
                        _sortId.Display = "SortId";
                    }
                    return _sortId;
                }
            }
            
            /// <summary>
            /// IsParent ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsParent {
                get {
                    if (Object.ReferenceEquals(_isParent, null)) {
                        _isParent = new BooleanAPColumnDef(this, "IsParent", false);
                        _isParent.Display = "IsParent";
                    }
                    return _isParent;
                }
            }
            
            /// <summary>
            /// TaskFileType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskFileType {
                get {
                    if (Object.ReferenceEquals(_taskFileType, null)) {
                        _taskFileType = new GuidAPColumnDef(this, "FileType", true);
                        _taskFileType.Display = "文档类型";
                    }
                    return _taskFileType;
                }
            }
            
            /// <summary>
            /// ServiceCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef ServiceCount {
                get {
                    if (Object.ReferenceEquals(_serviceCount, null)) {
                        _serviceCount = new Int32APColumnDef(this, "ServiceCount", true);
                        _serviceCount.Display = "运维数量";
                    }
                    return _serviceCount;
                }
            }
            
            /// <summary>
            /// StandardItemId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef StandardItemId {
                get {
                    if (Object.ReferenceEquals(_standardItemId, null)) {
                        _standardItemId = new GuidAPColumnDef(this, "StandardItemId", true);
                        _standardItemId.Display = "标准复杂度";
                    }
                    return _standardItemId;
                }
            }
            
            /// <summary>
            /// SubTypeId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef SubTypeId {
                get {
                    if (Object.ReferenceEquals(_subTypeId, null)) {
                        _subTypeId = new GuidAPColumnDef(this, "SubTypeId", true);
                        _subTypeId.Display = "子类型";
                    }
                    return _subTypeId;
                }
            }
            
            /// <summary>
            /// SubTypeValue ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef SubTypeValue {
                get {
                    if (Object.ReferenceEquals(_subTypeValue, null)) {
                        _subTypeValue = new DoubleAPColumnDef(this, "SubTypeValue", true);
                        _subTypeValue.Display = "任务子类型值";
                    }
                    return _subTypeValue;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual WorkTaskTableDef As(string name) {
                return new WorkTaskTableDef("WorkTask", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, WorkTask data, bool throwIfValidColumnName) {
                data.TaskId = TaskId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Projectid = Projectid.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TaskName = TaskName.GetValue<string>(reader, throwIfValidColumnName);
                data.Description = Description.GetValue<string>(reader, throwIfValidColumnName);
                data.TaskType = TaskType.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TaskLevel = TaskLevel.GetValue<int>(reader, throwIfValidColumnName, 1);
                data.TaskStatus = TaskStatus.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.RateOfProgress = RateOfProgress.GetValue<double>(reader, throwIfValidColumnName, 0);
                data.ParentId = ParentId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.WorkHours = WorkHours.GetValue<double>(reader, throwIfValidColumnName);
                data.EstimateWorkHours = EstimateWorkHours.GetValue<double>(reader, throwIfValidColumnName);
                data.ManagerId = ManagerId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.CreatorId = CreatorId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ReviewerID = ReviewerID.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.StartDate = StartDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
                data.EndDate = EndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
                data.RealStartDate = RealStartDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.RealEndDate = RealEndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
                data.ModifyDate = ModifyDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.SortId = SortId.GetValue<int>(reader, throwIfValidColumnName);
                data.IsParent = IsParent.GetValue<bool>(reader, throwIfValidColumnName);
                data.TaskFileType = TaskFileType.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ServiceCount = ServiceCount.GetValue<int>(reader, throwIfValidColumnName);
                data.StandardItemId = StandardItemId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.SubTypeId = SubTypeId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.SubTypeValue = SubTypeValue.GetValue<double>(reader, throwIfValidColumnName, 0);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WorkTask Map(IDataReader reader) {
                WorkTask data = new WorkTask();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WorkTask TolerantMap(IDataReader reader) {
                WorkTask data = new WorkTask();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WorkTask> MapList(IDataReader reader) {
                List<WorkTask> list = new List<WorkTask>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WorkTask> TolerantMapList(IDataReader reader) {
                List<WorkTask> list = new List<WorkTask>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class WorkTaskLogTableDef : APTableDef {
            
            private GuidAPColumnDef _logID;
            
            private GuidAPColumnDef _taskManagerId;
            
            private GuidAPColumnDef _projectId;
            
            private GuidAPColumnDef _taskId;
            
            private DateTimeAPColumnDef _startDate;
            
            private DateTimeAPColumnDef _endDate;
            
            private DateTimeAPColumnDef _createDate;
            
            private DoubleAPColumnDef _estimateWorkHours;
            
            private GuidAPColumnDef _taskType;
            
            private GuidAPColumnDef _taskStatus;
            
            private DoubleAPColumnDef _rateOfProgress;
            
            private GuidAPColumnDef _parentId;
            
            private DoubleAPColumnDef _workHours;
            
            private GuidAPColumnDef _reviewerID;
            
            private GuidAPColumnDef _operatorId;
            
            private StringAPColumnDef _taskName;
            
            private Int32APColumnDef _serviceCount;
            
            public WorkTaskLogTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected WorkTaskLogTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// LogID ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef LogID {
                get {
                    if (Object.ReferenceEquals(_logID, null)) {
                        _logID = new GuidAPColumnDef(this, "ID", false);
                        _logID.Display = "计划ID";
                    }
                    return _logID;
                }
            }
            
            /// <summary>
            /// TaskManagerId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskManagerId {
                get {
                    if (Object.ReferenceEquals(_taskManagerId, null)) {
                        _taskManagerId = new GuidAPColumnDef(this, "ManagerId", true);
                        _taskManagerId.Display = "任务负责人ID";
                    }
                    return _taskManagerId;
                }
            }
            
            /// <summary>
            /// ProjectId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ProjectId {
                get {
                    if (Object.ReferenceEquals(_projectId, null)) {
                        _projectId = new GuidAPColumnDef(this, "ProjectId", true);
                        _projectId.Display = "项目ID";
                    }
                    return _projectId;
                }
            }
            
            /// <summary>
            /// TaskId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskId {
                get {
                    if (Object.ReferenceEquals(_taskId, null)) {
                        _taskId = new GuidAPColumnDef(this, "TaskId", true);
                        _taskId.Display = "任务ID";
                    }
                    return _taskId;
                }
            }
            
            /// <summary>
            /// StartDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef StartDate {
                get {
                    if (Object.ReferenceEquals(_startDate, null)) {
                        _startDate = new DateTimeAPColumnDef(this, "StartDate", true);
                        _startDate.Display = "开始时间";
                    }
                    return _startDate;
                }
            }
            
            /// <summary>
            /// EndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef EndDate {
                get {
                    if (Object.ReferenceEquals(_endDate, null)) {
                        _endDate = new DateTimeAPColumnDef(this, "EndDate", true);
                        _endDate.Display = "结束时间";
                    }
                    return _endDate;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", true);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// EstimateWorkHours ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef EstimateWorkHours {
                get {
                    if (Object.ReferenceEquals(_estimateWorkHours, null)) {
                        _estimateWorkHours = new DoubleAPColumnDef(this, "EstimateWorkHours", true);
                        _estimateWorkHours.Display = "计划工时";
                    }
                    return _estimateWorkHours;
                }
            }
            
            /// <summary>
            /// TaskType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskType {
                get {
                    if (Object.ReferenceEquals(_taskType, null)) {
                        _taskType = new GuidAPColumnDef(this, "TaskType", true);
                        _taskType.Display = "任务类型";
                    }
                    return _taskType;
                }
            }
            
            /// <summary>
            /// TaskStatus ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskStatus {
                get {
                    if (Object.ReferenceEquals(_taskStatus, null)) {
                        _taskStatus = new GuidAPColumnDef(this, "TaskStatus", true);
                        _taskStatus.Display = "任务状态";
                    }
                    return _taskStatus;
                }
            }
            
            /// <summary>
            /// RateOfProgress ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef RateOfProgress {
                get {
                    if (Object.ReferenceEquals(_rateOfProgress, null)) {
                        _rateOfProgress = new DoubleAPColumnDef(this, "RateOfProgress", false);
                        _rateOfProgress.Display = "任务进度";
                    }
                    return _rateOfProgress;
                }
            }
            
            /// <summary>
            /// ParentId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ParentId {
                get {
                    if (Object.ReferenceEquals(_parentId, null)) {
                        _parentId = new GuidAPColumnDef(this, "ParentId", true);
                        _parentId.Display = "父任务ID";
                    }
                    return _parentId;
                }
            }
            
            /// <summary>
            /// WorkHours ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef WorkHours {
                get {
                    if (Object.ReferenceEquals(_workHours, null)) {
                        _workHours = new DoubleAPColumnDef(this, "WorkHours", true);
                        _workHours.Display = "已用工时";
                    }
                    return _workHours;
                }
            }
            
            /// <summary>
            /// ReviewerID ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ReviewerID {
                get {
                    if (Object.ReferenceEquals(_reviewerID, null)) {
                        _reviewerID = new GuidAPColumnDef(this, "ReviewerId", true);
                        _reviewerID.Display = "任务审核者ID";
                    }
                    return _reviewerID;
                }
            }
            
            /// <summary>
            /// OperatorId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef OperatorId {
                get {
                    if (Object.ReferenceEquals(_operatorId, null)) {
                        _operatorId = new GuidAPColumnDef(this, "OperatorId", true);
                        _operatorId.Display = "操作者ID";
                    }
                    return _operatorId;
                }
            }
            
            /// <summary>
            /// TaskName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef TaskName {
                get {
                    if (Object.ReferenceEquals(_taskName, null)) {
                        _taskName = new StringAPColumnDef(this, "TaskName", false, 100);
                        _taskName.Display = "任务名称";
                    }
                    return _taskName;
                }
            }
            
            /// <summary>
            /// ServiceCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef ServiceCount {
                get {
                    if (Object.ReferenceEquals(_serviceCount, null)) {
                        _serviceCount = new Int32APColumnDef(this, "ServiceCount", true);
                        _serviceCount.Display = "运维数量";
                    }
                    return _serviceCount;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual WorkTaskLogTableDef As(string name) {
                return new WorkTaskLogTableDef("WorkTaskLog", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, WorkTaskLog data, bool throwIfValidColumnName) {
                data.LogID = LogID.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TaskManagerId = TaskManagerId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ProjectId = ProjectId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TaskId = TaskId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.StartDate = StartDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.EndDate = EndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
                data.EstimateWorkHours = EstimateWorkHours.GetValue<double>(reader, throwIfValidColumnName);
                data.TaskType = TaskType.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TaskStatus = TaskStatus.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.RateOfProgress = RateOfProgress.GetValue<double>(reader, throwIfValidColumnName, 0);
                data.ParentId = ParentId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.WorkHours = WorkHours.GetValue<double>(reader, throwIfValidColumnName);
                data.ReviewerID = ReviewerID.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.OperatorId = OperatorId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TaskName = TaskName.GetValue<string>(reader, throwIfValidColumnName);
                data.ServiceCount = ServiceCount.GetValue<int>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WorkTaskLog Map(IDataReader reader) {
                WorkTaskLog data = new WorkTaskLog();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WorkTaskLog TolerantMap(IDataReader reader) {
                WorkTaskLog data = new WorkTaskLog();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WorkTaskLog> MapList(IDataReader reader) {
                List<WorkTaskLog> list = new List<WorkTaskLog>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WorkTaskLog> TolerantMapList(IDataReader reader) {
                List<WorkTaskLog> list = new List<WorkTaskLog>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class WorkTaskComplextiyTableDef : APTableDef {
            
            private GuidAPColumnDef _complextiyId;
            
            private GuidAPColumnDef _taskId;
            
            private DoubleAPColumnDef _complexity;
            
            private GuidAPColumnDef _creatorId;
            
            private GuidAPColumnDef _creatorRoleId;
            
            private DateTimeAPColumnDef _createDate;
            
            private DateTimeAPColumnDef _modifyDate;
            
            public WorkTaskComplextiyTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected WorkTaskComplextiyTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ComplextiyId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ComplextiyId {
                get {
                    if (Object.ReferenceEquals(_complextiyId, null)) {
                        _complextiyId = new GuidAPColumnDef(this, "ID", false);
                        _complextiyId.Display = "任务复杂度ID";
                    }
                    return _complextiyId;
                }
            }
            
            /// <summary>
            /// TaskId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskId {
                get {
                    if (Object.ReferenceEquals(_taskId, null)) {
                        _taskId = new GuidAPColumnDef(this, "TaskId", false);
                        _taskId.Display = "任务ID";
                    }
                    return _taskId;
                }
            }
            
            /// <summary>
            /// Complexity ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Complexity {
                get {
                    if (Object.ReferenceEquals(_complexity, null)) {
                        _complexity = new DoubleAPColumnDef(this, "Complexity", true);
                        _complexity.Display = "任务复杂度";
                    }
                    return _complexity;
                }
            }
            
            /// <summary>
            /// CreatorId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef CreatorId {
                get {
                    if (Object.ReferenceEquals(_creatorId, null)) {
                        _creatorId = new GuidAPColumnDef(this, "CreatorId", true);
                        _creatorId.Display = "复杂度设定者ID";
                    }
                    return _creatorId;
                }
            }
            
            /// <summary>
            /// CreatorRoleId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef CreatorRoleId {
                get {
                    if (Object.ReferenceEquals(_creatorRoleId, null)) {
                        _creatorRoleId = new GuidAPColumnDef(this, "CreatorRoleId", true);
                        _creatorRoleId.Display = "复杂度设定者角色ID";
                    }
                    return _creatorRoleId;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", true);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "最近修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual WorkTaskComplextiyTableDef As(string name) {
                return new WorkTaskComplextiyTableDef("WorkTaskComplextiy", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, WorkTaskComplextiy data, bool throwIfValidColumnName) {
                data.ComplextiyId = ComplextiyId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TaskId = TaskId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Complexity = Complexity.GetValue<double>(reader, throwIfValidColumnName);
                data.CreatorId = CreatorId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.CreatorRoleId = CreatorRoleId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
                data.ModifyDate = ModifyDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WorkTaskComplextiy Map(IDataReader reader) {
                WorkTaskComplextiy data = new WorkTaskComplextiy();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WorkTaskComplextiy TolerantMap(IDataReader reader) {
                WorkTaskComplextiy data = new WorkTaskComplextiy();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WorkTaskComplextiy> MapList(IDataReader reader) {
                List<WorkTaskComplextiy> list = new List<WorkTaskComplextiy>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WorkTaskComplextiy> TolerantMapList(IDataReader reader) {
                List<WorkTaskComplextiy> list = new List<WorkTaskComplextiy>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class WorkTaskIssueTableDef : APTableDef {
            
            private GuidAPColumnDef _taskIssueId;
            
            private GuidAPColumnDef _taskId;
            
            private GuidAPColumnDef _issueId;
            
            private StringAPColumnDef _description;
            
            private DateTimeAPColumnDef _createDate;
            
            private DateTimeAPColumnDef _modifyDate;
            
            public WorkTaskIssueTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected WorkTaskIssueTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// TaskIssueId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskIssueId {
                get {
                    if (Object.ReferenceEquals(_taskIssueId, null)) {
                        _taskIssueId = new GuidAPColumnDef(this, "ID", false);
                        _taskIssueId.Display = "任务质量ID";
                    }
                    return _taskIssueId;
                }
            }
            
            /// <summary>
            /// TaskId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskId {
                get {
                    if (Object.ReferenceEquals(_taskId, null)) {
                        _taskId = new GuidAPColumnDef(this, "TaskId", false);
                        _taskId.Display = "任务ID";
                    }
                    return _taskId;
                }
            }
            
            /// <summary>
            /// IssueId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef IssueId {
                get {
                    if (Object.ReferenceEquals(_issueId, null)) {
                        _issueId = new GuidAPColumnDef(this, "IssueId", false);
                        _issueId.Display = "问题类型";
                    }
                    return _issueId;
                }
            }
            
            /// <summary>
            /// Description ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Description {
                get {
                    if (Object.ReferenceEquals(_description, null)) {
                        _description = new StringAPColumnDef(this, "Description", false, 1000);
                        _description.Display = "任务质量描述";
                    }
                    return _description;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", true);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "最近修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual WorkTaskIssueTableDef As(string name) {
                return new WorkTaskIssueTableDef("WorkTaskIssue", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, WorkTaskIssue data, bool throwIfValidColumnName) {
                data.TaskIssueId = TaskIssueId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TaskId = TaskId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.IssueId = IssueId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Description = Description.GetValue<string>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
                data.ModifyDate = ModifyDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WorkTaskIssue Map(IDataReader reader) {
                WorkTaskIssue data = new WorkTaskIssue();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WorkTaskIssue TolerantMap(IDataReader reader) {
                WorkTaskIssue data = new WorkTaskIssue();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WorkTaskIssue> MapList(IDataReader reader) {
                List<WorkTaskIssue> list = new List<WorkTaskIssue>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WorkTaskIssue> TolerantMapList(IDataReader reader) {
                List<WorkTaskIssue> list = new List<WorkTaskIssue>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class TaskCompelxtiyRoleTableDef : APTableDef {
            
            private GuidAPColumnDef _compelxtiyRoleId;
            
            private GuidAPColumnDef _roleId;
            
            private DoubleAPColumnDef _propertion;
            
            private BooleanAPColumnDef _isStandard;
            
            public TaskCompelxtiyRoleTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected TaskCompelxtiyRoleTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// CompelxtiyRoleId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef CompelxtiyRoleId {
                get {
                    if (Object.ReferenceEquals(_compelxtiyRoleId, null)) {
                        _compelxtiyRoleId = new GuidAPColumnDef(this, "ID", false);
                        _compelxtiyRoleId.Display = "ID";
                    }
                    return _compelxtiyRoleId;
                }
            }
            
            /// <summary>
            /// RoleId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef RoleId {
                get {
                    if (Object.ReferenceEquals(_roleId, null)) {
                        _roleId = new GuidAPColumnDef(this, "RoleId", true);
                        _roleId.Display = "RoleId";
                    }
                    return _roleId;
                }
            }
            
            /// <summary>
            /// Propertion ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Propertion {
                get {
                    if (Object.ReferenceEquals(_propertion, null)) {
                        _propertion = new DoubleAPColumnDef(this, "Propertion", false);
                        _propertion.Display = "复杂度权重";
                    }
                    return _propertion;
                }
            }
            
            /// <summary>
            /// IsStandard ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsStandard {
                get {
                    if (Object.ReferenceEquals(_isStandard, null)) {
                        _isStandard = new BooleanAPColumnDef(this, "IsStandard", false);
                        _isStandard.Display = "是否是标准复杂度";
                    }
                    return _isStandard;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual TaskCompelxtiyRoleTableDef As(string name) {
                return new TaskCompelxtiyRoleTableDef("TaskCompelxtiyRole", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, TaskCompelxtiyRole data, bool throwIfValidColumnName) {
                data.CompelxtiyRoleId = CompelxtiyRoleId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.RoleId = RoleId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Propertion = Propertion.GetValue<double>(reader, throwIfValidColumnName);
                data.IsStandard = IsStandard.GetValue<bool>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual TaskCompelxtiyRole Map(IDataReader reader) {
                TaskCompelxtiyRole data = new TaskCompelxtiyRole();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual TaskCompelxtiyRole TolerantMap(IDataReader reader) {
                TaskCompelxtiyRole data = new TaskCompelxtiyRole();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<TaskCompelxtiyRole> MapList(IDataReader reader) {
                List<TaskCompelxtiyRole> list = new List<TaskCompelxtiyRole>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<TaskCompelxtiyRole> TolerantMapList(IDataReader reader) {
                List<TaskCompelxtiyRole> list = new List<TaskCompelxtiyRole>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class TaskStandardItemTableDef : APTableDef {
            
            private GuidAPColumnDef _itemId;
            
            private StringAPColumnDef _itemName;
            
            private StringAPColumnDef _itemDescription;
            
            private Int32APColumnDef _standardComplextiy;
            
            private DoubleAPColumnDef _standardWorkhours;
            
            private Int32APColumnDef _sortId;
            
            public TaskStandardItemTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected TaskStandardItemTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ItemId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ItemId {
                get {
                    if (Object.ReferenceEquals(_itemId, null)) {
                        _itemId = new GuidAPColumnDef(this, "ID", false);
                        _itemId.Display = "标准项ID";
                    }
                    return _itemId;
                }
            }
            
            /// <summary>
            /// ItemName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ItemName {
                get {
                    if (Object.ReferenceEquals(_itemName, null)) {
                        _itemName = new StringAPColumnDef(this, "Name", false, 100);
                        _itemName.Display = "标准项名称";
                    }
                    return _itemName;
                }
            }
            
            /// <summary>
            /// ItemDescription ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ItemDescription {
                get {
                    if (Object.ReferenceEquals(_itemDescription, null)) {
                        _itemDescription = new StringAPColumnDef(this, "Description", false, 1000);
                        _itemDescription.Display = "标准项描述";
                    }
                    return _itemDescription;
                }
            }
            
            /// <summary>
            /// StandardComplextiy ColumnDef
            /// </summary>
            public virtual Int32APColumnDef StandardComplextiy {
                get {
                    if (Object.ReferenceEquals(_standardComplextiy, null)) {
                        _standardComplextiy = new Int32APColumnDef(this, "Complextiy", true);
                        _standardComplextiy.Display = "标准复杂度";
                    }
                    return _standardComplextiy;
                }
            }
            
            /// <summary>
            /// StandardWorkhours ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef StandardWorkhours {
                get {
                    if (Object.ReferenceEquals(_standardWorkhours, null)) {
                        _standardWorkhours = new DoubleAPColumnDef(this, "WorkHours", true);
                        _standardWorkhours.Display = "标准工时";
                    }
                    return _standardWorkhours;
                }
            }
            
            /// <summary>
            /// SortId ColumnDef
            /// </summary>
            public virtual Int32APColumnDef SortId {
                get {
                    if (Object.ReferenceEquals(_sortId, null)) {
                        _sortId = new Int32APColumnDef(this, "SortId", true);
                        _sortId.Display = "排序字段";
                    }
                    return _sortId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual TaskStandardItemTableDef As(string name) {
                return new TaskStandardItemTableDef("TaskStandardItem", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, TaskStandardItem data, bool throwIfValidColumnName) {
                data.ItemId = ItemId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ItemName = ItemName.GetValue<string>(reader, throwIfValidColumnName);
                data.ItemDescription = ItemDescription.GetValue<string>(reader, throwIfValidColumnName);
                data.StandardComplextiy = StandardComplextiy.GetValue<int>(reader, throwIfValidColumnName);
                data.StandardWorkhours = StandardWorkhours.GetValue<double>(reader, throwIfValidColumnName);
                data.SortId = SortId.GetValue<int>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual TaskStandardItem Map(IDataReader reader) {
                TaskStandardItem data = new TaskStandardItem();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual TaskStandardItem TolerantMap(IDataReader reader) {
                TaskStandardItem data = new TaskStandardItem();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<TaskStandardItem> MapList(IDataReader reader) {
                List<TaskStandardItem> list = new List<TaskStandardItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<TaskStandardItem> TolerantMapList(IDataReader reader) {
                List<TaskStandardItem> list = new List<TaskStandardItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class IssueItemTableDef : APTableDef {
            
            private GuidAPColumnDef _itemId;
            
            private StringAPColumnDef _itemName;
            
            private Int32APColumnDef _issuelevel;
            
            private StringAPColumnDef _issueDescription;
            
            public IssueItemTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected IssueItemTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ItemId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ItemId {
                get {
                    if (Object.ReferenceEquals(_itemId, null)) {
                        _itemId = new GuidAPColumnDef(this, "ID", false);
                        _itemId.Display = "问题项ID";
                    }
                    return _itemId;
                }
            }
            
            /// <summary>
            /// ItemName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ItemName {
                get {
                    if (Object.ReferenceEquals(_itemName, null)) {
                        _itemName = new StringAPColumnDef(this, "Name", false, 100);
                        _itemName.Display = "问题项名称";
                    }
                    return _itemName;
                }
            }
            
            /// <summary>
            /// Issuelevel ColumnDef
            /// </summary>
            public virtual Int32APColumnDef Issuelevel {
                get {
                    if (Object.ReferenceEquals(_issuelevel, null)) {
                        _issuelevel = new Int32APColumnDef(this, "Level", false);
                        _issuelevel.Display = "问题级别";
                    }
                    return _issuelevel;
                }
            }
            
            /// <summary>
            /// IssueDescription ColumnDef
            /// </summary>
            public virtual StringAPColumnDef IssueDescription {
                get {
                    if (Object.ReferenceEquals(_issueDescription, null)) {
                        _issueDescription = new StringAPColumnDef(this, "Description", false, 1000);
                        _issueDescription.Display = "问题项描述";
                    }
                    return _issueDescription;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual IssueItemTableDef As(string name) {
                return new IssueItemTableDef("IssueItem", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, IssueItem data, bool throwIfValidColumnName) {
                data.ItemId = ItemId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ItemName = ItemName.GetValue<string>(reader, throwIfValidColumnName);
                data.Issuelevel = Issuelevel.GetValue<int>(reader, throwIfValidColumnName, 0);
                data.IssueDescription = IssueDescription.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual IssueItem Map(IDataReader reader) {
                IssueItem data = new IssueItem();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual IssueItem TolerantMap(IDataReader reader) {
                IssueItem data = new IssueItem();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<IssueItem> MapList(IDataReader reader) {
                List<IssueItem> list = new List<IssueItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<IssueItem> TolerantMapList(IDataReader reader) {
                List<IssueItem> list = new List<IssueItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class WorkJournalTableDef : APTableDef {
            
            private GuidAPColumnDef _journalId;
            
            private GuidAPColumnDef _userId;
            
            private GuidAPColumnDef _projectid;
            
            private GuidAPColumnDef _taskId;
            
            private DoubleAPColumnDef _progress;
            
            private DoubleAPColumnDef _workHours;
            
            private DateTimeAPColumnDef _recordDate;
            
            private DateTimeAPColumnDef _createDate;
            
            private DateTimeAPColumnDef _modifyDate;
            
            private StringAPColumnDef _comment;
            
            private GuidAPColumnDef _status;
            
            private GuidAPColumnDef _attachmentId;
            
            private GuidAPColumnDef _recordType;
            
            private DoubleAPColumnDef _taskEstimateWorkHours;
            
            private Int32APColumnDef _serviceCount;
            
            private GuidAPColumnDef _taskType;
            
            private GuidAPColumnDef _taskStatus;
            
            private GuidAPColumnDef _taskSubType;
            
            private DoubleAPColumnDef _taskSubTypeValue;
            
            public WorkJournalTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected WorkJournalTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// JournalId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef JournalId {
                get {
                    if (Object.ReferenceEquals(_journalId, null)) {
                        _journalId = new GuidAPColumnDef(this, "ID", false);
                        _journalId.Display = "ID";
                    }
                    return _journalId;
                }
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new GuidAPColumnDef(this, "UserId", false);
                        _userId.Display = "UserId";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// Projectid ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef Projectid {
                get {
                    if (Object.ReferenceEquals(_projectid, null)) {
                        _projectid = new GuidAPColumnDef(this, "Projectid", true);
                        _projectid.Display = "Projectid";
                    }
                    return _projectid;
                }
            }
            
            /// <summary>
            /// TaskId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskId {
                get {
                    if (Object.ReferenceEquals(_taskId, null)) {
                        _taskId = new GuidAPColumnDef(this, "TaskId", false);
                        _taskId.Display = "TaskId";
                        _taskId.Required = true;
                    }
                    return _taskId;
                }
            }
            
            /// <summary>
            /// Progress ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Progress {
                get {
                    if (Object.ReferenceEquals(_progress, null)) {
                        _progress = new DoubleAPColumnDef(this, "progress", false);
                        _progress.Display = "任务进度";
                    }
                    return _progress;
                }
            }
            
            /// <summary>
            /// WorkHours ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef WorkHours {
                get {
                    if (Object.ReferenceEquals(_workHours, null)) {
                        _workHours = new DoubleAPColumnDef(this, "WorkHours", false);
                        _workHours.Display = "今日工时";
                    }
                    return _workHours;
                }
            }
            
            /// <summary>
            /// RecordDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef RecordDate {
                get {
                    if (Object.ReferenceEquals(_recordDate, null)) {
                        _recordDate = new DateTimeAPColumnDef(this, "RecordDate", true);
                        _recordDate.Display = "记录时间";
                    }
                    return _recordDate;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", true);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "最近修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// Comment ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Comment {
                get {
                    if (Object.ReferenceEquals(_comment, null)) {
                        _comment = new StringAPColumnDef(this, "Comment", true, 1000);
                        _comment.Display = "日志描述";
                    }
                    return _comment;
                }
            }
            
            /// <summary>
            /// Status ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef Status {
                get {
                    if (Object.ReferenceEquals(_status, null)) {
                        _status = new GuidAPColumnDef(this, "Status", true);
                        _status.Display = "日志状态（已记录，未记录）";
                    }
                    return _status;
                }
            }
            
            /// <summary>
            /// AttachmentId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef AttachmentId {
                get {
                    if (Object.ReferenceEquals(_attachmentId, null)) {
                        _attachmentId = new GuidAPColumnDef(this, "AttachmentId", true);
                        _attachmentId.Display = "AttachmentId";
                    }
                    return _attachmentId;
                }
            }
            
            /// <summary>
            /// RecordType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef RecordType {
                get {
                    if (Object.ReferenceEquals(_recordType, null)) {
                        _recordType = new GuidAPColumnDef(this, "RecordType", true);
                        _recordType.Display = "日志记录方式（自动，手动）";
                    }
                    return _recordType;
                }
            }
            
            /// <summary>
            /// TaskEstimateWorkHours ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef TaskEstimateWorkHours {
                get {
                    if (Object.ReferenceEquals(_taskEstimateWorkHours, null)) {
                        _taskEstimateWorkHours = new DoubleAPColumnDef(this, "TaskEstimateWorkHours", false);
                        _taskEstimateWorkHours.Display = "预估工时";
                    }
                    return _taskEstimateWorkHours;
                }
            }
            
            /// <summary>
            /// ServiceCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef ServiceCount {
                get {
                    if (Object.ReferenceEquals(_serviceCount, null)) {
                        _serviceCount = new Int32APColumnDef(this, "ServiceCount", true);
                        _serviceCount.Display = "当日运维数量";
                    }
                    return _serviceCount;
                }
            }
            
            /// <summary>
            /// TaskType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskType {
                get {
                    if (Object.ReferenceEquals(_taskType, null)) {
                        _taskType = new GuidAPColumnDef(this, "TaskType", true);
                        _taskType.Display = "任务类型";
                    }
                    return _taskType;
                }
            }
            
            /// <summary>
            /// TaskStatus ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskStatus {
                get {
                    if (Object.ReferenceEquals(_taskStatus, null)) {
                        _taskStatus = new GuidAPColumnDef(this, "TaskStatus", true);
                        _taskStatus.Display = "任务状态";
                    }
                    return _taskStatus;
                }
            }
            
            /// <summary>
            /// TaskSubType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskSubType {
                get {
                    if (Object.ReferenceEquals(_taskSubType, null)) {
                        _taskSubType = new GuidAPColumnDef(this, "TaskSubType", true);
                        _taskSubType.Display = "子类型";
                    }
                    return _taskSubType;
                }
            }
            
            /// <summary>
            /// TaskSubTypeValue ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef TaskSubTypeValue {
                get {
                    if (Object.ReferenceEquals(_taskSubTypeValue, null)) {
                        _taskSubTypeValue = new DoubleAPColumnDef(this, "TaskSubTypeValue", true);
                        _taskSubTypeValue.Display = "TaskSubTypeValue";
                    }
                    return _taskSubTypeValue;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual WorkJournalTableDef As(string name) {
                return new WorkJournalTableDef("WorkJournal", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, WorkJournal data, bool throwIfValidColumnName) {
                data.JournalId = JournalId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.UserId = UserId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Projectid = Projectid.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TaskId = TaskId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Progress = Progress.GetValue<double>(reader, throwIfValidColumnName, 0);
                data.WorkHours = WorkHours.GetValue<double>(reader, throwIfValidColumnName, 0);
                data.RecordDate = RecordDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.ModifyDate = ModifyDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Comment = Comment.GetValue<string>(reader, throwIfValidColumnName);
                data.Status = Status.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.AttachmentId = AttachmentId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.RecordType = RecordType.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TaskEstimateWorkHours = TaskEstimateWorkHours.GetValue<double>(reader, throwIfValidColumnName);
                data.ServiceCount = ServiceCount.GetValue<int>(reader, throwIfValidColumnName);
                data.TaskType = TaskType.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TaskStatus = TaskStatus.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TaskSubType = TaskSubType.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TaskSubTypeValue = TaskSubTypeValue.GetValue<double>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WorkJournal Map(IDataReader reader) {
                WorkJournal data = new WorkJournal();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WorkJournal TolerantMap(IDataReader reader) {
                WorkJournal data = new WorkJournal();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WorkJournal> MapList(IDataReader reader) {
                List<WorkJournal> list = new List<WorkJournal>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WorkJournal> TolerantMapList(IDataReader reader) {
                List<WorkJournal> list = new List<WorkJournal>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class AttachmentTableDef : APTableDef {
            
            private GuidAPColumnDef _attachmentId;
            
            private GuidAPColumnDef _projectid;
            
            private GuidAPColumnDef _taskId;
            
            private GuidAPColumnDef _categoryId;
            
            private StringAPColumnDef _realName;
            
            private StringAPColumnDef _url;
            
            private StringAPColumnDef _fileExtName;
            
            private DateTimeAPColumnDef _uploadDate;
            
            private GuidAPColumnDef _publishUserId;
            
            public AttachmentTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected AttachmentTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// AttachmentId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef AttachmentId {
                get {
                    if (Object.ReferenceEquals(_attachmentId, null)) {
                        _attachmentId = new GuidAPColumnDef(this, "ID", false);
                        _attachmentId.Display = "ID";
                    }
                    return _attachmentId;
                }
            }
            
            /// <summary>
            /// Projectid ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef Projectid {
                get {
                    if (Object.ReferenceEquals(_projectid, null)) {
                        _projectid = new GuidAPColumnDef(this, "Projectid", false);
                        _projectid.Display = "Projectid";
                    }
                    return _projectid;
                }
            }
            
            /// <summary>
            /// TaskId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskId {
                get {
                    if (Object.ReferenceEquals(_taskId, null)) {
                        _taskId = new GuidAPColumnDef(this, "TaskId", false);
                        _taskId.Display = "TaskId";
                        _taskId.Required = true;
                    }
                    return _taskId;
                }
            }
            
            /// <summary>
            /// CategoryId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef CategoryId {
                get {
                    if (Object.ReferenceEquals(_categoryId, null)) {
                        _categoryId = new GuidAPColumnDef(this, "CategoryId", true);
                        _categoryId.Display = "CategoryId";
                        _categoryId.Required = true;
                    }
                    return _categoryId;
                }
            }
            
            /// <summary>
            /// RealName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef RealName {
                get {
                    if (Object.ReferenceEquals(_realName, null)) {
                        _realName = new StringAPColumnDef(this, "RealName", false, 40);
                        _realName.Display = "真实姓名";
                        _realName.Required = true;
                    }
                    return _realName;
                }
            }
            
            /// <summary>
            /// Url ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Url {
                get {
                    if (Object.ReferenceEquals(_url, null)) {
                        _url = new StringAPColumnDef(this, "Url", false, 255);
                        _url.Display = "文件上传地址路径";
                    }
                    return _url;
                }
            }
            
            /// <summary>
            /// FileExtName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef FileExtName {
                get {
                    if (Object.ReferenceEquals(_fileExtName, null)) {
                        _fileExtName = new StringAPColumnDef(this, "FileExtName", false, 10);
                        _fileExtName.Display = "附件后缀名";
                    }
                    return _fileExtName;
                }
            }
            
            /// <summary>
            /// UploadDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef UploadDate {
                get {
                    if (Object.ReferenceEquals(_uploadDate, null)) {
                        _uploadDate = new DateTimeAPColumnDef(this, "UploadDate", false);
                        _uploadDate.Display = "文件上传时间";
                    }
                    return _uploadDate;
                }
            }
            
            /// <summary>
            /// PublishUserId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef PublishUserId {
                get {
                    if (Object.ReferenceEquals(_publishUserId, null)) {
                        _publishUserId = new GuidAPColumnDef(this, "PublishUserId", false);
                        _publishUserId.Display = "上传者Id";
                    }
                    return _publishUserId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual AttachmentTableDef As(string name) {
                return new AttachmentTableDef("Attachments", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Attachment data, bool throwIfValidColumnName) {
                data.AttachmentId = AttachmentId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Projectid = Projectid.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TaskId = TaskId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.CategoryId = CategoryId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.RealName = RealName.GetValue<string>(reader, throwIfValidColumnName);
                data.Url = Url.GetValue<string>(reader, throwIfValidColumnName);
                data.FileExtName = FileExtName.GetValue<string>(reader, throwIfValidColumnName);
                data.UploadDate = UploadDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.PublishUserId = PublishUserId.GetValue<System.Guid>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Attachment Map(IDataReader reader) {
                Attachment data = new Attachment();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Attachment TolerantMap(IDataReader reader) {
                Attachment data = new Attachment();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Attachment> MapList(IDataReader reader) {
                List<Attachment> list = new List<Attachment>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Attachment> TolerantMapList(IDataReader reader) {
                List<Attachment> list = new List<Attachment>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class DictionaryTableDef : APTableDef {
            
            private GuidAPColumnDef _iD;
            
            private GuidAPColumnDef _parentID;
            
            private StringAPColumnDef _title;
            
            private StringAPColumnDef _code;
            
            private StringAPColumnDef _value;
            
            private StringAPColumnDef _note;
            
            private StringAPColumnDef _other;
            
            private Int32APColumnDef _sort;
            
            public DictionaryTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected DictionaryTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ID ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ID {
                get {
                    if (Object.ReferenceEquals(_iD, null)) {
                        _iD = new GuidAPColumnDef(this, "ID", false);
                        _iD.Display = "ID";
                    }
                    return _iD;
                }
            }
            
            /// <summary>
            /// ParentID ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ParentID {
                get {
                    if (Object.ReferenceEquals(_parentID, null)) {
                        _parentID = new GuidAPColumnDef(this, "ParentID", true);
                        _parentID.Display = "ParentID";
                    }
                    return _parentID;
                }
            }
            
            /// <summary>
            /// Title ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Title {
                get {
                    if (Object.ReferenceEquals(_title, null)) {
                        _title = new StringAPColumnDef(this, "Title", true, 100);
                        _title.Display = "Title";
                    }
                    return _title;
                }
            }
            
            /// <summary>
            /// Code ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Code {
                get {
                    if (Object.ReferenceEquals(_code, null)) {
                        _code = new StringAPColumnDef(this, "Code", true, 100);
                        _code.Display = "Code";
                    }
                    return _code;
                }
            }
            
            /// <summary>
            /// Value ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Value {
                get {
                    if (Object.ReferenceEquals(_value, null)) {
                        _value = new StringAPColumnDef(this, "Value", true, 100);
                        _value.Display = "Value";
                    }
                    return _value;
                }
            }
            
            /// <summary>
            /// Note ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Note {
                get {
                    if (Object.ReferenceEquals(_note, null)) {
                        _note = new StringAPColumnDef(this, "Note", true, 100);
                        _note.Display = "Note";
                    }
                    return _note;
                }
            }
            
            /// <summary>
            /// Other ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Other {
                get {
                    if (Object.ReferenceEquals(_other, null)) {
                        _other = new StringAPColumnDef(this, "Other", true, 100);
                        _other.Display = "Other";
                    }
                    return _other;
                }
            }
            
            /// <summary>
            /// Sort ColumnDef
            /// </summary>
            public virtual Int32APColumnDef Sort {
                get {
                    if (Object.ReferenceEquals(_sort, null)) {
                        _sort = new Int32APColumnDef(this, "Sort", true);
                        _sort.Display = "Sort";
                    }
                    return _sort;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual DictionaryTableDef As(string name) {
                return new DictionaryTableDef("Dictionary", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Dictionary data, bool throwIfValidColumnName) {
                data.ID = ID.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ParentID = ParentID.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Title = Title.GetValue<string>(reader, throwIfValidColumnName);
                data.Code = Code.GetValue<string>(reader, throwIfValidColumnName);
                data.Value = Value.GetValue<string>(reader, throwIfValidColumnName);
                data.Note = Note.GetValue<string>(reader, throwIfValidColumnName);
                data.Other = Other.GetValue<string>(reader, throwIfValidColumnName);
                data.Sort = Sort.GetValue<int>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Dictionary Map(IDataReader reader) {
                Dictionary data = new Dictionary();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Dictionary TolerantMap(IDataReader reader) {
                Dictionary data = new Dictionary();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Dictionary> MapList(IDataReader reader) {
                List<Dictionary> list = new List<Dictionary>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Dictionary> TolerantMapList(IDataReader reader) {
                List<Dictionary> list = new List<Dictionary>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class ReviewTableDef : APTableDef {
            
            private GuidAPColumnDef _reviewId;
            
            private GuidAPColumnDef _senderID;
            
            private GuidAPColumnDef _receiverID;
            
            private GuidAPColumnDef _taskId;
            
            private GuidAPColumnDef _projectId;
            
            private GuidAPColumnDef _reviewType;
            
            private GuidAPColumnDef _result;
            
            private DateTimeAPColumnDef _sendDate;
            
            private DateTimeAPColumnDef _reviewDate;
            
            private StringAPColumnDef _attachmentUrl;
            
            private StringAPColumnDef _comment;
            
            private StringAPColumnDef _title;
            
            private StringAPColumnDef _reviewComment;
            
            public ReviewTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected ReviewTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ReviewId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ReviewId {
                get {
                    if (Object.ReferenceEquals(_reviewId, null)) {
                        _reviewId = new GuidAPColumnDef(this, "ID", false);
                        _reviewId.Display = "ID";
                    }
                    return _reviewId;
                }
            }
            
            /// <summary>
            /// SenderID ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef SenderID {
                get {
                    if (Object.ReferenceEquals(_senderID, null)) {
                        _senderID = new GuidAPColumnDef(this, "SenderId", false);
                        _senderID.Display = "SenderId";
                    }
                    return _senderID;
                }
            }
            
            /// <summary>
            /// ReceiverID ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ReceiverID {
                get {
                    if (Object.ReferenceEquals(_receiverID, null)) {
                        _receiverID = new GuidAPColumnDef(this, "ReceiverId", false);
                        _receiverID.Display = "ReceiverId";
                    }
                    return _receiverID;
                }
            }
            
            /// <summary>
            /// TaskId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskId {
                get {
                    if (Object.ReferenceEquals(_taskId, null)) {
                        _taskId = new GuidAPColumnDef(this, "TaskId", false);
                        _taskId.Display = "TaskId";
                    }
                    return _taskId;
                }
            }
            
            /// <summary>
            /// ProjectId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ProjectId {
                get {
                    if (Object.ReferenceEquals(_projectId, null)) {
                        _projectId = new GuidAPColumnDef(this, "ProjectId", false);
                        _projectId.Display = "ProjectId";
                    }
                    return _projectId;
                }
            }
            
            /// <summary>
            /// ReviewType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ReviewType {
                get {
                    if (Object.ReferenceEquals(_reviewType, null)) {
                        _reviewType = new GuidAPColumnDef(this, "Type", false);
                        _reviewType.Display = "Type";
                    }
                    return _reviewType;
                }
            }
            
            /// <summary>
            /// Result ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef Result {
                get {
                    if (Object.ReferenceEquals(_result, null)) {
                        _result = new GuidAPColumnDef(this, "Result", false);
                        _result.Display = "Result";
                    }
                    return _result;
                }
            }
            
            /// <summary>
            /// SendDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef SendDate {
                get {
                    if (Object.ReferenceEquals(_sendDate, null)) {
                        _sendDate = new DateTimeAPColumnDef(this, "SendDate", false);
                        _sendDate.Display = "SendDate";
                    }
                    return _sendDate;
                }
            }
            
            /// <summary>
            /// ReviewDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ReviewDate {
                get {
                    if (Object.ReferenceEquals(_reviewDate, null)) {
                        _reviewDate = new DateTimeAPColumnDef(this, "ReviewDate", true);
                        _reviewDate.Display = "ReviewDate";
                    }
                    return _reviewDate;
                }
            }
            
            /// <summary>
            /// AttachmentUrl ColumnDef
            /// </summary>
            public virtual StringAPColumnDef AttachmentUrl {
                get {
                    if (Object.ReferenceEquals(_attachmentUrl, null)) {
                        _attachmentUrl = new StringAPColumnDef(this, "AttachmentId", true, 1000);
                        _attachmentUrl.Display = "AttachmentId";
                    }
                    return _attachmentUrl;
                }
            }
            
            /// <summary>
            /// Comment ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Comment {
                get {
                    if (Object.ReferenceEquals(_comment, null)) {
                        _comment = new StringAPColumnDef(this, "Comment", false, 1000);
                        _comment.Display = "填写说明";
                    }
                    return _comment;
                }
            }
            
            /// <summary>
            /// Title ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Title {
                get {
                    if (Object.ReferenceEquals(_title, null)) {
                        _title = new StringAPColumnDef(this, "Title", true, 50);
                        _title.Display = "Title";
                    }
                    return _title;
                }
            }
            
            /// <summary>
            /// ReviewComment ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ReviewComment {
                get {
                    if (Object.ReferenceEquals(_reviewComment, null)) {
                        _reviewComment = new StringAPColumnDef(this, "ReviewComment", true, 1000);
                        _reviewComment.Display = "审核意见";
                    }
                    return _reviewComment;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual ReviewTableDef As(string name) {
                return new ReviewTableDef("Review", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Review data, bool throwIfValidColumnName) {
                data.ReviewId = ReviewId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.SenderID = SenderID.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ReceiverID = ReceiverID.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TaskId = TaskId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ProjectId = ProjectId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ReviewType = ReviewType.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Result = Result.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.SendDate = SendDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
                data.ReviewDate = ReviewDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
                data.AttachmentUrl = AttachmentUrl.GetValue<string>(reader, throwIfValidColumnName);
                data.Comment = Comment.GetValue<string>(reader, throwIfValidColumnName);
                data.Title = Title.GetValue<string>(reader, throwIfValidColumnName);
                data.ReviewComment = ReviewComment.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Review Map(IDataReader reader) {
                Review data = new Review();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Review TolerantMap(IDataReader reader) {
                Review data = new Review();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Review> MapList(IDataReader reader) {
                List<Review> list = new List<Review>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Review> TolerantMapList(IDataReader reader) {
                List<Review> list = new List<Review>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class WorkflowTaskTableDef : APTableDef {
            
            private GuidAPColumnDef _taskId;
            
            private GuidAPColumnDef _prevID;
            
            private GuidAPColumnDef _prevStepID;
            
            private GuidAPColumnDef _flowId;
            
            private GuidAPColumnDef _stepID;
            
            private StringAPColumnDef _stepName;
            
            private StringAPColumnDef _senderName;
            
            private StringAPColumnDef _receiveName;
            
            private StringAPColumnDef _instanceID;
            
            private GuidAPColumnDef _groupID;
            
            private Int32APColumnDef _type;
            
            private StringAPColumnDef _title;
            
            private GuidAPColumnDef _senderID;
            
            private GuidAPColumnDef _receiveID;
            
            private DateTimeAPColumnDef _senderTime;
            
            private DateTimeAPColumnDef _receiveTime;
            
            private DateTimeAPColumnDef _openTime;
            
            private DateTimeAPColumnDef _completedTime;
            
            private DateTimeAPColumnDef _completedTime1;
            
            private StringAPColumnDef _comment;
            
            private Int32APColumnDef _isSign;
            
            private Int32APColumnDef _status;
            
            private StringAPColumnDef _note;
            
            private Int32APColumnDef _sort;
            
            private GuidAPColumnDef _subFlowGroupID;
            
            public WorkflowTaskTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected WorkflowTaskTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// TaskId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TaskId {
                get {
                    if (Object.ReferenceEquals(_taskId, null)) {
                        _taskId = new GuidAPColumnDef(this, "ID", false);
                        _taskId.Display = "ID";
                    }
                    return _taskId;
                }
            }
            
            /// <summary>
            /// PrevID ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef PrevID {
                get {
                    if (Object.ReferenceEquals(_prevID, null)) {
                        _prevID = new GuidAPColumnDef(this, "PrevID", true);
                        _prevID.Display = "PrevID";
                    }
                    return _prevID;
                }
            }
            
            /// <summary>
            /// PrevStepID ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef PrevStepID {
                get {
                    if (Object.ReferenceEquals(_prevStepID, null)) {
                        _prevStepID = new GuidAPColumnDef(this, "PrevStepID", true);
                        _prevStepID.Display = "PrevStepID";
                    }
                    return _prevStepID;
                }
            }
            
            /// <summary>
            /// FlowId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef FlowId {
                get {
                    if (Object.ReferenceEquals(_flowId, null)) {
                        _flowId = new GuidAPColumnDef(this, "FlowID", true);
                        _flowId.Display = "FlowID";
                    }
                    return _flowId;
                }
            }
            
            /// <summary>
            /// StepID ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef StepID {
                get {
                    if (Object.ReferenceEquals(_stepID, null)) {
                        _stepID = new GuidAPColumnDef(this, "StepID", true);
                        _stepID.Display = "StepID";
                    }
                    return _stepID;
                }
            }
            
            /// <summary>
            /// StepName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef StepName {
                get {
                    if (Object.ReferenceEquals(_stepName, null)) {
                        _stepName = new StringAPColumnDef(this, "StepName", true, 500);
                        _stepName.Display = "StepName";
                    }
                    return _stepName;
                }
            }
            
            /// <summary>
            /// SenderName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef SenderName {
                get {
                    if (Object.ReferenceEquals(_senderName, null)) {
                        _senderName = new StringAPColumnDef(this, "SenderName", true, 50);
                        _senderName.Display = "SenderName";
                    }
                    return _senderName;
                }
            }
            
            /// <summary>
            /// ReceiveName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ReceiveName {
                get {
                    if (Object.ReferenceEquals(_receiveName, null)) {
                        _receiveName = new StringAPColumnDef(this, "ReceiveName", true, 50);
                        _receiveName.Display = "ReceiveName";
                    }
                    return _receiveName;
                }
            }
            
            /// <summary>
            /// InstanceID ColumnDef
            /// </summary>
            public virtual StringAPColumnDef InstanceID {
                get {
                    if (Object.ReferenceEquals(_instanceID, null)) {
                        _instanceID = new StringAPColumnDef(this, "InstanceID", true, 50);
                        _instanceID.Display = "InstanceID";
                    }
                    return _instanceID;
                }
            }
            
            /// <summary>
            /// GroupID ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef GroupID {
                get {
                    if (Object.ReferenceEquals(_groupID, null)) {
                        _groupID = new GuidAPColumnDef(this, "GroupID", true);
                        _groupID.Display = "GroupID";
                    }
                    return _groupID;
                }
            }
            
            /// <summary>
            /// Type ColumnDef
            /// </summary>
            public virtual Int32APColumnDef Type {
                get {
                    if (Object.ReferenceEquals(_type, null)) {
                        _type = new Int32APColumnDef(this, "Type", true);
                        _type.Display = "Type";
                    }
                    return _type;
                }
            }
            
            /// <summary>
            /// Title ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Title {
                get {
                    if (Object.ReferenceEquals(_title, null)) {
                        _title = new StringAPColumnDef(this, "Title", true, 200);
                        _title.Display = "Title";
                    }
                    return _title;
                }
            }
            
            /// <summary>
            /// SenderID ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef SenderID {
                get {
                    if (Object.ReferenceEquals(_senderID, null)) {
                        _senderID = new GuidAPColumnDef(this, "SenderID", true);
                        _senderID.Display = "SenderID";
                    }
                    return _senderID;
                }
            }
            
            /// <summary>
            /// ReceiveID ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ReceiveID {
                get {
                    if (Object.ReferenceEquals(_receiveID, null)) {
                        _receiveID = new GuidAPColumnDef(this, "ReceiveID", true);
                        _receiveID.Display = "ReceiveID";
                    }
                    return _receiveID;
                }
            }
            
            /// <summary>
            /// SenderTime ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef SenderTime {
                get {
                    if (Object.ReferenceEquals(_senderTime, null)) {
                        _senderTime = new DateTimeAPColumnDef(this, "SenderTime", true);
                        _senderTime.Display = "SenderTime";
                    }
                    return _senderTime;
                }
            }
            
            /// <summary>
            /// ReceiveTime ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ReceiveTime {
                get {
                    if (Object.ReferenceEquals(_receiveTime, null)) {
                        _receiveTime = new DateTimeAPColumnDef(this, "ReceiveTime", true);
                        _receiveTime.Display = "ReceiveTime";
                    }
                    return _receiveTime;
                }
            }
            
            /// <summary>
            /// OpenTime ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef OpenTime {
                get {
                    if (Object.ReferenceEquals(_openTime, null)) {
                        _openTime = new DateTimeAPColumnDef(this, "OpenTime", true);
                        _openTime.Display = "OpenTime";
                    }
                    return _openTime;
                }
            }
            
            /// <summary>
            /// CompletedTime ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CompletedTime {
                get {
                    if (Object.ReferenceEquals(_completedTime, null)) {
                        _completedTime = new DateTimeAPColumnDef(this, "CompletedTime", true);
                        _completedTime.Display = "CompletedTime";
                    }
                    return _completedTime;
                }
            }
            
            /// <summary>
            /// CompletedTime1 ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CompletedTime1 {
                get {
                    if (Object.ReferenceEquals(_completedTime1, null)) {
                        _completedTime1 = new DateTimeAPColumnDef(this, "CompletedTime1", true);
                        _completedTime1.Display = "CompletedTime1";
                    }
                    return _completedTime1;
                }
            }
            
            /// <summary>
            /// Comment ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Comment {
                get {
                    if (Object.ReferenceEquals(_comment, null)) {
                        _comment = new StringAPColumnDef(this, "Comment", true, 1000);
                        _comment.Display = "Comment";
                    }
                    return _comment;
                }
            }
            
            /// <summary>
            /// IsSign ColumnDef
            /// </summary>
            public virtual Int32APColumnDef IsSign {
                get {
                    if (Object.ReferenceEquals(_isSign, null)) {
                        _isSign = new Int32APColumnDef(this, "IsSign", true);
                        _isSign.Display = "IsSign";
                    }
                    return _isSign;
                }
            }
            
            /// <summary>
            /// Status ColumnDef
            /// </summary>
            public virtual Int32APColumnDef Status {
                get {
                    if (Object.ReferenceEquals(_status, null)) {
                        _status = new Int32APColumnDef(this, "Status", true);
                        _status.Display = "Status";
                    }
                    return _status;
                }
            }
            
            /// <summary>
            /// Note ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Note {
                get {
                    if (Object.ReferenceEquals(_note, null)) {
                        _note = new StringAPColumnDef(this, "Note", true, 1000);
                        _note.Display = "Note";
                    }
                    return _note;
                }
            }
            
            /// <summary>
            /// Sort ColumnDef
            /// </summary>
            public virtual Int32APColumnDef Sort {
                get {
                    if (Object.ReferenceEquals(_sort, null)) {
                        _sort = new Int32APColumnDef(this, "Sort", true);
                        _sort.Display = "Sort";
                    }
                    return _sort;
                }
            }
            
            /// <summary>
            /// SubFlowGroupID ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef SubFlowGroupID {
                get {
                    if (Object.ReferenceEquals(_subFlowGroupID, null)) {
                        _subFlowGroupID = new GuidAPColumnDef(this, "SubFlowGroupID", true);
                        _subFlowGroupID.Display = "SubFlowGroupID";
                    }
                    return _subFlowGroupID;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual WorkflowTaskTableDef As(string name) {
                return new WorkflowTaskTableDef("WorkFlowTask", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, WorkflowTask data, bool throwIfValidColumnName) {
                data.TaskId = TaskId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.PrevID = PrevID.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.PrevStepID = PrevStepID.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.FlowId = FlowId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.StepID = StepID.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.StepName = StepName.GetValue<string>(reader, throwIfValidColumnName);
                data.SenderName = SenderName.GetValue<string>(reader, throwIfValidColumnName);
                data.ReceiveName = ReceiveName.GetValue<string>(reader, throwIfValidColumnName);
                data.InstanceID = InstanceID.GetValue<string>(reader, throwIfValidColumnName);
                data.GroupID = GroupID.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Type = Type.GetValue<int>(reader, throwIfValidColumnName);
                data.Title = Title.GetValue<string>(reader, throwIfValidColumnName);
                data.SenderID = SenderID.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ReceiveID = ReceiveID.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.SenderTime = SenderTime.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.ReceiveTime = ReceiveTime.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.OpenTime = OpenTime.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.CompletedTime = CompletedTime.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.CompletedTime1 = CompletedTime1.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Comment = Comment.GetValue<string>(reader, throwIfValidColumnName);
                data.IsSign = IsSign.GetValue<int>(reader, throwIfValidColumnName);
                data.Status = Status.GetValue<int>(reader, throwIfValidColumnName);
                data.Note = Note.GetValue<string>(reader, throwIfValidColumnName);
                data.Sort = Sort.GetValue<int>(reader, throwIfValidColumnName);
                data.SubFlowGroupID = SubFlowGroupID.GetValue<System.Guid>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WorkflowTask Map(IDataReader reader) {
                WorkflowTask data = new WorkflowTask();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual WorkflowTask TolerantMap(IDataReader reader) {
                WorkflowTask data = new WorkflowTask();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WorkflowTask> MapList(IDataReader reader) {
                List<WorkflowTask> list = new List<WorkflowTask>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<WorkflowTask> TolerantMapList(IDataReader reader) {
                List<WorkflowTask> list = new List<WorkflowTask>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class IndicationTableDef : APTableDef {
            
            private GuidAPColumnDef _indicationId;
            
            private StringAPColumnDef _indicationName;
            
            private StringAPColumnDef _description;
            
            private GuidAPColumnDef _createrId;
            
            private GuidAPColumnDef _indicationType;
            
            private GuidAPColumnDef _indicationStatus;
            
            private DateTimeAPColumnDef _createDate;
            
            private Int32APColumnDef _useCount;
            
            public IndicationTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected IndicationTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// IndicationId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef IndicationId {
                get {
                    if (Object.ReferenceEquals(_indicationId, null)) {
                        _indicationId = new GuidAPColumnDef(this, "ID", false);
                        _indicationId.Display = "ID";
                    }
                    return _indicationId;
                }
            }
            
            /// <summary>
            /// IndicationName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef IndicationName {
                get {
                    if (Object.ReferenceEquals(_indicationName, null)) {
                        _indicationName = new StringAPColumnDef(this, "Name", false, 200);
                        _indicationName.Display = "指标名称";
                        _indicationName.Required = true;
                    }
                    return _indicationName;
                }
            }
            
            /// <summary>
            /// Description ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Description {
                get {
                    if (Object.ReferenceEquals(_description, null)) {
                        _description = new StringAPColumnDef(this, "Description", true, 1000);
                        _description.Display = "指标描述";
                    }
                    return _description;
                }
            }
            
            /// <summary>
            /// CreaterId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef CreaterId {
                get {
                    if (Object.ReferenceEquals(_createrId, null)) {
                        _createrId = new GuidAPColumnDef(this, "CreaterId", false);
                        _createrId.Display = "CreaterId";
                    }
                    return _createrId;
                }
            }
            
            /// <summary>
            /// IndicationType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef IndicationType {
                get {
                    if (Object.ReferenceEquals(_indicationType, null)) {
                        _indicationType = new GuidAPColumnDef(this, "Type", false);
                        _indicationType.Display = "Type";
                    }
                    return _indicationType;
                }
            }
            
            /// <summary>
            /// IndicationStatus ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef IndicationStatus {
                get {
                    if (Object.ReferenceEquals(_indicationStatus, null)) {
                        _indicationStatus = new GuidAPColumnDef(this, "Status", false);
                        _indicationStatus.Display = "Status";
                    }
                    return _indicationStatus;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// UseCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef UseCount {
                get {
                    if (Object.ReferenceEquals(_useCount, null)) {
                        _useCount = new Int32APColumnDef(this, "UseCount", false);
                        _useCount.Display = "使用次数";
                    }
                    return _useCount;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual IndicationTableDef As(string name) {
                return new IndicationTableDef("Indication", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Indication data, bool throwIfValidColumnName) {
                data.IndicationId = IndicationId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.IndicationName = IndicationName.GetValue<string>(reader, throwIfValidColumnName);
                data.Description = Description.GetValue<string>(reader, throwIfValidColumnName);
                data.CreaterId = CreaterId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.IndicationType = IndicationType.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.IndicationStatus = IndicationStatus.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
                data.UseCount = UseCount.GetValue<int>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Indication Map(IDataReader reader) {
                Indication data = new Indication();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Indication TolerantMap(IDataReader reader) {
                Indication data = new Indication();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Indication> MapList(IDataReader reader) {
                List<Indication> list = new List<Indication>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Indication> TolerantMapList(IDataReader reader) {
                List<Indication> list = new List<Indication>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalIndicationTableDef : APTableDef {
            
            private GuidAPColumnDef _id;
            
            private GuidAPColumnDef _indicationId;
            
            private GuidAPColumnDef _tableId;
            
            private DoubleAPColumnDef _fullScore;
            
            private GuidAPColumnDef _evalType;
            
            public EvalIndicationTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalIndicationTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// Id ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef Id {
                get {
                    if (Object.ReferenceEquals(_id, null)) {
                        _id = new GuidAPColumnDef(this, "ID", false);
                        _id.Display = "ID";
                    }
                    return _id;
                }
            }
            
            /// <summary>
            /// IndicationId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef IndicationId {
                get {
                    if (Object.ReferenceEquals(_indicationId, null)) {
                        _indicationId = new GuidAPColumnDef(this, "IndicationId", false);
                        _indicationId.Display = "IndicationId";
                    }
                    return _indicationId;
                }
            }
            
            /// <summary>
            /// TableId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TableId {
                get {
                    if (Object.ReferenceEquals(_tableId, null)) {
                        _tableId = new GuidAPColumnDef(this, "TableId", false);
                        _tableId.Display = "TableId";
                    }
                    return _tableId;
                }
            }
            
            /// <summary>
            /// FullScore ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef FullScore {
                get {
                    if (Object.ReferenceEquals(_fullScore, null)) {
                        _fullScore = new DoubleAPColumnDef(this, "FullScore", false);
                        _fullScore.Display = "指标满分";
                    }
                    return _fullScore;
                }
            }
            
            /// <summary>
            /// EvalType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef EvalType {
                get {
                    if (Object.ReferenceEquals(_evalType, null)) {
                        _evalType = new GuidAPColumnDef(this, "Type", false);
                        _evalType.Display = "考核类型";
                    }
                    return _evalType;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalIndicationTableDef As(string name) {
                return new EvalIndicationTableDef("EvalIndication", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalIndication data, bool throwIfValidColumnName) {
                data.Id = Id.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.IndicationId = IndicationId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TableId = TableId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.FullScore = FullScore.GetValue<double>(reader, throwIfValidColumnName);
                data.EvalType = EvalType.GetValue<System.Guid>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalIndication Map(IDataReader reader) {
                EvalIndication data = new EvalIndication();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalIndication TolerantMap(IDataReader reader) {
                EvalIndication data = new EvalIndication();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalIndication> MapList(IDataReader reader) {
                List<EvalIndication> list = new List<EvalIndication>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalIndication> TolerantMapList(IDataReader reader) {
                List<EvalIndication> list = new List<EvalIndication>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalIndicationItemTableDef : APTableDef {
            
            private GuidAPColumnDef _itemId;
            
            private GuidAPColumnDef _evalIndicationId;
            
            private StringAPColumnDef _itemName;
            
            private DoubleAPColumnDef _itemScore;
            
            private StringAPColumnDef _itemValue;
            
            public EvalIndicationItemTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalIndicationItemTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ItemId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ItemId {
                get {
                    if (Object.ReferenceEquals(_itemId, null)) {
                        _itemId = new GuidAPColumnDef(this, "ID", false);
                        _itemId.Display = "ID";
                    }
                    return _itemId;
                }
            }
            
            /// <summary>
            /// EvalIndicationId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef EvalIndicationId {
                get {
                    if (Object.ReferenceEquals(_evalIndicationId, null)) {
                        _evalIndicationId = new GuidAPColumnDef(this, "EvalIndicationId", false);
                        _evalIndicationId.Display = "EvalIndicationId";
                    }
                    return _evalIndicationId;
                }
            }
            
            /// <summary>
            /// ItemName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ItemName {
                get {
                    if (Object.ReferenceEquals(_itemName, null)) {
                        _itemName = new StringAPColumnDef(this, "Name", false, 200);
                        _itemName.Display = "指标项名称";
                        _itemName.Required = true;
                    }
                    return _itemName;
                }
            }
            
            /// <summary>
            /// ItemScore ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef ItemScore {
                get {
                    if (Object.ReferenceEquals(_itemScore, null)) {
                        _itemScore = new DoubleAPColumnDef(this, "Score", true);
                        _itemScore.Display = "指标项分数";
                    }
                    return _itemScore;
                }
            }
            
            /// <summary>
            /// ItemValue ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ItemValue {
                get {
                    if (Object.ReferenceEquals(_itemValue, null)) {
                        _itemValue = new StringAPColumnDef(this, "Value", false, 200);
                        _itemValue.Display = "指标项值";
                        _itemValue.Required = true;
                    }
                    return _itemValue;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalIndicationItemTableDef As(string name) {
                return new EvalIndicationItemTableDef("EvalIndicationItem", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalIndicationItem data, bool throwIfValidColumnName) {
                data.ItemId = ItemId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.EvalIndicationId = EvalIndicationId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ItemName = ItemName.GetValue<string>(reader, throwIfValidColumnName);
                data.ItemScore = ItemScore.GetValue<double>(reader, throwIfValidColumnName);
                data.ItemValue = ItemValue.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalIndicationItem Map(IDataReader reader) {
                EvalIndicationItem data = new EvalIndicationItem();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalIndicationItem TolerantMap(IDataReader reader) {
                EvalIndicationItem data = new EvalIndicationItem();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalIndicationItem> MapList(IDataReader reader) {
                List<EvalIndicationItem> list = new List<EvalIndicationItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalIndicationItem> TolerantMapList(IDataReader reader) {
                List<EvalIndicationItem> list = new List<EvalIndicationItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalTableTableDef : APTableDef {
            
            private GuidAPColumnDef _tableId;
            
            private StringAPColumnDef _tableName;
            
            private StringAPColumnDef _description;
            
            private GuidAPColumnDef _tableType;
            
            private GuidAPColumnDef _tableStatus;
            
            private DoubleAPColumnDef _fullScore;
            
            private DateTimeAPColumnDef _createDate;
            
            private GuidAPColumnDef _createrId;
            
            private DateTimeAPColumnDef _modifyDate;
            
            private GuidAPColumnDef _modifierId;
            
            private GuidAPColumnDef _useCount;
            
            private GuidAPColumnDef _perviouslyTableStatus;
            
            public EvalTableTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalTableTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// TableId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TableId {
                get {
                    if (Object.ReferenceEquals(_tableId, null)) {
                        _tableId = new GuidAPColumnDef(this, "ID", false);
                        _tableId.Display = "ID";
                    }
                    return _tableId;
                }
            }
            
            /// <summary>
            /// TableName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef TableName {
                get {
                    if (Object.ReferenceEquals(_tableName, null)) {
                        _tableName = new StringAPColumnDef(this, "Name", false, 200);
                        _tableName.Display = "考核表名称";
                        _tableName.Required = true;
                    }
                    return _tableName;
                }
            }
            
            /// <summary>
            /// Description ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Description {
                get {
                    if (Object.ReferenceEquals(_description, null)) {
                        _description = new StringAPColumnDef(this, "Description", true, 1000);
                        _description.Display = "描述";
                    }
                    return _description;
                }
            }
            
            /// <summary>
            /// TableType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TableType {
                get {
                    if (Object.ReferenceEquals(_tableType, null)) {
                        _tableType = new GuidAPColumnDef(this, "Type", false);
                        _tableType.Display = "考核表类型";
                    }
                    return _tableType;
                }
            }
            
            /// <summary>
            /// TableStatus ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TableStatus {
                get {
                    if (Object.ReferenceEquals(_tableStatus, null)) {
                        _tableStatus = new GuidAPColumnDef(this, "Status", false);
                        _tableStatus.Display = "考核表状态";
                    }
                    return _tableStatus;
                }
            }
            
            /// <summary>
            /// FullScore ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef FullScore {
                get {
                    if (Object.ReferenceEquals(_fullScore, null)) {
                        _fullScore = new DoubleAPColumnDef(this, "FullScore", false);
                        _fullScore.Display = "考核表总分";
                    }
                    return _fullScore;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// CreaterId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef CreaterId {
                get {
                    if (Object.ReferenceEquals(_createrId, null)) {
                        _createrId = new GuidAPColumnDef(this, "CreaterId", false);
                        _createrId.Display = "创建人";
                    }
                    return _createrId;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "最近修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// ModifierId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ModifierId {
                get {
                    if (Object.ReferenceEquals(_modifierId, null)) {
                        _modifierId = new GuidAPColumnDef(this, "ModifierId", false);
                        _modifierId.Display = "修改人";
                    }
                    return _modifierId;
                }
            }
            
            /// <summary>
            /// UseCount ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef UseCount {
                get {
                    if (Object.ReferenceEquals(_useCount, null)) {
                        _useCount = new GuidAPColumnDef(this, "UseCount", false);
                        _useCount.Display = "使用次数";
                    }
                    return _useCount;
                }
            }
            
            /// <summary>
            /// PerviouslyTableStatus ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef PerviouslyTableStatus {
                get {
                    if (Object.ReferenceEquals(_perviouslyTableStatus, null)) {
                        _perviouslyTableStatus = new GuidAPColumnDef(this, "PerviouslyTableStatus", true);
                        _perviouslyTableStatus.Display = "考核表先前状态";
                    }
                    return _perviouslyTableStatus;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalTableTableDef As(string name) {
                return new EvalTableTableDef("EvalTable", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalTable data, bool throwIfValidColumnName) {
                data.TableId = TableId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TableName = TableName.GetValue<string>(reader, throwIfValidColumnName);
                data.Description = Description.GetValue<string>(reader, throwIfValidColumnName);
                data.TableType = TableType.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TableStatus = TableStatus.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.FullScore = FullScore.GetValue<double>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
                data.CreaterId = CreaterId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ModifyDate = ModifyDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.ModifierId = ModifierId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.UseCount = UseCount.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.PerviouslyTableStatus = PerviouslyTableStatus.GetValue<System.Guid>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalTable Map(IDataReader reader) {
                EvalTable data = new EvalTable();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalTable TolerantMap(IDataReader reader) {
                EvalTable data = new EvalTable();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalTable> MapList(IDataReader reader) {
                List<EvalTable> list = new List<EvalTable>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalTable> TolerantMapList(IDataReader reader) {
                List<EvalTable> list = new List<EvalTable>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalPeriodTableDef : APTableDef {
            
            private GuidAPColumnDef _periodId;
            
            private StringAPColumnDef _name;
            
            private DateTimeAPColumnDef _beginDate;
            
            private DateTimeAPColumnDef _endDate;
            
            private DateTimeAPColumnDef _accessBeginDate;
            
            private DateTimeAPColumnDef _accessEndDate;
            
            private StringAPColumnDef _analysisName;
            
            private StringAPColumnDef _analysisType;
            
            private BooleanAPColumnDef _isCurrent;
            
            private DateTimeAPColumnDef _createDate;
            
            public EvalPeriodTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalPeriodTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// PeriodId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef PeriodId {
                get {
                    if (Object.ReferenceEquals(_periodId, null)) {
                        _periodId = new GuidAPColumnDef(this, "ID", false);
                        _periodId.Display = "周期ID";
                    }
                    return _periodId;
                }
            }
            
            /// <summary>
            /// Name ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Name {
                get {
                    if (Object.ReferenceEquals(_name, null)) {
                        _name = new StringAPColumnDef(this, "Name", false, 100);
                        _name.Display = "周期名称";
                    }
                    return _name;
                }
            }
            
            /// <summary>
            /// BeginDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef BeginDate {
                get {
                    if (Object.ReferenceEquals(_beginDate, null)) {
                        _beginDate = new DateTimeAPColumnDef(this, "BeginDate", false);
                        _beginDate.Display = "开始时间（考核区间）";
                    }
                    return _beginDate;
                }
            }
            
            /// <summary>
            /// EndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef EndDate {
                get {
                    if (Object.ReferenceEquals(_endDate, null)) {
                        _endDate = new DateTimeAPColumnDef(this, "EndDate", false);
                        _endDate.Display = "结束时间（考核区间）";
                    }
                    return _endDate;
                }
            }
            
            /// <summary>
            /// AccessBeginDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef AccessBeginDate {
                get {
                    if (Object.ReferenceEquals(_accessBeginDate, null)) {
                        _accessBeginDate = new DateTimeAPColumnDef(this, "AccessBeginDate", false);
                        _accessBeginDate.Display = "开始时间（操作区间）";
                    }
                    return _accessBeginDate;
                }
            }
            
            /// <summary>
            /// AccessEndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef AccessEndDate {
                get {
                    if (Object.ReferenceEquals(_accessEndDate, null)) {
                        _accessEndDate = new DateTimeAPColumnDef(this, "AccessEndDate", false);
                        _accessEndDate.Display = "结束时间（操作区间）";
                    }
                    return _accessEndDate;
                }
            }
            
            /// <summary>
            /// AnalysisName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef AnalysisName {
                get {
                    if (Object.ReferenceEquals(_analysisName, null)) {
                        _analysisName = new StringAPColumnDef(this, "AnalysisName", false, 100);
                        _analysisName.Display = "算法模型名称";
                    }
                    return _analysisName;
                }
            }
            
            /// <summary>
            /// AnalysisType ColumnDef
            /// </summary>
            public virtual StringAPColumnDef AnalysisType {
                get {
                    if (Object.ReferenceEquals(_analysisType, null)) {
                        _analysisType = new StringAPColumnDef(this, "AnalysisType", false, 100);
                        _analysisType.Display = "算法模型类型";
                    }
                    return _analysisType;
                }
            }
            
            /// <summary>
            /// IsCurrent ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsCurrent {
                get {
                    if (Object.ReferenceEquals(_isCurrent, null)) {
                        _isCurrent = new BooleanAPColumnDef(this, "IsCurrent", false);
                        _isCurrent.Display = "是否当前考核期";
                    }
                    return _isCurrent;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", true);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalPeriodTableDef As(string name) {
                return new EvalPeriodTableDef("EvalPeriod", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalPeriod data, bool throwIfValidColumnName) {
                data.PeriodId = PeriodId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Name = Name.GetValue<string>(reader, throwIfValidColumnName);
                data.BeginDate = BeginDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.EndDate = EndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.AccessBeginDate = AccessBeginDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.AccessEndDate = AccessEndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.AnalysisName = AnalysisName.GetValue<string>(reader, throwIfValidColumnName);
                data.AnalysisType = AnalysisType.GetValue<string>(reader, throwIfValidColumnName);
                data.IsCurrent = IsCurrent.GetValue<bool>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalPeriod Map(IDataReader reader) {
                EvalPeriod data = new EvalPeriod();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalPeriod TolerantMap(IDataReader reader) {
                EvalPeriod data = new EvalPeriod();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalPeriod> MapList(IDataReader reader) {
                List<EvalPeriod> list = new List<EvalPeriod>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalPeriod> TolerantMapList(IDataReader reader) {
                List<EvalPeriod> list = new List<EvalPeriod>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalTargetTablePropertionTableDef : APTableDef {
            
            private GuidAPColumnDef _propertionID;
            
            private GuidAPColumnDef _tableId;
            
            private GuidAPColumnDef _targetId;
            
            private DoubleAPColumnDef _propertion;
            
            private GuidAPColumnDef _periodId;
            
            private GuidAPColumnDef _groupId;
            
            public EvalTargetTablePropertionTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalTargetTablePropertionTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// PropertionID ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef PropertionID {
                get {
                    if (Object.ReferenceEquals(_propertionID, null)) {
                        _propertionID = new GuidAPColumnDef(this, "ID", false);
                        _propertionID.Display = "ID";
                    }
                    return _propertionID;
                }
            }
            
            /// <summary>
            /// TableId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TableId {
                get {
                    if (Object.ReferenceEquals(_tableId, null)) {
                        _tableId = new GuidAPColumnDef(this, "TableId", false);
                        _tableId.Display = "TableId";
                    }
                    return _tableId;
                }
            }
            
            /// <summary>
            /// TargetId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TargetId {
                get {
                    if (Object.ReferenceEquals(_targetId, null)) {
                        _targetId = new GuidAPColumnDef(this, "TargetId", false);
                        _targetId.Display = "TargetId";
                    }
                    return _targetId;
                }
            }
            
            /// <summary>
            /// Propertion ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Propertion {
                get {
                    if (Object.ReferenceEquals(_propertion, null)) {
                        _propertion = new DoubleAPColumnDef(this, "Propertion", false);
                        _propertion.Display = "分值权重";
                    }
                    return _propertion;
                }
            }
            
            /// <summary>
            /// PeriodId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef PeriodId {
                get {
                    if (Object.ReferenceEquals(_periodId, null)) {
                        _periodId = new GuidAPColumnDef(this, "PeriodId", false);
                        _periodId.Display = "周期ID";
                    }
                    return _periodId;
                }
            }
            
            /// <summary>
            /// GroupId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef GroupId {
                get {
                    if (Object.ReferenceEquals(_groupId, null)) {
                        _groupId = new GuidAPColumnDef(this, "GroupId", true);
                        _groupId.Display = "考核组ID";
                    }
                    return _groupId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalTargetTablePropertionTableDef As(string name) {
                return new EvalTargetTablePropertionTableDef("EvalTargetTablePropertion", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalTargetTablePropertion data, bool throwIfValidColumnName) {
                data.PropertionID = PropertionID.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TableId = TableId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TargetId = TargetId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Propertion = Propertion.GetValue<double>(reader, throwIfValidColumnName);
                data.PeriodId = PeriodId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.GroupId = GroupId.GetValue<System.Guid>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalTargetTablePropertion Map(IDataReader reader) {
                EvalTargetTablePropertion data = new EvalTargetTablePropertion();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalTargetTablePropertion TolerantMap(IDataReader reader) {
                EvalTargetTablePropertion data = new EvalTargetTablePropertion();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalTargetTablePropertion> MapList(IDataReader reader) {
                List<EvalTargetTablePropertion> list = new List<EvalTargetTablePropertion>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalTargetTablePropertion> TolerantMapList(IDataReader reader) {
                List<EvalTargetTablePropertion> list = new List<EvalTargetTablePropertion>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalGroupTableDef : APTableDef {
            
            private GuidAPColumnDef _groupId;
            
            private StringAPColumnDef _groupName;
            
            private DateTimeAPColumnDef _createDate;
            
            public EvalGroupTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalGroupTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// GroupId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef GroupId {
                get {
                    if (Object.ReferenceEquals(_groupId, null)) {
                        _groupId = new GuidAPColumnDef(this, "ID", false);
                        _groupId.Display = "ID";
                    }
                    return _groupId;
                }
            }
            
            /// <summary>
            /// GroupName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef GroupName {
                get {
                    if (Object.ReferenceEquals(_groupName, null)) {
                        _groupName = new StringAPColumnDef(this, "Name", false, 100);
                        _groupName.Display = "组名称";
                    }
                    return _groupName;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalGroupTableDef As(string name) {
                return new EvalGroupTableDef("EvalGroup", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalGroup data, bool throwIfValidColumnName) {
                data.GroupId = GroupId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.GroupName = GroupName.GetValue<string>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalGroup Map(IDataReader reader) {
                EvalGroup data = new EvalGroup();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalGroup TolerantMap(IDataReader reader) {
                EvalGroup data = new EvalGroup();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalGroup> MapList(IDataReader reader) {
                List<EvalGroup> list = new List<EvalGroup>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalGroup> TolerantMapList(IDataReader reader) {
                List<EvalGroup> list = new List<EvalGroup>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalGroupMemberTableDef : APTableDef {
            
            private GuidAPColumnDef _groupMemberId;
            
            private GuidAPColumnDef _groupId;
            
            private GuidAPColumnDef _memberId;
            
            public EvalGroupMemberTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalGroupMemberTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// GroupMemberId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef GroupMemberId {
                get {
                    if (Object.ReferenceEquals(_groupMemberId, null)) {
                        _groupMemberId = new GuidAPColumnDef(this, "ID", false);
                        _groupMemberId.Display = "ID";
                    }
                    return _groupMemberId;
                }
            }
            
            /// <summary>
            /// GroupId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef GroupId {
                get {
                    if (Object.ReferenceEquals(_groupId, null)) {
                        _groupId = new GuidAPColumnDef(this, "GroupId", false);
                        _groupId.Display = "GroupId";
                    }
                    return _groupId;
                }
            }
            
            /// <summary>
            /// MemberId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef MemberId {
                get {
                    if (Object.ReferenceEquals(_memberId, null)) {
                        _memberId = new GuidAPColumnDef(this, "MemberId", false);
                        _memberId.Display = "MemberId";
                    }
                    return _memberId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalGroupMemberTableDef As(string name) {
                return new EvalGroupMemberTableDef("EvalGroupMember", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalGroupMember data, bool throwIfValidColumnName) {
                data.GroupMemberId = GroupMemberId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.GroupId = GroupId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.MemberId = MemberId.GetValue<System.Guid>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalGroupMember Map(IDataReader reader) {
                EvalGroupMember data = new EvalGroupMember();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalGroupMember TolerantMap(IDataReader reader) {
                EvalGroupMember data = new EvalGroupMember();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalGroupMember> MapList(IDataReader reader) {
                List<EvalGroupMember> list = new List<EvalGroupMember>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalGroupMember> TolerantMapList(IDataReader reader) {
                List<EvalGroupMember> list = new List<EvalGroupMember>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalGroupAccessorTableDef : APTableDef {
            
            private GuidAPColumnDef _groupAccessorId;
            
            private GuidAPColumnDef _groupId;
            
            private GuidAPColumnDef _accessorId;
            
            private DateTimeAPColumnDef _modifyDate;
            
            public EvalGroupAccessorTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalGroupAccessorTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// GroupAccessorId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef GroupAccessorId {
                get {
                    if (Object.ReferenceEquals(_groupAccessorId, null)) {
                        _groupAccessorId = new GuidAPColumnDef(this, "ID", false);
                        _groupAccessorId.Display = "评审人组成员ID";
                    }
                    return _groupAccessorId;
                }
            }
            
            /// <summary>
            /// GroupId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef GroupId {
                get {
                    if (Object.ReferenceEquals(_groupId, null)) {
                        _groupId = new GuidAPColumnDef(this, "GroupId", false);
                        _groupId.Display = "考核组ID";
                    }
                    return _groupId;
                }
            }
            
            /// <summary>
            /// AccessorId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef AccessorId {
                get {
                    if (Object.ReferenceEquals(_accessorId, null)) {
                        _accessorId = new GuidAPColumnDef(this, "AccessorId", false);
                        _accessorId.Display = "评审人";
                    }
                    return _accessorId;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", false);
                        _modifyDate.Display = "修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalGroupAccessorTableDef As(string name) {
                return new EvalGroupAccessorTableDef("EvalGroupAccessor", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalGroupAccessor data, bool throwIfValidColumnName) {
                data.GroupAccessorId = GroupAccessorId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.GroupId = GroupId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.AccessorId = AccessorId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ModifyDate = ModifyDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalGroupAccessor Map(IDataReader reader) {
                EvalGroupAccessor data = new EvalGroupAccessor();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalGroupAccessor TolerantMap(IDataReader reader) {
                EvalGroupAccessor data = new EvalGroupAccessor();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalGroupAccessor> MapList(IDataReader reader) {
                List<EvalGroupAccessor> list = new List<EvalGroupAccessor>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalGroupAccessor> TolerantMapList(IDataReader reader) {
                List<EvalGroupAccessor> list = new List<EvalGroupAccessor>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalAccessorTargetTableDef : APTableDef {
            
            private GuidAPColumnDef _accessorTargetId;
            
            private GuidAPColumnDef _accessorId;
            
            private GuidAPColumnDef _targetId;
            
            private GuidAPColumnDef _evalType;
            
            private GuidAPColumnDef _tableId;
            
            private DoubleAPColumnDef _propertion;
            
            private DateTimeAPColumnDef _modifyDate;
            
            private GuidAPColumnDef _periodId;
            
            public EvalAccessorTargetTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalAccessorTargetTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// AccessorTargetId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef AccessorTargetId {
                get {
                    if (Object.ReferenceEquals(_accessorTargetId, null)) {
                        _accessorTargetId = new GuidAPColumnDef(this, "ID", false);
                        _accessorTargetId.Display = "ID";
                    }
                    return _accessorTargetId;
                }
            }
            
            /// <summary>
            /// AccessorId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef AccessorId {
                get {
                    if (Object.ReferenceEquals(_accessorId, null)) {
                        _accessorId = new GuidAPColumnDef(this, "AccessorId", false);
                        _accessorId.Display = "评审人ID";
                    }
                    return _accessorId;
                }
            }
            
            /// <summary>
            /// TargetId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TargetId {
                get {
                    if (Object.ReferenceEquals(_targetId, null)) {
                        _targetId = new GuidAPColumnDef(this, "TargetId", false);
                        _targetId.Display = "评审对象ID";
                    }
                    return _targetId;
                }
            }
            
            /// <summary>
            /// EvalType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef EvalType {
                get {
                    if (Object.ReferenceEquals(_evalType, null)) {
                        _evalType = new GuidAPColumnDef(this, "EvalType", false);
                        _evalType.Display = "考核类型";
                    }
                    return _evalType;
                }
            }
            
            /// <summary>
            /// TableId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TableId {
                get {
                    if (Object.ReferenceEquals(_tableId, null)) {
                        _tableId = new GuidAPColumnDef(this, "TableId", false);
                        _tableId.Display = "TableId";
                    }
                    return _tableId;
                }
            }
            
            /// <summary>
            /// Propertion ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Propertion {
                get {
                    if (Object.ReferenceEquals(_propertion, null)) {
                        _propertion = new DoubleAPColumnDef(this, "Propertion", false);
                        _propertion.Display = "分值权重";
                    }
                    return _propertion;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", false);
                        _modifyDate.Display = "修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// PeriodId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef PeriodId {
                get {
                    if (Object.ReferenceEquals(_periodId, null)) {
                        _periodId = new GuidAPColumnDef(this, "PeriodId", false);
                        _periodId.Display = "周期ID";
                    }
                    return _periodId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalAccessorTargetTableDef As(string name) {
                return new EvalAccessorTargetTableDef("EvalAccessorTarget", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalAccessorTarget data, bool throwIfValidColumnName) {
                data.AccessorTargetId = AccessorTargetId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.AccessorId = AccessorId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TargetId = TargetId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.EvalType = EvalType.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TableId = TableId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Propertion = Propertion.GetValue<double>(reader, throwIfValidColumnName);
                data.ModifyDate = ModifyDate.GetValue<System.DateTime>(reader, throwIfValidColumnName, DateTime.Now);
                data.PeriodId = PeriodId.GetValue<System.Guid>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalAccessorTarget Map(IDataReader reader) {
                EvalAccessorTarget data = new EvalAccessorTarget();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalAccessorTarget TolerantMap(IDataReader reader) {
                EvalAccessorTarget data = new EvalAccessorTarget();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalAccessorTarget> MapList(IDataReader reader) {
                List<EvalAccessorTarget> list = new List<EvalAccessorTarget>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalAccessorTarget> TolerantMapList(IDataReader reader) {
                List<EvalAccessorTarget> list = new List<EvalAccessorTarget>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalResultTableDef : APTableDef {
            
            private GuidAPColumnDef _resultId;
            
            private GuidAPColumnDef _periodId;
            
            private GuidAPColumnDef _groupId;
            
            private GuidAPColumnDef _tableId;
            
            private GuidAPColumnDef _targetId;
            
            private GuidAPColumnDef _accesserRoleId;
            
            private GuidAPColumnDef _accesserId;
            
            private DateTimeAPColumnDef _accessDate;
            
            private DoubleAPColumnDef _score;
            
            private GuidAPColumnDef _evalType;
            
            private GuidAPColumnDef _targetRoleId;
            
            private DoubleAPColumnDef _adjustScore;
            
            public EvalResultTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalResultTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ResultId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ResultId {
                get {
                    if (Object.ReferenceEquals(_resultId, null)) {
                        _resultId = new GuidAPColumnDef(this, "ID", false);
                        _resultId.Display = "评价结果ID";
                    }
                    return _resultId;
                }
            }
            
            /// <summary>
            /// PeriodId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef PeriodId {
                get {
                    if (Object.ReferenceEquals(_periodId, null)) {
                        _periodId = new GuidAPColumnDef(this, "PeriodId", false);
                        _periodId.Display = "周期ID";
                    }
                    return _periodId;
                }
            }
            
            /// <summary>
            /// GroupId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef GroupId {
                get {
                    if (Object.ReferenceEquals(_groupId, null)) {
                        _groupId = new GuidAPColumnDef(this, "GroupId", false);
                        _groupId.Display = "单位ID";
                    }
                    return _groupId;
                }
            }
            
            /// <summary>
            /// TableId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TableId {
                get {
                    if (Object.ReferenceEquals(_tableId, null)) {
                        _tableId = new GuidAPColumnDef(this, "TableId", false);
                        _tableId.Display = "考核表ID";
                    }
                    return _tableId;
                }
            }
            
            /// <summary>
            /// TargetId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TargetId {
                get {
                    if (Object.ReferenceEquals(_targetId, null)) {
                        _targetId = new GuidAPColumnDef(this, "TargetId", false);
                        _targetId.Display = "被考核人ID";
                    }
                    return _targetId;
                }
            }
            
            /// <summary>
            /// AccesserRoleId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef AccesserRoleId {
                get {
                    if (Object.ReferenceEquals(_accesserRoleId, null)) {
                        _accesserRoleId = new GuidAPColumnDef(this, "AccesserRoleId", false);
                        _accesserRoleId.Display = "考评人角色";
                    }
                    return _accesserRoleId;
                }
            }
            
            /// <summary>
            /// AccesserId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef AccesserId {
                get {
                    if (Object.ReferenceEquals(_accesserId, null)) {
                        _accesserId = new GuidAPColumnDef(this, "AccesserId", false);
                        _accesserId.Display = "考评人";
                    }
                    return _accesserId;
                }
            }
            
            /// <summary>
            /// AccessDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef AccessDate {
                get {
                    if (Object.ReferenceEquals(_accessDate, null)) {
                        _accessDate = new DateTimeAPColumnDef(this, "AccessDate", false);
                        _accessDate.Display = "考评时间";
                    }
                    return _accessDate;
                }
            }
            
            /// <summary>
            /// Score ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Score {
                get {
                    if (Object.ReferenceEquals(_score, null)) {
                        _score = new DoubleAPColumnDef(this, "Score", false);
                        _score.Display = "得分";
                    }
                    return _score;
                }
            }
            
            /// <summary>
            /// EvalType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef EvalType {
                get {
                    if (Object.ReferenceEquals(_evalType, null)) {
                        _evalType = new GuidAPColumnDef(this, "EvalType", false);
                        _evalType.Display = "考核类型（主观考核，自动考核）";
                    }
                    return _evalType;
                }
            }
            
            /// <summary>
            /// TargetRoleId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef TargetRoleId {
                get {
                    if (Object.ReferenceEquals(_targetRoleId, null)) {
                        _targetRoleId = new GuidAPColumnDef(this, "TargetRoleId", false);
                        _targetRoleId.Display = "考评对象角色";
                    }
                    return _targetRoleId;
                }
            }
            
            /// <summary>
            /// AdjustScore ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef AdjustScore {
                get {
                    if (Object.ReferenceEquals(_adjustScore, null)) {
                        _adjustScore = new DoubleAPColumnDef(this, "AdjustScore", false);
                        _adjustScore.Display = "调整分";
                    }
                    return _adjustScore;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalResultTableDef As(string name) {
                return new EvalResultTableDef("EvalResult", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalResult data, bool throwIfValidColumnName) {
                data.ResultId = ResultId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.PeriodId = PeriodId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.GroupId = GroupId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TableId = TableId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TargetId = TargetId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.AccesserRoleId = AccesserRoleId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.AccesserId = AccesserId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.AccessDate = AccessDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Score = Score.GetValue<double>(reader, throwIfValidColumnName);
                data.EvalType = EvalType.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.TargetRoleId = TargetRoleId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.AdjustScore = AdjustScore.GetValue<double>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalResult Map(IDataReader reader) {
                EvalResult data = new EvalResult();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalResult TolerantMap(IDataReader reader) {
                EvalResult data = new EvalResult();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalResult> MapList(IDataReader reader) {
                List<EvalResult> list = new List<EvalResult>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalResult> TolerantMapList(IDataReader reader) {
                List<EvalResult> list = new List<EvalResult>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalResultItemTableDef : APTableDef {
            
            private GuidAPColumnDef _resultItemId;
            
            private GuidAPColumnDef _resultId;
            
            private GuidAPColumnDef _indicationId;
            
            private StringAPColumnDef _evalItemKey;
            
            private StringAPColumnDef _chooseValue;
            
            private StringAPColumnDef _resultValue;
            
            private DoubleAPColumnDef _score;
            
            public EvalResultItemTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalResultItemTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ResultItemId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ResultItemId {
                get {
                    if (Object.ReferenceEquals(_resultItemId, null)) {
                        _resultItemId = new GuidAPColumnDef(this, "ID", false);
                        _resultItemId.Display = "结果项ID";
                    }
                    return _resultItemId;
                }
            }
            
            /// <summary>
            /// ResultId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ResultId {
                get {
                    if (Object.ReferenceEquals(_resultId, null)) {
                        _resultId = new GuidAPColumnDef(this, "ResultId", false);
                        _resultId.Display = "评价结果ID";
                    }
                    return _resultId;
                }
            }
            
            /// <summary>
            /// IndicationId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef IndicationId {
                get {
                    if (Object.ReferenceEquals(_indicationId, null)) {
                        _indicationId = new GuidAPColumnDef(this, "IndicationId", false);
                        _indicationId.Display = "IndicationId";
                    }
                    return _indicationId;
                }
            }
            
            /// <summary>
            /// EvalItemKey ColumnDef
            /// </summary>
            public virtual StringAPColumnDef EvalItemKey {
                get {
                    if (Object.ReferenceEquals(_evalItemKey, null)) {
                        _evalItemKey = new StringAPColumnDef(this, "EvalItemKey", true, 200);
                        _evalItemKey.Display = "指标项";
                    }
                    return _evalItemKey;
                }
            }
            
            /// <summary>
            /// ChooseValue ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ChooseValue {
                get {
                    if (Object.ReferenceEquals(_chooseValue, null)) {
                        _chooseValue = new StringAPColumnDef(this, "ChooseValue", true, 20);
                        _chooseValue.Display = "选择值";
                    }
                    return _chooseValue;
                }
            }
            
            /// <summary>
            /// ResultValue ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ResultValue {
                get {
                    if (Object.ReferenceEquals(_resultValue, null)) {
                        _resultValue = new StringAPColumnDef(this, "ResultValue", true, 100);
                        _resultValue.Display = "输入值";
                    }
                    return _resultValue;
                }
            }
            
            /// <summary>
            /// Score ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Score {
                get {
                    if (Object.ReferenceEquals(_score, null)) {
                        _score = new DoubleAPColumnDef(this, "Score", false);
                        _score.Display = "得分";
                    }
                    return _score;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalResultItemTableDef As(string name) {
                return new EvalResultItemTableDef("EvalResultItem", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalResultItem data, bool throwIfValidColumnName) {
                data.ResultItemId = ResultItemId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ResultId = ResultId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.IndicationId = IndicationId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.EvalItemKey = EvalItemKey.GetValue<string>(reader, throwIfValidColumnName);
                data.ChooseValue = ChooseValue.GetValue<string>(reader, throwIfValidColumnName);
                data.ResultValue = ResultValue.GetValue<string>(reader, throwIfValidColumnName);
                data.Score = Score.GetValue<double>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalResultItem Map(IDataReader reader) {
                EvalResultItem data = new EvalResultItem();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalResultItem TolerantMap(IDataReader reader) {
                EvalResultItem data = new EvalResultItem();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalResultItem> MapList(IDataReader reader) {
                List<EvalResultItem> list = new List<EvalResultItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalResultItem> TolerantMapList(IDataReader reader) {
                List<EvalResultItem> list = new List<EvalResultItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalSubmitResultTableDef : APTableDef {
            
            private GuidAPColumnDef _submitResultId;
            
            private GuidAPColumnDef _periodId;
            
            private GuidAPColumnDef _userId;
            
            private GuidAPColumnDef _roleId;
            
            private DoubleAPColumnDef _score;
            
            private DoubleAPColumnDef _adjustScore;
            
            private StringAPColumnDef _periodName;
            
            private StringAPColumnDef _roleName;
            
            private StringAPColumnDef _userName;
            
            public EvalSubmitResultTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalSubmitResultTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// SubmitResultId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef SubmitResultId {
                get {
                    if (Object.ReferenceEquals(_submitResultId, null)) {
                        _submitResultId = new GuidAPColumnDef(this, "ID", false);
                        _submitResultId.Display = "评价结果ID";
                    }
                    return _submitResultId;
                }
            }
            
            /// <summary>
            /// PeriodId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef PeriodId {
                get {
                    if (Object.ReferenceEquals(_periodId, null)) {
                        _periodId = new GuidAPColumnDef(this, "PeriodId", false);
                        _periodId.Display = "周期ID";
                    }
                    return _periodId;
                }
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new GuidAPColumnDef(this, "UserId", false);
                        _userId.Display = "对象ID";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// RoleId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef RoleId {
                get {
                    if (Object.ReferenceEquals(_roleId, null)) {
                        _roleId = new GuidAPColumnDef(this, "RoleId", false);
                        _roleId.Display = "对象角色ID";
                    }
                    return _roleId;
                }
            }
            
            /// <summary>
            /// Score ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Score {
                get {
                    if (Object.ReferenceEquals(_score, null)) {
                        _score = new DoubleAPColumnDef(this, "Score", false);
                        _score.Display = "得分";
                    }
                    return _score;
                }
            }
            
            /// <summary>
            /// AdjustScore ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef AdjustScore {
                get {
                    if (Object.ReferenceEquals(_adjustScore, null)) {
                        _adjustScore = new DoubleAPColumnDef(this, "AdjustScore", false);
                        _adjustScore.Display = "调整分";
                    }
                    return _adjustScore;
                }
            }
            
            /// <summary>
            /// PeriodName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef PeriodName {
                get {
                    if (Object.ReferenceEquals(_periodName, null)) {
                        _periodName = new StringAPColumnDef(this, "PeriodName", false, 100);
                        _periodName.Display = "PeriodName";
                    }
                    return _periodName;
                }
            }
            
            /// <summary>
            /// RoleName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef RoleName {
                get {
                    if (Object.ReferenceEquals(_roleName, null)) {
                        _roleName = new StringAPColumnDef(this, "RoleName", false, 100);
                        _roleName.Display = "RoleName";
                    }
                    return _roleName;
                }
            }
            
            /// <summary>
            /// UserName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef UserName {
                get {
                    if (Object.ReferenceEquals(_userName, null)) {
                        _userName = new StringAPColumnDef(this, "UserName", false, 100);
                        _userName.Display = "UserName";
                    }
                    return _userName;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalSubmitResultTableDef As(string name) {
                return new EvalSubmitResultTableDef("EvalSubmitResult", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalSubmitResult data, bool throwIfValidColumnName) {
                data.SubmitResultId = SubmitResultId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.PeriodId = PeriodId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.UserId = UserId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.RoleId = RoleId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Score = Score.GetValue<double>(reader, throwIfValidColumnName);
                data.AdjustScore = AdjustScore.GetValue<double>(reader, throwIfValidColumnName);
                data.PeriodName = PeriodName.GetValue<string>(reader, throwIfValidColumnName);
                data.RoleName = RoleName.GetValue<string>(reader, throwIfValidColumnName);
                data.UserName = UserName.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalSubmitResult Map(IDataReader reader) {
                EvalSubmitResult data = new EvalSubmitResult();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalSubmitResult TolerantMap(IDataReader reader) {
                EvalSubmitResult data = new EvalSubmitResult();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalSubmitResult> MapList(IDataReader reader) {
                List<EvalSubmitResult> list = new List<EvalSubmitResult>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalSubmitResult> TolerantMapList(IDataReader reader) {
                List<EvalSubmitResult> list = new List<EvalSubmitResult>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class FolderTableDef : APTableDef {
            
            private GuidAPColumnDef _folderId;
            
            private GuidAPColumnDef _parentId;
            
            private Int32APColumnDef _sortId;
            
            private StringAPColumnDef _folderName;
            
            private GuidAPColumnDef _folderType;
            
            private GuidAPColumnDef _operatorId;
            
            private StringAPColumnDef _folderPath;
            
            private Int32APColumnDef _fileCount;
            
            private Int32APColumnDef _folderCount;
            
            public FolderTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected FolderTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// FolderId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef FolderId {
                get {
                    if (Object.ReferenceEquals(_folderId, null)) {
                        _folderId = new GuidAPColumnDef(this, "ID", false);
                        _folderId.Display = "文件夹ID";
                    }
                    return _folderId;
                }
            }
            
            /// <summary>
            /// ParentId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ParentId {
                get {
                    if (Object.ReferenceEquals(_parentId, null)) {
                        _parentId = new GuidAPColumnDef(this, "ParentId", false);
                        _parentId.Display = "ParentId";
                    }
                    return _parentId;
                }
            }
            
            /// <summary>
            /// SortId ColumnDef
            /// </summary>
            public virtual Int32APColumnDef SortId {
                get {
                    if (Object.ReferenceEquals(_sortId, null)) {
                        _sortId = new Int32APColumnDef(this, "SortId", false);
                        _sortId.Display = "SortId";
                    }
                    return _sortId;
                }
            }
            
            /// <summary>
            /// FolderName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef FolderName {
                get {
                    if (Object.ReferenceEquals(_folderName, null)) {
                        _folderName = new StringAPColumnDef(this, "FolderName", false, 200);
                        _folderName.Display = "文件夹名称";
                    }
                    return _folderName;
                }
            }
            
            /// <summary>
            /// FolderType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef FolderType {
                get {
                    if (Object.ReferenceEquals(_folderType, null)) {
                        _folderType = new GuidAPColumnDef(this, "FolderType", true);
                        _folderType.Display = "FolderType";
                    }
                    return _folderType;
                }
            }
            
            /// <summary>
            /// OperatorId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef OperatorId {
                get {
                    if (Object.ReferenceEquals(_operatorId, null)) {
                        _operatorId = new GuidAPColumnDef(this, "OperatorId", false);
                        _operatorId.Display = "OperatorId";
                    }
                    return _operatorId;
                }
            }
            
            /// <summary>
            /// FolderPath ColumnDef
            /// </summary>
            public virtual StringAPColumnDef FolderPath {
                get {
                    if (Object.ReferenceEquals(_folderPath, null)) {
                        _folderPath = new StringAPColumnDef(this, "FolderPath", false, 1000);
                        _folderPath.Display = "FolderPath";
                    }
                    return _folderPath;
                }
            }
            
            /// <summary>
            /// FileCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef FileCount {
                get {
                    if (Object.ReferenceEquals(_fileCount, null)) {
                        _fileCount = new Int32APColumnDef(this, "FileCount", false);
                        _fileCount.Display = "FileCount";
                    }
                    return _fileCount;
                }
            }
            
            /// <summary>
            /// FolderCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef FolderCount {
                get {
                    if (Object.ReferenceEquals(_folderCount, null)) {
                        _folderCount = new Int32APColumnDef(this, "FolderCount", false);
                        _folderCount.Display = "FolderCount";
                    }
                    return _folderCount;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual FolderTableDef As(string name) {
                return new FolderTableDef("Folder", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Folder data, bool throwIfValidColumnName) {
                data.FolderId = FolderId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ParentId = ParentId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.SortId = SortId.GetValue<int>(reader, throwIfValidColumnName);
                data.FolderName = FolderName.GetValue<string>(reader, throwIfValidColumnName);
                data.FolderType = FolderType.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.OperatorId = OperatorId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.FolderPath = FolderPath.GetValue<string>(reader, throwIfValidColumnName);
                data.FileCount = FileCount.GetValue<int>(reader, throwIfValidColumnName);
                data.FolderCount = FolderCount.GetValue<int>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Folder Map(IDataReader reader) {
                Folder data = new Folder();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Folder TolerantMap(IDataReader reader) {
                Folder data = new Folder();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Folder> MapList(IDataReader reader) {
                List<Folder> list = new List<Folder>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Folder> TolerantMapList(IDataReader reader) {
                List<Folder> list = new List<Folder>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class FolderFileTableDef : APTableDef {
            
            private GuidAPColumnDef _folderFileId;
            
            private GuidAPColumnDef _folderId;
            
            private GuidAPColumnDef _attachmentId;
            
            public FolderFileTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected FolderFileTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// FolderFileId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef FolderFileId {
                get {
                    if (Object.ReferenceEquals(_folderFileId, null)) {
                        _folderFileId = new GuidAPColumnDef(this, "ID", false);
                        _folderFileId.Display = "ID";
                    }
                    return _folderFileId;
                }
            }
            
            /// <summary>
            /// FolderId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef FolderId {
                get {
                    if (Object.ReferenceEquals(_folderId, null)) {
                        _folderId = new GuidAPColumnDef(this, "FolderId", false);
                        _folderId.Display = "FolderId";
                    }
                    return _folderId;
                }
            }
            
            /// <summary>
            /// AttachmentId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef AttachmentId {
                get {
                    if (Object.ReferenceEquals(_attachmentId, null)) {
                        _attachmentId = new GuidAPColumnDef(this, "FileId", false);
                        _attachmentId.Display = "FileId";
                    }
                    return _attachmentId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual FolderFileTableDef As(string name) {
                return new FolderFileTableDef("FolderFile", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, FolderFile data, bool throwIfValidColumnName) {
                data.FolderFileId = FolderFileId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.FolderId = FolderId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.AttachmentId = AttachmentId.GetValue<System.Guid>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual FolderFile Map(IDataReader reader) {
                FolderFile data = new FolderFile();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual FolderFile TolerantMap(IDataReader reader) {
                FolderFile data = new FolderFile();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<FolderFile> MapList(IDataReader reader) {
                List<FolderFile> list = new List<FolderFile>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<FolderFile> TolerantMapList(IDataReader reader) {
                List<FolderFile> list = new List<FolderFile>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class AdviceTableDef : APTableDef {
            
            private GuidAPColumnDef _adviceId;
            
            private GuidAPColumnDef _adviceType;
            
            private StringAPColumnDef _title;
            
            private StringAPColumnDef _content;
            
            private BooleanAPColumnDef _isAdopt;
            
            private StringAPColumnDef _reason;
            
            private GuidAPColumnDef _status;
            
            private Int32APColumnDef _supportCount;
            
            private GuidAPColumnDef _creatorId;
            
            private DateTimeAPColumnDef _createDate;
            
            private GuidAPColumnDef _modifierId;
            
            private DateTimeAPColumnDef _modifyDate;
            
            public AdviceTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected AdviceTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// AdviceId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef AdviceId {
                get {
                    if (Object.ReferenceEquals(_adviceId, null)) {
                        _adviceId = new GuidAPColumnDef(this, "ID", false);
                        _adviceId.Display = "文件夹ID";
                    }
                    return _adviceId;
                }
            }
            
            /// <summary>
            /// AdviceType ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef AdviceType {
                get {
                    if (Object.ReferenceEquals(_adviceType, null)) {
                        _adviceType = new GuidAPColumnDef(this, "Type", false);
                        _adviceType.Display = "建议类别";
                    }
                    return _adviceType;
                }
            }
            
            /// <summary>
            /// Title ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Title {
                get {
                    if (Object.ReferenceEquals(_title, null)) {
                        _title = new StringAPColumnDef(this, "Title", false, 200);
                        _title.Display = "建议标题";
                    }
                    return _title;
                }
            }
            
            /// <summary>
            /// Content ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Content {
                get {
                    if (Object.ReferenceEquals(_content, null)) {
                        _content = new StringAPColumnDef(this, "Content", false, 1000);
                        _content.Display = "建议内容";
                    }
                    return _content;
                }
            }
            
            /// <summary>
            /// IsAdopt ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsAdopt {
                get {
                    if (Object.ReferenceEquals(_isAdopt, null)) {
                        _isAdopt = new BooleanAPColumnDef(this, "IsAdopt", false);
                        _isAdopt.Display = "是否采纳";
                    }
                    return _isAdopt;
                }
            }
            
            /// <summary>
            /// Reason ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Reason {
                get {
                    if (Object.ReferenceEquals(_reason, null)) {
                        _reason = new StringAPColumnDef(this, "Reason", false, 200);
                        _reason.Display = "未采纳原因";
                    }
                    return _reason;
                }
            }
            
            /// <summary>
            /// Status ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef Status {
                get {
                    if (Object.ReferenceEquals(_status, null)) {
                        _status = new GuidAPColumnDef(this, "Status", false);
                        _status.Display = "建议状态";
                    }
                    return _status;
                }
            }
            
            /// <summary>
            /// SupportCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef SupportCount {
                get {
                    if (Object.ReferenceEquals(_supportCount, null)) {
                        _supportCount = new Int32APColumnDef(this, "SupportCount", false);
                        _supportCount.Display = "支持数";
                    }
                    return _supportCount;
                }
            }
            
            /// <summary>
            /// CreatorId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef CreatorId {
                get {
                    if (Object.ReferenceEquals(_creatorId, null)) {
                        _creatorId = new GuidAPColumnDef(this, "CreatorId", false);
                        _creatorId.Display = "添加者";
                    }
                    return _creatorId;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", true);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// ModifierId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef ModifierId {
                get {
                    if (Object.ReferenceEquals(_modifierId, null)) {
                        _modifierId = new GuidAPColumnDef(this, "ModifierId", false);
                        _modifierId.Display = "修改者";
                    }
                    return _modifierId;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "最近修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual AdviceTableDef As(string name) {
                return new AdviceTableDef("Advice", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Advice data, bool throwIfValidColumnName) {
                data.AdviceId = AdviceId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.AdviceType = AdviceType.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.Title = Title.GetValue<string>(reader, throwIfValidColumnName);
                data.Content = Content.GetValue<string>(reader, throwIfValidColumnName);
                data.IsAdopt = IsAdopt.GetValue<bool>(reader, throwIfValidColumnName);
                data.Reason = Reason.GetValue<string>(reader, throwIfValidColumnName);
                data.Status = Status.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.SupportCount = SupportCount.GetValue<int>(reader, throwIfValidColumnName);
                data.CreatorId = CreatorId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.ModifierId = ModifierId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.ModifyDate = ModifyDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Advice Map(IDataReader reader) {
                Advice data = new Advice();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Advice TolerantMap(IDataReader reader) {
                Advice data = new Advice();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Advice> MapList(IDataReader reader) {
                List<Advice> list = new List<Advice>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Advice> TolerantMapList(IDataReader reader) {
                List<Advice> list = new List<Advice>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class AdviceSupportTableDef : APTableDef {
            
            private GuidAPColumnDef _supportId;
            
            private GuidAPColumnDef _adviceId;
            
            private GuidAPColumnDef _supporterId;
            
            public AdviceSupportTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected AdviceSupportTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// SupportId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef SupportId {
                get {
                    if (Object.ReferenceEquals(_supportId, null)) {
                        _supportId = new GuidAPColumnDef(this, "ID", false);
                        _supportId.Display = "ID";
                    }
                    return _supportId;
                }
            }
            
            /// <summary>
            /// AdviceId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef AdviceId {
                get {
                    if (Object.ReferenceEquals(_adviceId, null)) {
                        _adviceId = new GuidAPColumnDef(this, "AdviceId", false);
                        _adviceId.Display = "AdviceId";
                    }
                    return _adviceId;
                }
            }
            
            /// <summary>
            /// SupporterId ColumnDef
            /// </summary>
            public virtual GuidAPColumnDef SupporterId {
                get {
                    if (Object.ReferenceEquals(_supporterId, null)) {
                        _supporterId = new GuidAPColumnDef(this, "SupporterId", false);
                        _supporterId.Display = "SupporterId";
                    }
                    return _supporterId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual AdviceSupportTableDef As(string name) {
                return new AdviceSupportTableDef("AdviceSupport", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, AdviceSupport data, bool throwIfValidColumnName) {
                data.SupportId = SupportId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.AdviceId = AdviceId.GetValue<System.Guid>(reader, throwIfValidColumnName);
                data.SupporterId = SupporterId.GetValue<System.Guid>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual AdviceSupport Map(IDataReader reader) {
                AdviceSupport data = new AdviceSupport();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual AdviceSupport TolerantMap(IDataReader reader) {
                AdviceSupport data = new AdviceSupport();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<AdviceSupport> MapList(IDataReader reader) {
                List<AdviceSupport> list = new List<AdviceSupport>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<AdviceSupport> TolerantMapList(IDataReader reader) {
                List<AdviceSupport> list = new List<AdviceSupport>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
    }
    
    /// <summary>
    /// APDBDef 是一个自动生成的具有 Partial 修饰的类，用于定义所有 从 APDal 继承来的 Dal 类。你可以添加同名的 Partial 类来扩充功能。
    /// </summary>
    public partial class APDalDef {
        
        /// <summary>
        /// 用户账号 DalBase
        /// </summary>
        public partial class AccountDalBase : APDal {
            
            public AccountDalBase() {
            }
            
            public AccountDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Account data) {
                var query = APQuery.insert(APDBDef.Account).values(APDBDef.Account.UserId.SetValue(data.UserId), APDBDef.Account.UserName.SetValue(data.UserName), APDBDef.Account.Account.SetValue(data.Account), APDBDef.Account.Password.SetValue(data.Password), APDBDef.Account.Status.SetValue(data.Status), APDBDef.Account.Sort.SetValue(data.Sort), APDBDef.Account.Note.SetValue(data.Note));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Account data) {
                var query = APQuery.update(APDBDef.Account).values(APDBDef.Account.UserName.SetValue(data.UserName), APDBDef.Account.Account.SetValue(data.Account), APDBDef.Account.Password.SetValue(data.Password), APDBDef.Account.Status.SetValue(data.Status), APDBDef.Account.Sort.SetValue(data.Sort), APDBDef.Account.Note.SetValue(data.Note)).where((APDBDef.Account.UserId == data.UserId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid userId, Object metadata) {
                var query = APQuery.update(APDBDef.Account).values(APSqlSetPhraseSelector.Select(APDBDef.Account, metadata)).where((APDBDef.Account.UserId == userId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid userId) {
                var query = APQuery.delete(APDBDef.Account).where((APDBDef.Account.UserId == userId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Account).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Account.Asterisk.Count()).from(APDBDef.Account).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Account PrimaryGet(System.Guid userId) {
                var query = APQuery.select(APDBDef.Account.Asterisk).from(APDBDef.Account).where((APDBDef.Account.UserId == userId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Account.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Account> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Account.Asterisk).from(APDBDef.Account);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Account.UserId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Account.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Account> GetInitData() {
                return new List<Account>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Account> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Account data = list[i];
                    if ((PrimaryGet(data.UserId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 用户账号 Dal
        /// </summary>
        public partial class AccountDal : AccountDalBase {
            
            public AccountDal() {
            }
            
            public AccountDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 用户信息 DalBase
        /// </summary>
        public partial class UserInfoDalBase : APDal {
            
            public UserInfoDalBase() {
            }
            
            public UserInfoDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(UserInfo data) {
                var query = APQuery.insert(APDBDef.UserInfo).values(APDBDef.UserInfo.UserId.SetValue(data.UserId), APDBDef.UserInfo.UserName.SetValue(data.UserName), APDBDef.UserInfo.RealName.SetValue(data.RealName), APDBDef.UserInfo.NickName.SetValue(data.NickName), APDBDef.UserInfo.Gender.SetValue(data.Gender), APDBDef.UserInfo.Department.SetValue(data.Department), APDBDef.UserInfo.Position.SetValue(data.Position), APDBDef.UserInfo.Phone.SetValue(data.Phone), APDBDef.UserInfo.Mobile.SetValue(data.Mobile), APDBDef.UserInfo.Email.SetValue(data.Email), APDBDef.UserInfo.Birthday.SetValue(data.Birthday), APDBDef.UserInfo.Introduce.SetValue(data.Introduce), APDBDef.UserInfo.IsDelete.SetValue(data.IsDelete));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(UserInfo data) {
                var query = APQuery.update(APDBDef.UserInfo).values(APDBDef.UserInfo.UserName.SetValue(data.UserName), APDBDef.UserInfo.RealName.SetValue(data.RealName), APDBDef.UserInfo.NickName.SetValue(data.NickName), APDBDef.UserInfo.Gender.SetValue(data.Gender), APDBDef.UserInfo.Department.SetValue(data.Department), APDBDef.UserInfo.Position.SetValue(data.Position), APDBDef.UserInfo.Phone.SetValue(data.Phone), APDBDef.UserInfo.Mobile.SetValue(data.Mobile), APDBDef.UserInfo.Email.SetValue(data.Email), APDBDef.UserInfo.Birthday.SetValue(data.Birthday), APDBDef.UserInfo.Introduce.SetValue(data.Introduce), APDBDef.UserInfo.IsDelete.SetValue(data.IsDelete)).where((APDBDef.UserInfo.UserId == data.UserId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid userId, Object metadata) {
                var query = APQuery.update(APDBDef.UserInfo).values(APSqlSetPhraseSelector.Select(APDBDef.UserInfo, metadata)).where((APDBDef.UserInfo.UserId == userId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid userId) {
                var query = APQuery.delete(APDBDef.UserInfo).where((APDBDef.UserInfo.UserId == userId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.UserInfo).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.UserInfo.Asterisk.Count()).from(APDBDef.UserInfo).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual UserInfo PrimaryGet(System.Guid userId) {
                var query = APQuery.select(APDBDef.UserInfo.Asterisk).from(APDBDef.UserInfo).where((APDBDef.UserInfo.UserId == userId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.UserInfo.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<UserInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.UserInfo.Asterisk).from(APDBDef.UserInfo);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.UserInfo.UserId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.UserInfo.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<UserInfo> GetInitData() {
                return new List<UserInfo>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<UserInfo> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    UserInfo data = list[i];
                    if ((PrimaryGet(data.UserId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 用户信息 Dal
        /// </summary>
        public partial class UserInfoDal : UserInfoDalBase {
            
            public UserInfoDal() {
            }
            
            public UserInfoDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 应用程序库(权限) DalBase
        /// </summary>
        public partial class AppDalBase : APDal {
            
            public AppDalBase() {
            }
            
            public AppDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(App data) {
                var query = APQuery.insert(APDBDef.App).values(APDBDef.App.AppId.SetValue(data.AppId), APDBDef.App.Title.SetValue(data.Title), APDBDef.App.Address.SetValue(data.Address), APDBDef.App.AppType.SetValue(data.AppType), APDBDef.App.Code.SetValue(data.Code), APDBDef.App.Note.SetValue(data.Note), APDBDef.App.backup1.SetValue(data.backup1), APDBDef.App.backup2.SetValue(data.backup2), APDBDef.App.backup3.SetValue(data.backup3), APDBDef.App.backup4.SetValue(data.backup4), APDBDef.App.backup5.SetValue(data.backup5), APDBDef.App.backup6.SetValue(data.backup6));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(App data) {
                var query = APQuery.update(APDBDef.App).values(APDBDef.App.Title.SetValue(data.Title), APDBDef.App.Address.SetValue(data.Address), APDBDef.App.AppType.SetValue(data.AppType), APDBDef.App.Code.SetValue(data.Code), APDBDef.App.Note.SetValue(data.Note), APDBDef.App.backup1.SetValue(data.backup1), APDBDef.App.backup2.SetValue(data.backup2), APDBDef.App.backup3.SetValue(data.backup3), APDBDef.App.backup4.SetValue(data.backup4), APDBDef.App.backup5.SetValue(data.backup5), APDBDef.App.backup6.SetValue(data.backup6)).where((APDBDef.App.AppId == data.AppId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid appId, Object metadata) {
                var query = APQuery.update(APDBDef.App).values(APSqlSetPhraseSelector.Select(APDBDef.App, metadata)).where((APDBDef.App.AppId == appId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid appId) {
                var query = APQuery.delete(APDBDef.App).where((APDBDef.App.AppId == appId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.App).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.App.Asterisk.Count()).from(APDBDef.App).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual App PrimaryGet(System.Guid appId) {
                var query = APQuery.select(APDBDef.App.Asterisk).from(APDBDef.App).where((APDBDef.App.AppId == appId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.App.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<App> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.App.Asterisk).from(APDBDef.App);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.App.AppId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.App.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<App> GetInitData() {
                return new List<App>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<App> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    App data = list[i];
                    if ((PrimaryGet(data.AppId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 应用程序库(权限) Dal
        /// </summary>
        public partial class AppDal : AppDalBase {
            
            public AppDal() {
            }
            
            public AppDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 角色 DalBase
        /// </summary>
        public partial class RoleDalBase : APDal {
            
            public RoleDalBase() {
            }
            
            public RoleDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Role data) {
                var query = APQuery.insert(APDBDef.Role).values(APDBDef.Role.RoleId.SetValue(data.RoleId), APDBDef.Role.RoleName.SetValue(data.RoleName), APDBDef.Role.RoleUseMember.SetValue(data.RoleUseMember), APDBDef.Role.Note.SetValue(data.Note), APDBDef.Role.RoleType.SetValue(data.RoleType));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Role data) {
                var query = APQuery.update(APDBDef.Role).values(APDBDef.Role.RoleName.SetValue(data.RoleName), APDBDef.Role.RoleUseMember.SetValue(data.RoleUseMember), APDBDef.Role.Note.SetValue(data.Note), APDBDef.Role.RoleType.SetValue(data.RoleType)).where((APDBDef.Role.RoleId == data.RoleId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid roleId, Object metadata) {
                var query = APQuery.update(APDBDef.Role).values(APSqlSetPhraseSelector.Select(APDBDef.Role, metadata)).where((APDBDef.Role.RoleId == roleId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid roleId) {
                var query = APQuery.delete(APDBDef.Role).where((APDBDef.Role.RoleId == roleId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Role).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Role.Asterisk.Count()).from(APDBDef.Role).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Role PrimaryGet(System.Guid roleId) {
                var query = APQuery.select(APDBDef.Role.Asterisk).from(APDBDef.Role).where((APDBDef.Role.RoleId == roleId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Role.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Role> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Role.Asterisk).from(APDBDef.Role);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Role.RoleId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Role.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Role> GetInitData() {
                return new List<Role>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Role> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Role data = list[i];
                    if ((PrimaryGet(data.RoleId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 角色 Dal
        /// </summary>
        public partial class RoleDal : RoleDalBase {
            
            public RoleDal() {
            }
            
            public RoleDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 用户角色 DalBase
        /// </summary>
        public partial class UserRoleDalBase : APDal {
            
            public UserRoleDalBase() {
            }
            
            public UserRoleDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(UserRole data) {
                var query = APQuery.insert(APDBDef.UserRole).values(APDBDef.UserRole.ID.SetValue(data.ID), APDBDef.UserRole.UserId.SetValue(data.UserId), APDBDef.UserRole.RoleId.SetValue(data.RoleId), APDBDef.UserRole.IsDefault.SetValue(data.IsDefault));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(UserRole data) {
                var query = APQuery.update(APDBDef.UserRole).values(APDBDef.UserRole.UserId.SetValue(data.UserId), APDBDef.UserRole.RoleId.SetValue(data.RoleId), APDBDef.UserRole.IsDefault.SetValue(data.IsDefault)).where((APDBDef.UserRole.ID == data.ID));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid iD, Object metadata) {
                var query = APQuery.update(APDBDef.UserRole).values(APSqlSetPhraseSelector.Select(APDBDef.UserRole, metadata)).where((APDBDef.UserRole.ID == iD));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid iD) {
                var query = APQuery.delete(APDBDef.UserRole).where((APDBDef.UserRole.ID == iD));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.UserRole).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.UserRole.Asterisk.Count()).from(APDBDef.UserRole).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual UserRole PrimaryGet(System.Guid iD) {
                var query = APQuery.select(APDBDef.UserRole.Asterisk).from(APDBDef.UserRole).where((APDBDef.UserRole.ID == iD));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.UserRole.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<UserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.UserRole.Asterisk).from(APDBDef.UserRole);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.UserRole.ID);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.UserRole.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<UserRole> GetInitData() {
                return new List<UserRole>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<UserRole> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    UserRole data = list[i];
                    if ((PrimaryGet(data.ID) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 用户角色 Dal
        /// </summary>
        public partial class UserRoleDal : UserRoleDalBase {
            
            public UserRoleDal() {
            }
            
            public UserRoleDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 单位表 DalBase
        /// </summary>
        public partial class CompanyInfoDalBase : APDal {
            
            public CompanyInfoDalBase() {
            }
            
            public CompanyInfoDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(CompanyInfo data) {
                var query = APQuery.insert(APDBDef.CompanyInfo).values(APDBDef.CompanyInfo.CompanyId.SetValue(data.CompanyId), APDBDef.CompanyInfo.CompanyName.SetValue(data.CompanyName), APDBDef.CompanyInfo.CompanyStatus.SetValue(data.CompanyStatus));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(CompanyInfo data) {
                var query = APQuery.update(APDBDef.CompanyInfo).values(APDBDef.CompanyInfo.CompanyName.SetValue(data.CompanyName), APDBDef.CompanyInfo.CompanyStatus.SetValue(data.CompanyStatus)).where((APDBDef.CompanyInfo.CompanyId == data.CompanyId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid companyId, Object metadata) {
                var query = APQuery.update(APDBDef.CompanyInfo).values(APSqlSetPhraseSelector.Select(APDBDef.CompanyInfo, metadata)).where((APDBDef.CompanyInfo.CompanyId == companyId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid companyId) {
                var query = APQuery.delete(APDBDef.CompanyInfo).where((APDBDef.CompanyInfo.CompanyId == companyId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.CompanyInfo).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.CompanyInfo.Asterisk.Count()).from(APDBDef.CompanyInfo).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual CompanyInfo PrimaryGet(System.Guid companyId) {
                var query = APQuery.select(APDBDef.CompanyInfo.Asterisk).from(APDBDef.CompanyInfo).where((APDBDef.CompanyInfo.CompanyId == companyId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.CompanyInfo.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<CompanyInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.CompanyInfo.Asterisk).from(APDBDef.CompanyInfo);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.CompanyInfo.CompanyId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.CompanyInfo.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<CompanyInfo> GetInitData() {
                return new List<CompanyInfo>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<CompanyInfo> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    CompanyInfo data = list[i];
                    if ((PrimaryGet(data.CompanyId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 单位表 Dal
        /// </summary>
        public partial class CompanyInfoDal : CompanyInfoDalBase {
            
            public CompanyInfoDal() {
            }
            
            public CompanyInfoDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 项目 DalBase
        /// </summary>
        public partial class ProjectDalBase : APDal {
            
            public ProjectDalBase() {
            }
            
            public ProjectDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Project data) {
                var query = APQuery.insert(APDBDef.Project).values(APDBDef.Project.ProjectId.SetValue(data.ProjectId), APDBDef.Project.ProjectName.SetValue(data.ProjectName), APDBDef.Project.Description.SetValue(data.Description), APDBDef.Project.ProjectStatus.SetValue(data.ProjectStatus), APDBDef.Project.ProjectType.SetValue(data.ProjectType), APDBDef.Project.RateOfProgress.SetValue(data.RateOfProgress), APDBDef.Project.PMId.SetValue(data.PMId), APDBDef.Project.CreatorId.SetValue(data.CreatorId), APDBDef.Project.StartDate.SetValue(data.StartDate), APDBDef.Project.EndDate.SetValue(data.EndDate), APDBDef.Project.RealStartDate.SetValue(data.RealStartDate), APDBDef.Project.RealEndDate.SetValue(data.RealEndDate), APDBDef.Project.ProjectOwner.SetValue(data.ProjectOwner), APDBDef.Project.CreateDate.SetValue(data.CreateDate), APDBDef.Project.ModifyDate.SetValue(data.ModifyDate), APDBDef.Project.OrgId.SetValue(data.OrgId), APDBDef.Project.Code.SetValue(data.Code), APDBDef.Project.RealCode.SetValue(data.RealCode), APDBDef.Project.ReviewerId.SetValue(data.ReviewerId), APDBDef.Project.ProjectExecutor.SetValue(data.ProjectExecutor), APDBDef.Project.ManagerId.SetValue(data.ManagerId), APDBDef.Project.ProcessName.SetValue(data.ProcessName), APDBDef.Project.FolderId.SetValue(data.FolderId), APDBDef.Project.Money.SetValue(data.Money), APDBDef.Project.CMoney.SetValue(data.CMoney));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Project data) {
                var query = APQuery.update(APDBDef.Project).values(APDBDef.Project.ProjectName.SetValue(data.ProjectName), APDBDef.Project.Description.SetValue(data.Description), APDBDef.Project.ProjectStatus.SetValue(data.ProjectStatus), APDBDef.Project.ProjectType.SetValue(data.ProjectType), APDBDef.Project.RateOfProgress.SetValue(data.RateOfProgress), APDBDef.Project.PMId.SetValue(data.PMId), APDBDef.Project.CreatorId.SetValue(data.CreatorId), APDBDef.Project.StartDate.SetValue(data.StartDate), APDBDef.Project.EndDate.SetValue(data.EndDate), APDBDef.Project.RealStartDate.SetValue(data.RealStartDate), APDBDef.Project.RealEndDate.SetValue(data.RealEndDate), APDBDef.Project.ProjectOwner.SetValue(data.ProjectOwner), APDBDef.Project.CreateDate.SetValue(data.CreateDate), APDBDef.Project.ModifyDate.SetValue(data.ModifyDate), APDBDef.Project.OrgId.SetValue(data.OrgId), APDBDef.Project.Code.SetValue(data.Code), APDBDef.Project.RealCode.SetValue(data.RealCode), APDBDef.Project.ReviewerId.SetValue(data.ReviewerId), APDBDef.Project.ProjectExecutor.SetValue(data.ProjectExecutor), APDBDef.Project.ManagerId.SetValue(data.ManagerId), APDBDef.Project.ProcessName.SetValue(data.ProcessName), APDBDef.Project.FolderId.SetValue(data.FolderId), APDBDef.Project.Money.SetValue(data.Money), APDBDef.Project.CMoney.SetValue(data.CMoney)).where((APDBDef.Project.ProjectId == data.ProjectId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid projectId, Object metadata) {
                var query = APQuery.update(APDBDef.Project).values(APSqlSetPhraseSelector.Select(APDBDef.Project, metadata)).where((APDBDef.Project.ProjectId == projectId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid projectId) {
                var query = APQuery.delete(APDBDef.Project).where((APDBDef.Project.ProjectId == projectId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Project).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Project.Asterisk.Count()).from(APDBDef.Project).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Project PrimaryGet(System.Guid projectId) {
                var query = APQuery.select(APDBDef.Project.Asterisk).from(APDBDef.Project).where((APDBDef.Project.ProjectId == projectId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Project.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Project> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Project.Asterisk).from(APDBDef.Project);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Project.ProjectId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Project.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Project> GetInitData() {
                return new List<Project>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Project> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Project data = list[i];
                    if ((PrimaryGet(data.ProjectId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 项目 Dal
        /// </summary>
        public partial class ProjectDal : ProjectDalBase {
            
            public ProjectDal() {
            }
            
            public ProjectDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 项目记录 DalBase
        /// </summary>
        public partial class ProjectRecordDalBase : APDal {
            
            public ProjectRecordDalBase() {
            }
            
            public ProjectRecordDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(ProjectRecord data) {
                var query = APQuery.insert(APDBDef.ProjectRecord).values(APDBDef.ProjectRecord.RecordId.SetValue(data.RecordId), APDBDef.ProjectRecord.ProjectName.SetValue(data.ProjectName), APDBDef.ProjectRecord.ProjectId.SetValue(data.ProjectId), APDBDef.ProjectRecord.Progress.SetValue(data.Progress), APDBDef.ProjectRecord.RecordDate.SetValue(data.RecordDate), APDBDef.ProjectRecord.ProcessName.SetValue(data.ProcessName), APDBDef.ProjectRecord.ProjectStatus.SetValue(data.ProjectStatus), APDBDef.ProjectRecord.ProjectType.SetValue(data.ProjectType), APDBDef.ProjectRecord.RateOfProgress.SetValue(data.RateOfProgress), APDBDef.ProjectRecord.PMId.SetValue(data.PMId), APDBDef.ProjectRecord.StartDate.SetValue(data.StartDate), APDBDef.ProjectRecord.EndDate.SetValue(data.EndDate), APDBDef.ProjectRecord.ProjectOwner.SetValue(data.ProjectOwner), APDBDef.ProjectRecord.RealCode.SetValue(data.RealCode), APDBDef.ProjectRecord.ReviewerId.SetValue(data.ReviewerId), APDBDef.ProjectRecord.ProjectExecutor.SetValue(data.ProjectExecutor), APDBDef.ProjectRecord.ManagerId.SetValue(data.ManagerId), APDBDef.ProjectRecord.Code.SetValue(data.Code), APDBDef.ProjectRecord.OperatorId.SetValue(data.OperatorId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(ProjectRecord data) {
                var query = APQuery.update(APDBDef.ProjectRecord).values(APDBDef.ProjectRecord.ProjectName.SetValue(data.ProjectName), APDBDef.ProjectRecord.ProjectId.SetValue(data.ProjectId), APDBDef.ProjectRecord.Progress.SetValue(data.Progress), APDBDef.ProjectRecord.RecordDate.SetValue(data.RecordDate), APDBDef.ProjectRecord.ProcessName.SetValue(data.ProcessName), APDBDef.ProjectRecord.ProjectStatus.SetValue(data.ProjectStatus), APDBDef.ProjectRecord.ProjectType.SetValue(data.ProjectType), APDBDef.ProjectRecord.RateOfProgress.SetValue(data.RateOfProgress), APDBDef.ProjectRecord.PMId.SetValue(data.PMId), APDBDef.ProjectRecord.StartDate.SetValue(data.StartDate), APDBDef.ProjectRecord.EndDate.SetValue(data.EndDate), APDBDef.ProjectRecord.ProjectOwner.SetValue(data.ProjectOwner), APDBDef.ProjectRecord.RealCode.SetValue(data.RealCode), APDBDef.ProjectRecord.ReviewerId.SetValue(data.ReviewerId), APDBDef.ProjectRecord.ProjectExecutor.SetValue(data.ProjectExecutor), APDBDef.ProjectRecord.ManagerId.SetValue(data.ManagerId), APDBDef.ProjectRecord.Code.SetValue(data.Code), APDBDef.ProjectRecord.OperatorId.SetValue(data.OperatorId)).where((APDBDef.ProjectRecord.RecordId == data.RecordId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid recordId, Object metadata) {
                var query = APQuery.update(APDBDef.ProjectRecord).values(APSqlSetPhraseSelector.Select(APDBDef.ProjectRecord, metadata)).where((APDBDef.ProjectRecord.RecordId == recordId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid recordId) {
                var query = APQuery.delete(APDBDef.ProjectRecord).where((APDBDef.ProjectRecord.RecordId == recordId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.ProjectRecord).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.ProjectRecord.Asterisk.Count()).from(APDBDef.ProjectRecord).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual ProjectRecord PrimaryGet(System.Guid recordId) {
                var query = APQuery.select(APDBDef.ProjectRecord.Asterisk).from(APDBDef.ProjectRecord).where((APDBDef.ProjectRecord.RecordId == recordId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.ProjectRecord.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<ProjectRecord> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.ProjectRecord.Asterisk).from(APDBDef.ProjectRecord);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.ProjectRecord.RecordId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.ProjectRecord.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<ProjectRecord> GetInitData() {
                return new List<ProjectRecord>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<ProjectRecord> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    ProjectRecord data = list[i];
                    if ((PrimaryGet(data.RecordId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 项目记录 Dal
        /// </summary>
        public partial class ProjectRecordDal : ProjectRecordDalBase {
            
            public ProjectRecordDal() {
            }
            
            public ProjectRecordDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 项目角色 DalBase
        /// </summary>
        public partial class ProjectRoleDalBase : APDal {
            
            public ProjectRoleDalBase() {
            }
            
            public ProjectRoleDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(ProjectRole data) {
                var query = APQuery.insert(APDBDef.ProjectRole).values(APDBDef.ProjectRole.PRID.SetValue(data.PRID), APDBDef.ProjectRole.ProjectId.SetValue(data.ProjectId), APDBDef.ProjectRole.RoleId.SetValue(data.RoleId), APDBDef.ProjectRole.IsDefault.SetValue(data.IsDefault), APDBDef.ProjectRole.AppIds.SetValue(data.AppIds));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(ProjectRole data) {
                var query = APQuery.update(APDBDef.ProjectRole).values(APDBDef.ProjectRole.ProjectId.SetValue(data.ProjectId), APDBDef.ProjectRole.RoleId.SetValue(data.RoleId), APDBDef.ProjectRole.IsDefault.SetValue(data.IsDefault), APDBDef.ProjectRole.AppIds.SetValue(data.AppIds)).where((APDBDef.ProjectRole.PRID == data.PRID));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid pRID, Object metadata) {
                var query = APQuery.update(APDBDef.ProjectRole).values(APSqlSetPhraseSelector.Select(APDBDef.ProjectRole, metadata)).where((APDBDef.ProjectRole.PRID == pRID));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid pRID) {
                var query = APQuery.delete(APDBDef.ProjectRole).where((APDBDef.ProjectRole.PRID == pRID));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.ProjectRole).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.ProjectRole.Asterisk.Count()).from(APDBDef.ProjectRole).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual ProjectRole PrimaryGet(System.Guid pRID) {
                var query = APQuery.select(APDBDef.ProjectRole.Asterisk).from(APDBDef.ProjectRole).where((APDBDef.ProjectRole.PRID == pRID));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.ProjectRole.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<ProjectRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.ProjectRole.Asterisk).from(APDBDef.ProjectRole);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.ProjectRole.PRID);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.ProjectRole.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<ProjectRole> GetInitData() {
                return new List<ProjectRole>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<ProjectRole> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    ProjectRole data = list[i];
                    if ((PrimaryGet(data.PRID) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 项目角色 Dal
        /// </summary>
        public partial class ProjectRoleDal : ProjectRoleDalBase {
            
            public ProjectRoleDal() {
            }
            
            public ProjectRoleDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 项目资源 DalBase
        /// </summary>
        public partial class ResourceDalBase : APDal {
            
            public ResourceDalBase() {
            }
            
            public ResourceDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Resource data) {
                var query = APQuery.insert(APDBDef.Resource).values(APDBDef.Resource.ResourceId.SetValue(data.ResourceId), APDBDef.Resource.UserId.SetValue(data.UserId), APDBDef.Resource.Projectid.SetValue(data.Projectid), APDBDef.Resource.TaskId.SetValue(data.TaskId), APDBDef.Resource.ResourceName.SetValue(data.ResourceName), APDBDef.Resource.ResourceTypes.SetValue(data.ResourceTypes), APDBDef.Resource.Description.SetValue(data.Description), APDBDef.Resource.CreateDate.SetValue(data.CreateDate), APDBDef.Resource.ModifyDate.SetValue(data.ModifyDate), APDBDef.Resource.Status.SetValue(data.Status));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Resource data) {
                var query = APQuery.update(APDBDef.Resource).values(APDBDef.Resource.UserId.SetValue(data.UserId), APDBDef.Resource.Projectid.SetValue(data.Projectid), APDBDef.Resource.TaskId.SetValue(data.TaskId), APDBDef.Resource.ResourceName.SetValue(data.ResourceName), APDBDef.Resource.ResourceTypes.SetValue(data.ResourceTypes), APDBDef.Resource.Description.SetValue(data.Description), APDBDef.Resource.CreateDate.SetValue(data.CreateDate), APDBDef.Resource.ModifyDate.SetValue(data.ModifyDate), APDBDef.Resource.Status.SetValue(data.Status)).where((APDBDef.Resource.ResourceId == data.ResourceId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid resourceId, Object metadata) {
                var query = APQuery.update(APDBDef.Resource).values(APSqlSetPhraseSelector.Select(APDBDef.Resource, metadata)).where((APDBDef.Resource.ResourceId == resourceId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid resourceId) {
                var query = APQuery.delete(APDBDef.Resource).where((APDBDef.Resource.ResourceId == resourceId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Resource).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Resource.Asterisk.Count()).from(APDBDef.Resource).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Resource PrimaryGet(System.Guid resourceId) {
                var query = APQuery.select(APDBDef.Resource.Asterisk).from(APDBDef.Resource).where((APDBDef.Resource.ResourceId == resourceId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Resource.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Resource> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Resource.Asterisk).from(APDBDef.Resource);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Resource.ResourceId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Resource.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Resource> GetInitData() {
                return new List<Resource>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Resource> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Resource data = list[i];
                    if ((PrimaryGet(data.ResourceId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 项目资源 Dal
        /// </summary>
        public partial class ResourceDal : ResourceDalBase {
            
            public ResourceDal() {
            }
            
            public ResourceDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 款项 DalBase
        /// </summary>
        public partial class PaymentsDalBase : APDal {
            
            public PaymentsDalBase() {
            }
            
            public PaymentsDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Payments data) {
                var query = APQuery.insert(APDBDef.Payments).values(APDBDef.Payments.PayId.SetValue(data.PayId), APDBDef.Payments.PayName.SetValue(data.PayName), APDBDef.Payments.ProjectId.SetValue(data.ProjectId), APDBDef.Payments.Money.SetValue(data.Money), APDBDef.Payments.RateOfProgress.SetValue(data.RateOfProgress), APDBDef.Payments.InvoiceDate.SetValue(data.InvoiceDate), APDBDef.Payments.PayDate.SetValue(data.PayDate), APDBDef.Payments.PayType.SetValue(data.PayType), APDBDef.Payments.ResourceId.SetValue(data.ResourceId), APDBDef.Payments.Sort.SetValue(data.Sort), APDBDef.Payments.IsConfirm.SetValue(data.IsConfirm), APDBDef.Payments.ParentId.SetValue(data.ParentId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Payments data) {
                var query = APQuery.update(APDBDef.Payments).values(APDBDef.Payments.PayName.SetValue(data.PayName), APDBDef.Payments.ProjectId.SetValue(data.ProjectId), APDBDef.Payments.Money.SetValue(data.Money), APDBDef.Payments.RateOfProgress.SetValue(data.RateOfProgress), APDBDef.Payments.InvoiceDate.SetValue(data.InvoiceDate), APDBDef.Payments.PayDate.SetValue(data.PayDate), APDBDef.Payments.PayType.SetValue(data.PayType), APDBDef.Payments.ResourceId.SetValue(data.ResourceId), APDBDef.Payments.Sort.SetValue(data.Sort), APDBDef.Payments.IsConfirm.SetValue(data.IsConfirm), APDBDef.Payments.ParentId.SetValue(data.ParentId)).where((APDBDef.Payments.PayId == data.PayId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid payId, Object metadata) {
                var query = APQuery.update(APDBDef.Payments).values(APSqlSetPhraseSelector.Select(APDBDef.Payments, metadata)).where((APDBDef.Payments.PayId == payId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid payId) {
                var query = APQuery.delete(APDBDef.Payments).where((APDBDef.Payments.PayId == payId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Payments).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Payments.Asterisk.Count()).from(APDBDef.Payments).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Payments PrimaryGet(System.Guid payId) {
                var query = APQuery.select(APDBDef.Payments.Asterisk).from(APDBDef.Payments).where((APDBDef.Payments.PayId == payId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Payments.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Payments> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Payments.Asterisk).from(APDBDef.Payments);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Payments.PayId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Payments.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Payments> GetInitData() {
                return new List<Payments>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Payments> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Payments data = list[i];
                    if ((PrimaryGet(data.PayId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 款项 Dal
        /// </summary>
        public partial class PaymentsDal : PaymentsDalBase {
            
            public PaymentsDal() {
            }
            
            public PaymentsDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        ///  DalBase
        /// </summary>
        public partial class MileStoneDalBase : APDal {
            
            public MileStoneDalBase() {
            }
            
            public MileStoneDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(MileStone data) {
                var query = APQuery.insert(APDBDef.MileStone).values(APDBDef.MileStone.StoneId.SetValue(data.StoneId), APDBDef.MileStone.StoneName.SetValue(data.StoneName), APDBDef.MileStone.StoneStatus.SetValue(data.StoneStatus), APDBDef.MileStone.StoneType.SetValue(data.StoneType), APDBDef.MileStone.Sort.SetValue(data.Sort));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(MileStone data) {
                var query = APQuery.update(APDBDef.MileStone).values(APDBDef.MileStone.StoneName.SetValue(data.StoneName), APDBDef.MileStone.StoneStatus.SetValue(data.StoneStatus), APDBDef.MileStone.StoneType.SetValue(data.StoneType), APDBDef.MileStone.Sort.SetValue(data.Sort)).where((APDBDef.MileStone.StoneId == data.StoneId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid stoneId, Object metadata) {
                var query = APQuery.update(APDBDef.MileStone).values(APSqlSetPhraseSelector.Select(APDBDef.MileStone, metadata)).where((APDBDef.MileStone.StoneId == stoneId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid stoneId) {
                var query = APQuery.delete(APDBDef.MileStone).where((APDBDef.MileStone.StoneId == stoneId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.MileStone).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.MileStone.Asterisk.Count()).from(APDBDef.MileStone).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual MileStone PrimaryGet(System.Guid stoneId) {
                var query = APQuery.select(APDBDef.MileStone.Asterisk).from(APDBDef.MileStone).where((APDBDef.MileStone.StoneId == stoneId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.MileStone.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<MileStone> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.MileStone.Asterisk).from(APDBDef.MileStone);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.MileStone.StoneId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.MileStone.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<MileStone> GetInitData() {
                return new List<MileStone>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<MileStone> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    MileStone data = list[i];
                    if ((PrimaryGet(data.StoneId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        ///  Dal
        /// </summary>
        public partial class MileStoneDal : MileStoneDalBase {
            
            public MileStoneDal() {
            }
            
            public MileStoneDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        ///  DalBase
        /// </summary>
        public partial class ProjectMileStoneDalBase : APDal {
            
            public ProjectMileStoneDalBase() {
            }
            
            public ProjectMileStoneDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(ProjectMileStone data) {
                var query = APQuery.insert(APDBDef.ProjectMileStone).values(APDBDef.ProjectMileStone.PmsId.SetValue(data.PmsId), APDBDef.ProjectMileStone.StoneId.SetValue(data.StoneId), APDBDef.ProjectMileStone.Projectid.SetValue(data.Projectid), APDBDef.ProjectMileStone.FolderId.SetValue(data.FolderId), APDBDef.ProjectMileStone.Content.SetValue(data.Content), APDBDef.ProjectMileStone.StartDate.SetValue(data.StartDate), APDBDef.ProjectMileStone.EndDate.SetValue(data.EndDate), APDBDef.ProjectMileStone.Status.SetValue(data.Status), APDBDef.ProjectMileStone.CreateDate.SetValue(data.CreateDate));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(ProjectMileStone data) {
                var query = APQuery.update(APDBDef.ProjectMileStone).values(APDBDef.ProjectMileStone.StoneId.SetValue(data.StoneId), APDBDef.ProjectMileStone.Projectid.SetValue(data.Projectid), APDBDef.ProjectMileStone.FolderId.SetValue(data.FolderId), APDBDef.ProjectMileStone.Content.SetValue(data.Content), APDBDef.ProjectMileStone.StartDate.SetValue(data.StartDate), APDBDef.ProjectMileStone.EndDate.SetValue(data.EndDate), APDBDef.ProjectMileStone.Status.SetValue(data.Status), APDBDef.ProjectMileStone.CreateDate.SetValue(data.CreateDate)).where((APDBDef.ProjectMileStone.PmsId == data.PmsId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid pmsId, Object metadata) {
                var query = APQuery.update(APDBDef.ProjectMileStone).values(APSqlSetPhraseSelector.Select(APDBDef.ProjectMileStone, metadata)).where((APDBDef.ProjectMileStone.PmsId == pmsId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid pmsId) {
                var query = APQuery.delete(APDBDef.ProjectMileStone).where((APDBDef.ProjectMileStone.PmsId == pmsId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.ProjectMileStone).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.ProjectMileStone.Asterisk.Count()).from(APDBDef.ProjectMileStone).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual ProjectMileStone PrimaryGet(System.Guid pmsId) {
                var query = APQuery.select(APDBDef.ProjectMileStone.Asterisk).from(APDBDef.ProjectMileStone).where((APDBDef.ProjectMileStone.PmsId == pmsId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.ProjectMileStone.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<ProjectMileStone> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.ProjectMileStone.Asterisk).from(APDBDef.ProjectMileStone);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.ProjectMileStone.PmsId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.ProjectMileStone.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<ProjectMileStone> GetInitData() {
                return new List<ProjectMileStone>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<ProjectMileStone> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    ProjectMileStone data = list[i];
                    if ((PrimaryGet(data.PmsId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        ///  Dal
        /// </summary>
        public partial class ProjectMileStoneDal : ProjectMileStoneDalBase {
            
            public ProjectMileStoneDal() {
            }
            
            public ProjectMileStoneDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        ///  DalBase
        /// </summary>
        public partial class ProjectStoneTaskDalBase : APDal {
            
            public ProjectStoneTaskDalBase() {
            }
            
            public ProjectStoneTaskDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(ProjectStoneTask data) {
                var query = APQuery.insert(APDBDef.ProjectStoneTask).values(APDBDef.ProjectStoneTask.PstId.SetValue(data.PstId), APDBDef.ProjectStoneTask.PmsId.SetValue(data.PmsId), APDBDef.ProjectStoneTask.ProjectId.SetValue(data.ProjectId), APDBDef.ProjectStoneTask.TaskName.SetValue(data.TaskName), APDBDef.ProjectStoneTask.StartDate.SetValue(data.StartDate), APDBDef.ProjectStoneTask.EndDate.SetValue(data.EndDate), APDBDef.ProjectStoneTask.RealStartDate.SetValue(data.RealStartDate), APDBDef.ProjectStoneTask.RealEndDate.SetValue(data.RealEndDate), APDBDef.ProjectStoneTask.TaskStatus.SetValue(data.TaskStatus), APDBDef.ProjectStoneTask.CreateDate.SetValue(data.CreateDate), APDBDef.ProjectStoneTask.TaskType.SetValue(data.TaskType), APDBDef.ProjectStoneTask.ManagerId.SetValue(data.ManagerId), APDBDef.ProjectStoneTask.ReviewerID.SetValue(data.ReviewerID), APDBDef.ProjectStoneTask.SortId.SetValue(data.SortId), APDBDef.ProjectStoneTask.UpgradeEndDate.SetValue(data.UpgradeEndDate));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(ProjectStoneTask data) {
                var query = APQuery.update(APDBDef.ProjectStoneTask).values(APDBDef.ProjectStoneTask.PmsId.SetValue(data.PmsId), APDBDef.ProjectStoneTask.ProjectId.SetValue(data.ProjectId), APDBDef.ProjectStoneTask.TaskName.SetValue(data.TaskName), APDBDef.ProjectStoneTask.StartDate.SetValue(data.StartDate), APDBDef.ProjectStoneTask.EndDate.SetValue(data.EndDate), APDBDef.ProjectStoneTask.RealStartDate.SetValue(data.RealStartDate), APDBDef.ProjectStoneTask.RealEndDate.SetValue(data.RealEndDate), APDBDef.ProjectStoneTask.TaskStatus.SetValue(data.TaskStatus), APDBDef.ProjectStoneTask.CreateDate.SetValue(data.CreateDate), APDBDef.ProjectStoneTask.TaskType.SetValue(data.TaskType), APDBDef.ProjectStoneTask.ManagerId.SetValue(data.ManagerId), APDBDef.ProjectStoneTask.ReviewerID.SetValue(data.ReviewerID), APDBDef.ProjectStoneTask.SortId.SetValue(data.SortId), APDBDef.ProjectStoneTask.UpgradeEndDate.SetValue(data.UpgradeEndDate)).where((APDBDef.ProjectStoneTask.PstId == data.PstId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid pstId, Object metadata) {
                var query = APQuery.update(APDBDef.ProjectStoneTask).values(APSqlSetPhraseSelector.Select(APDBDef.ProjectStoneTask, metadata)).where((APDBDef.ProjectStoneTask.PstId == pstId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid pstId) {
                var query = APQuery.delete(APDBDef.ProjectStoneTask).where((APDBDef.ProjectStoneTask.PstId == pstId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.ProjectStoneTask).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.ProjectStoneTask.Asterisk.Count()).from(APDBDef.ProjectStoneTask).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual ProjectStoneTask PrimaryGet(System.Guid pstId) {
                var query = APQuery.select(APDBDef.ProjectStoneTask.Asterisk).from(APDBDef.ProjectStoneTask).where((APDBDef.ProjectStoneTask.PstId == pstId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.ProjectStoneTask.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<ProjectStoneTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.ProjectStoneTask.Asterisk).from(APDBDef.ProjectStoneTask);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.ProjectStoneTask.PstId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.ProjectStoneTask.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<ProjectStoneTask> GetInitData() {
                return new List<ProjectStoneTask>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<ProjectStoneTask> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    ProjectStoneTask data = list[i];
                    if ((PrimaryGet(data.PstId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        ///  Dal
        /// </summary>
        public partial class ProjectStoneTaskDal : ProjectStoneTaskDalBase {
            
            public ProjectStoneTaskDal() {
            }
            
            public ProjectStoneTaskDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 工作任务 DalBase
        /// </summary>
        public partial class WorkTaskDalBase : APDal {
            
            public WorkTaskDalBase() {
            }
            
            public WorkTaskDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(WorkTask data) {
                var query = APQuery.insert(APDBDef.WorkTask).values(APDBDef.WorkTask.TaskId.SetValue(data.TaskId), APDBDef.WorkTask.Projectid.SetValue(data.Projectid), APDBDef.WorkTask.TaskName.SetValue(data.TaskName), APDBDef.WorkTask.Description.SetValue(data.Description), APDBDef.WorkTask.TaskType.SetValue(data.TaskType), APDBDef.WorkTask.TaskLevel.SetValue(data.TaskLevel), APDBDef.WorkTask.TaskStatus.SetValue(data.TaskStatus), APDBDef.WorkTask.RateOfProgress.SetValue(data.RateOfProgress), APDBDef.WorkTask.ParentId.SetValue(data.ParentId), APDBDef.WorkTask.WorkHours.SetValue(data.WorkHours), APDBDef.WorkTask.EstimateWorkHours.SetValue(data.EstimateWorkHours), APDBDef.WorkTask.ManagerId.SetValue(data.ManagerId), APDBDef.WorkTask.CreatorId.SetValue(data.CreatorId), APDBDef.WorkTask.ReviewerID.SetValue(data.ReviewerID), APDBDef.WorkTask.StartDate.SetValue(data.StartDate), APDBDef.WorkTask.EndDate.SetValue(data.EndDate), APDBDef.WorkTask.RealStartDate.SetValue(data.RealStartDate), APDBDef.WorkTask.RealEndDate.SetValue(data.RealEndDate), APDBDef.WorkTask.CreateDate.SetValue(data.CreateDate), APDBDef.WorkTask.ModifyDate.SetValue(data.ModifyDate), APDBDef.WorkTask.SortId.SetValue(data.SortId), APDBDef.WorkTask.IsParent.SetValue(data.IsParent), APDBDef.WorkTask.TaskFileType.SetValue(data.TaskFileType), APDBDef.WorkTask.ServiceCount.SetValue(data.ServiceCount), APDBDef.WorkTask.StandardItemId.SetValue(data.StandardItemId), APDBDef.WorkTask.SubTypeId.SetValue(data.SubTypeId), APDBDef.WorkTask.SubTypeValue.SetValue(data.SubTypeValue));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(WorkTask data) {
                var query = APQuery.update(APDBDef.WorkTask).values(APDBDef.WorkTask.Projectid.SetValue(data.Projectid), APDBDef.WorkTask.TaskName.SetValue(data.TaskName), APDBDef.WorkTask.Description.SetValue(data.Description), APDBDef.WorkTask.TaskType.SetValue(data.TaskType), APDBDef.WorkTask.TaskLevel.SetValue(data.TaskLevel), APDBDef.WorkTask.TaskStatus.SetValue(data.TaskStatus), APDBDef.WorkTask.RateOfProgress.SetValue(data.RateOfProgress), APDBDef.WorkTask.ParentId.SetValue(data.ParentId), APDBDef.WorkTask.WorkHours.SetValue(data.WorkHours), APDBDef.WorkTask.EstimateWorkHours.SetValue(data.EstimateWorkHours), APDBDef.WorkTask.ManagerId.SetValue(data.ManagerId), APDBDef.WorkTask.CreatorId.SetValue(data.CreatorId), APDBDef.WorkTask.ReviewerID.SetValue(data.ReviewerID), APDBDef.WorkTask.StartDate.SetValue(data.StartDate), APDBDef.WorkTask.EndDate.SetValue(data.EndDate), APDBDef.WorkTask.RealStartDate.SetValue(data.RealStartDate), APDBDef.WorkTask.RealEndDate.SetValue(data.RealEndDate), APDBDef.WorkTask.CreateDate.SetValue(data.CreateDate), APDBDef.WorkTask.ModifyDate.SetValue(data.ModifyDate), APDBDef.WorkTask.SortId.SetValue(data.SortId), APDBDef.WorkTask.IsParent.SetValue(data.IsParent), APDBDef.WorkTask.TaskFileType.SetValue(data.TaskFileType), APDBDef.WorkTask.ServiceCount.SetValue(data.ServiceCount), APDBDef.WorkTask.StandardItemId.SetValue(data.StandardItemId), APDBDef.WorkTask.SubTypeId.SetValue(data.SubTypeId), APDBDef.WorkTask.SubTypeValue.SetValue(data.SubTypeValue)).where((APDBDef.WorkTask.TaskId == data.TaskId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid taskId, Object metadata) {
                var query = APQuery.update(APDBDef.WorkTask).values(APSqlSetPhraseSelector.Select(APDBDef.WorkTask, metadata)).where((APDBDef.WorkTask.TaskId == taskId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid taskId) {
                var query = APQuery.delete(APDBDef.WorkTask).where((APDBDef.WorkTask.TaskId == taskId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.WorkTask).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.WorkTask.Asterisk.Count()).from(APDBDef.WorkTask).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual WorkTask PrimaryGet(System.Guid taskId) {
                var query = APQuery.select(APDBDef.WorkTask.Asterisk).from(APDBDef.WorkTask).where((APDBDef.WorkTask.TaskId == taskId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.WorkTask.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<WorkTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.WorkTask.Asterisk).from(APDBDef.WorkTask);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.WorkTask.TaskId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.WorkTask.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<WorkTask> GetInitData() {
                return new List<WorkTask>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<WorkTask> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    WorkTask data = list[i];
                    if ((PrimaryGet(data.TaskId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 工作任务 Dal
        /// </summary>
        public partial class WorkTaskDal : WorkTaskDalBase {
            
            public WorkTaskDal() {
            }
            
            public WorkTaskDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 任务记录 DalBase
        /// </summary>
        public partial class WorkTaskLogDalBase : APDal {
            
            public WorkTaskLogDalBase() {
            }
            
            public WorkTaskLogDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(WorkTaskLog data) {
                var query = APQuery.insert(APDBDef.WorkTaskLog).values(APDBDef.WorkTaskLog.LogID.SetValue(data.LogID), APDBDef.WorkTaskLog.TaskManagerId.SetValue(data.TaskManagerId), APDBDef.WorkTaskLog.ProjectId.SetValue(data.ProjectId), APDBDef.WorkTaskLog.TaskId.SetValue(data.TaskId), APDBDef.WorkTaskLog.StartDate.SetValue(data.StartDate), APDBDef.WorkTaskLog.EndDate.SetValue(data.EndDate), APDBDef.WorkTaskLog.CreateDate.SetValue(data.CreateDate), APDBDef.WorkTaskLog.EstimateWorkHours.SetValue(data.EstimateWorkHours), APDBDef.WorkTaskLog.TaskType.SetValue(data.TaskType), APDBDef.WorkTaskLog.TaskStatus.SetValue(data.TaskStatus), APDBDef.WorkTaskLog.RateOfProgress.SetValue(data.RateOfProgress), APDBDef.WorkTaskLog.ParentId.SetValue(data.ParentId), APDBDef.WorkTaskLog.WorkHours.SetValue(data.WorkHours), APDBDef.WorkTaskLog.ReviewerID.SetValue(data.ReviewerID), APDBDef.WorkTaskLog.OperatorId.SetValue(data.OperatorId), APDBDef.WorkTaskLog.TaskName.SetValue(data.TaskName), APDBDef.WorkTaskLog.ServiceCount.SetValue(data.ServiceCount));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(WorkTaskLog data) {
                var query = APQuery.update(APDBDef.WorkTaskLog).values(APDBDef.WorkTaskLog.TaskManagerId.SetValue(data.TaskManagerId), APDBDef.WorkTaskLog.ProjectId.SetValue(data.ProjectId), APDBDef.WorkTaskLog.TaskId.SetValue(data.TaskId), APDBDef.WorkTaskLog.StartDate.SetValue(data.StartDate), APDBDef.WorkTaskLog.EndDate.SetValue(data.EndDate), APDBDef.WorkTaskLog.CreateDate.SetValue(data.CreateDate), APDBDef.WorkTaskLog.EstimateWorkHours.SetValue(data.EstimateWorkHours), APDBDef.WorkTaskLog.TaskType.SetValue(data.TaskType), APDBDef.WorkTaskLog.TaskStatus.SetValue(data.TaskStatus), APDBDef.WorkTaskLog.RateOfProgress.SetValue(data.RateOfProgress), APDBDef.WorkTaskLog.ParentId.SetValue(data.ParentId), APDBDef.WorkTaskLog.WorkHours.SetValue(data.WorkHours), APDBDef.WorkTaskLog.ReviewerID.SetValue(data.ReviewerID), APDBDef.WorkTaskLog.OperatorId.SetValue(data.OperatorId), APDBDef.WorkTaskLog.TaskName.SetValue(data.TaskName), APDBDef.WorkTaskLog.ServiceCount.SetValue(data.ServiceCount)).where((APDBDef.WorkTaskLog.LogID == data.LogID));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid logID, Object metadata) {
                var query = APQuery.update(APDBDef.WorkTaskLog).values(APSqlSetPhraseSelector.Select(APDBDef.WorkTaskLog, metadata)).where((APDBDef.WorkTaskLog.LogID == logID));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid logID) {
                var query = APQuery.delete(APDBDef.WorkTaskLog).where((APDBDef.WorkTaskLog.LogID == logID));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.WorkTaskLog).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.WorkTaskLog.Asterisk.Count()).from(APDBDef.WorkTaskLog).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual WorkTaskLog PrimaryGet(System.Guid logID) {
                var query = APQuery.select(APDBDef.WorkTaskLog.Asterisk).from(APDBDef.WorkTaskLog).where((APDBDef.WorkTaskLog.LogID == logID));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.WorkTaskLog.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<WorkTaskLog> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.WorkTaskLog.Asterisk).from(APDBDef.WorkTaskLog);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.WorkTaskLog.LogID);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.WorkTaskLog.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<WorkTaskLog> GetInitData() {
                return new List<WorkTaskLog>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<WorkTaskLog> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    WorkTaskLog data = list[i];
                    if ((PrimaryGet(data.LogID) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 任务记录 Dal
        /// </summary>
        public partial class WorkTaskLogDal : WorkTaskLogDalBase {
            
            public WorkTaskLogDal() {
            }
            
            public WorkTaskLogDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 任务复杂度 DalBase
        /// </summary>
        public partial class WorkTaskComplextiyDalBase : APDal {
            
            public WorkTaskComplextiyDalBase() {
            }
            
            public WorkTaskComplextiyDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(WorkTaskComplextiy data) {
                var query = APQuery.insert(APDBDef.WorkTaskComplextiy).values(APDBDef.WorkTaskComplextiy.ComplextiyId.SetValue(data.ComplextiyId), APDBDef.WorkTaskComplextiy.TaskId.SetValue(data.TaskId), APDBDef.WorkTaskComplextiy.Complexity.SetValue(data.Complexity), APDBDef.WorkTaskComplextiy.CreatorId.SetValue(data.CreatorId), APDBDef.WorkTaskComplextiy.CreatorRoleId.SetValue(data.CreatorRoleId), APDBDef.WorkTaskComplextiy.CreateDate.SetValue(data.CreateDate), APDBDef.WorkTaskComplextiy.ModifyDate.SetValue(data.ModifyDate));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(WorkTaskComplextiy data) {
                var query = APQuery.update(APDBDef.WorkTaskComplextiy).values(APDBDef.WorkTaskComplextiy.TaskId.SetValue(data.TaskId), APDBDef.WorkTaskComplextiy.Complexity.SetValue(data.Complexity), APDBDef.WorkTaskComplextiy.CreatorId.SetValue(data.CreatorId), APDBDef.WorkTaskComplextiy.CreatorRoleId.SetValue(data.CreatorRoleId), APDBDef.WorkTaskComplextiy.CreateDate.SetValue(data.CreateDate), APDBDef.WorkTaskComplextiy.ModifyDate.SetValue(data.ModifyDate)).where((APDBDef.WorkTaskComplextiy.ComplextiyId == data.ComplextiyId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid complextiyId, Object metadata) {
                var query = APQuery.update(APDBDef.WorkTaskComplextiy).values(APSqlSetPhraseSelector.Select(APDBDef.WorkTaskComplextiy, metadata)).where((APDBDef.WorkTaskComplextiy.ComplextiyId == complextiyId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid complextiyId) {
                var query = APQuery.delete(APDBDef.WorkTaskComplextiy).where((APDBDef.WorkTaskComplextiy.ComplextiyId == complextiyId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.WorkTaskComplextiy).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.WorkTaskComplextiy.Asterisk.Count()).from(APDBDef.WorkTaskComplextiy).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual WorkTaskComplextiy PrimaryGet(System.Guid complextiyId) {
                var query = APQuery.select(APDBDef.WorkTaskComplextiy.Asterisk).from(APDBDef.WorkTaskComplextiy).where((APDBDef.WorkTaskComplextiy.ComplextiyId == complextiyId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.WorkTaskComplextiy.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<WorkTaskComplextiy> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.WorkTaskComplextiy.Asterisk).from(APDBDef.WorkTaskComplextiy);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.WorkTaskComplextiy.ComplextiyId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.WorkTaskComplextiy.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<WorkTaskComplextiy> GetInitData() {
                return new List<WorkTaskComplextiy>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<WorkTaskComplextiy> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    WorkTaskComplextiy data = list[i];
                    if ((PrimaryGet(data.ComplextiyId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 任务复杂度 Dal
        /// </summary>
        public partial class WorkTaskComplextiyDal : WorkTaskComplextiyDalBase {
            
            public WorkTaskComplextiyDal() {
            }
            
            public WorkTaskComplextiyDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 任务问题 DalBase
        /// </summary>
        public partial class WorkTaskIssueDalBase : APDal {
            
            public WorkTaskIssueDalBase() {
            }
            
            public WorkTaskIssueDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(WorkTaskIssue data) {
                var query = APQuery.insert(APDBDef.WorkTaskIssue).values(APDBDef.WorkTaskIssue.TaskIssueId.SetValue(data.TaskIssueId), APDBDef.WorkTaskIssue.TaskId.SetValue(data.TaskId), APDBDef.WorkTaskIssue.IssueId.SetValue(data.IssueId), APDBDef.WorkTaskIssue.Description.SetValue(data.Description), APDBDef.WorkTaskIssue.CreateDate.SetValue(data.CreateDate), APDBDef.WorkTaskIssue.ModifyDate.SetValue(data.ModifyDate));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(WorkTaskIssue data) {
                var query = APQuery.update(APDBDef.WorkTaskIssue).values(APDBDef.WorkTaskIssue.TaskId.SetValue(data.TaskId), APDBDef.WorkTaskIssue.IssueId.SetValue(data.IssueId), APDBDef.WorkTaskIssue.Description.SetValue(data.Description), APDBDef.WorkTaskIssue.CreateDate.SetValue(data.CreateDate), APDBDef.WorkTaskIssue.ModifyDate.SetValue(data.ModifyDate)).where((APDBDef.WorkTaskIssue.TaskIssueId == data.TaskIssueId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid taskIssueId, Object metadata) {
                var query = APQuery.update(APDBDef.WorkTaskIssue).values(APSqlSetPhraseSelector.Select(APDBDef.WorkTaskIssue, metadata)).where((APDBDef.WorkTaskIssue.TaskIssueId == taskIssueId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid taskIssueId) {
                var query = APQuery.delete(APDBDef.WorkTaskIssue).where((APDBDef.WorkTaskIssue.TaskIssueId == taskIssueId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.WorkTaskIssue).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.WorkTaskIssue.Asterisk.Count()).from(APDBDef.WorkTaskIssue).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual WorkTaskIssue PrimaryGet(System.Guid taskIssueId) {
                var query = APQuery.select(APDBDef.WorkTaskIssue.Asterisk).from(APDBDef.WorkTaskIssue).where((APDBDef.WorkTaskIssue.TaskIssueId == taskIssueId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.WorkTaskIssue.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<WorkTaskIssue> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.WorkTaskIssue.Asterisk).from(APDBDef.WorkTaskIssue);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.WorkTaskIssue.TaskIssueId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.WorkTaskIssue.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<WorkTaskIssue> GetInitData() {
                return new List<WorkTaskIssue>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<WorkTaskIssue> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    WorkTaskIssue data = list[i];
                    if ((PrimaryGet(data.TaskIssueId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 任务问题 Dal
        /// </summary>
        public partial class WorkTaskIssueDal : WorkTaskIssueDalBase {
            
            public WorkTaskIssueDal() {
            }
            
            public WorkTaskIssueDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 任务复杂度调整角色权重，(例如项目经理-调整某个复杂度为50%的占比，所有角色占比和为100%)，注意如果是标准复杂度，角色为空 DalBase
        /// </summary>
        public partial class TaskCompelxtiyRoleDalBase : APDal {
            
            public TaskCompelxtiyRoleDalBase() {
            }
            
            public TaskCompelxtiyRoleDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(TaskCompelxtiyRole data) {
                var query = APQuery.insert(APDBDef.TaskCompelxtiyRole).values(APDBDef.TaskCompelxtiyRole.CompelxtiyRoleId.SetValue(data.CompelxtiyRoleId), APDBDef.TaskCompelxtiyRole.RoleId.SetValue(data.RoleId), APDBDef.TaskCompelxtiyRole.Propertion.SetValue(data.Propertion), APDBDef.TaskCompelxtiyRole.IsStandard.SetValue(data.IsStandard));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(TaskCompelxtiyRole data) {
                var query = APQuery.update(APDBDef.TaskCompelxtiyRole).values(APDBDef.TaskCompelxtiyRole.RoleId.SetValue(data.RoleId), APDBDef.TaskCompelxtiyRole.Propertion.SetValue(data.Propertion), APDBDef.TaskCompelxtiyRole.IsStandard.SetValue(data.IsStandard)).where((APDBDef.TaskCompelxtiyRole.CompelxtiyRoleId == data.CompelxtiyRoleId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid compelxtiyRoleId, Object metadata) {
                var query = APQuery.update(APDBDef.TaskCompelxtiyRole).values(APSqlSetPhraseSelector.Select(APDBDef.TaskCompelxtiyRole, metadata)).where((APDBDef.TaskCompelxtiyRole.CompelxtiyRoleId == compelxtiyRoleId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid compelxtiyRoleId) {
                var query = APQuery.delete(APDBDef.TaskCompelxtiyRole).where((APDBDef.TaskCompelxtiyRole.CompelxtiyRoleId == compelxtiyRoleId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.TaskCompelxtiyRole).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.TaskCompelxtiyRole.Asterisk.Count()).from(APDBDef.TaskCompelxtiyRole).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual TaskCompelxtiyRole PrimaryGet(System.Guid compelxtiyRoleId) {
                var query = APQuery.select(APDBDef.TaskCompelxtiyRole.Asterisk).from(APDBDef.TaskCompelxtiyRole).where((APDBDef.TaskCompelxtiyRole.CompelxtiyRoleId == compelxtiyRoleId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.TaskCompelxtiyRole.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<TaskCompelxtiyRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.TaskCompelxtiyRole.Asterisk).from(APDBDef.TaskCompelxtiyRole);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.TaskCompelxtiyRole.CompelxtiyRoleId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.TaskCompelxtiyRole.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<TaskCompelxtiyRole> GetInitData() {
                return new List<TaskCompelxtiyRole>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<TaskCompelxtiyRole> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    TaskCompelxtiyRole data = list[i];
                    if ((PrimaryGet(data.CompelxtiyRoleId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 任务复杂度调整角色权重，(例如项目经理-调整某个复杂度为50%的占比，所有角色占比和为100%)，注意如果是标准复杂度，角色为空 Dal
        /// </summary>
        public partial class TaskCompelxtiyRoleDal : TaskCompelxtiyRoleDalBase {
            
            public TaskCompelxtiyRoleDal() {
            }
            
            public TaskCompelxtiyRoleDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 任务标准项（包含标准复杂度和标准工时） DalBase
        /// </summary>
        public partial class TaskStandardItemDalBase : APDal {
            
            public TaskStandardItemDalBase() {
            }
            
            public TaskStandardItemDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(TaskStandardItem data) {
                var query = APQuery.insert(APDBDef.TaskStandardItem).values(APDBDef.TaskStandardItem.ItemId.SetValue(data.ItemId), APDBDef.TaskStandardItem.ItemName.SetValue(data.ItemName), APDBDef.TaskStandardItem.ItemDescription.SetValue(data.ItemDescription), APDBDef.TaskStandardItem.StandardComplextiy.SetValue(data.StandardComplextiy), APDBDef.TaskStandardItem.StandardWorkhours.SetValue(data.StandardWorkhours), APDBDef.TaskStandardItem.SortId.SetValue(data.SortId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(TaskStandardItem data) {
                var query = APQuery.update(APDBDef.TaskStandardItem).values(APDBDef.TaskStandardItem.ItemName.SetValue(data.ItemName), APDBDef.TaskStandardItem.ItemDescription.SetValue(data.ItemDescription), APDBDef.TaskStandardItem.StandardComplextiy.SetValue(data.StandardComplextiy), APDBDef.TaskStandardItem.StandardWorkhours.SetValue(data.StandardWorkhours), APDBDef.TaskStandardItem.SortId.SetValue(data.SortId)).where((APDBDef.TaskStandardItem.ItemId == data.ItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid itemId, Object metadata) {
                var query = APQuery.update(APDBDef.TaskStandardItem).values(APSqlSetPhraseSelector.Select(APDBDef.TaskStandardItem, metadata)).where((APDBDef.TaskStandardItem.ItemId == itemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid itemId) {
                var query = APQuery.delete(APDBDef.TaskStandardItem).where((APDBDef.TaskStandardItem.ItemId == itemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.TaskStandardItem).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.TaskStandardItem.Asterisk.Count()).from(APDBDef.TaskStandardItem).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual TaskStandardItem PrimaryGet(System.Guid itemId) {
                var query = APQuery.select(APDBDef.TaskStandardItem.Asterisk).from(APDBDef.TaskStandardItem).where((APDBDef.TaskStandardItem.ItemId == itemId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.TaskStandardItem.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<TaskStandardItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.TaskStandardItem.Asterisk).from(APDBDef.TaskStandardItem);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.TaskStandardItem.ItemId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.TaskStandardItem.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<TaskStandardItem> GetInitData() {
                return new List<TaskStandardItem>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<TaskStandardItem> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    TaskStandardItem data = list[i];
                    if ((PrimaryGet(data.ItemId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 任务标准项（包含标准复杂度和标准工时） Dal
        /// </summary>
        public partial class TaskStandardItemDal : TaskStandardItemDalBase {
            
            public TaskStandardItemDal() {
            }
            
            public TaskStandardItemDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 问题项 DalBase
        /// </summary>
        public partial class IssueItemDalBase : APDal {
            
            public IssueItemDalBase() {
            }
            
            public IssueItemDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(IssueItem data) {
                var query = APQuery.insert(APDBDef.IssueItem).values(APDBDef.IssueItem.ItemId.SetValue(data.ItemId), APDBDef.IssueItem.ItemName.SetValue(data.ItemName), APDBDef.IssueItem.Issuelevel.SetValue(data.Issuelevel), APDBDef.IssueItem.IssueDescription.SetValue(data.IssueDescription));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(IssueItem data) {
                var query = APQuery.update(APDBDef.IssueItem).values(APDBDef.IssueItem.ItemName.SetValue(data.ItemName), APDBDef.IssueItem.Issuelevel.SetValue(data.Issuelevel), APDBDef.IssueItem.IssueDescription.SetValue(data.IssueDescription)).where((APDBDef.IssueItem.ItemId == data.ItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid itemId, Object metadata) {
                var query = APQuery.update(APDBDef.IssueItem).values(APSqlSetPhraseSelector.Select(APDBDef.IssueItem, metadata)).where((APDBDef.IssueItem.ItemId == itemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid itemId) {
                var query = APQuery.delete(APDBDef.IssueItem).where((APDBDef.IssueItem.ItemId == itemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.IssueItem).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.IssueItem.Asterisk.Count()).from(APDBDef.IssueItem).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual IssueItem PrimaryGet(System.Guid itemId) {
                var query = APQuery.select(APDBDef.IssueItem.Asterisk).from(APDBDef.IssueItem).where((APDBDef.IssueItem.ItemId == itemId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.IssueItem.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<IssueItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.IssueItem.Asterisk).from(APDBDef.IssueItem);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.IssueItem.ItemId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.IssueItem.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<IssueItem> GetInitData() {
                return new List<IssueItem>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<IssueItem> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    IssueItem data = list[i];
                    if ((PrimaryGet(data.ItemId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 问题项 Dal
        /// </summary>
        public partial class IssueItemDal : IssueItemDalBase {
            
            public IssueItemDal() {
            }
            
            public IssueItemDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 工作日志 DalBase
        /// </summary>
        public partial class WorkJournalDalBase : APDal {
            
            public WorkJournalDalBase() {
            }
            
            public WorkJournalDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(WorkJournal data) {
                var query = APQuery.insert(APDBDef.WorkJournal).values(APDBDef.WorkJournal.JournalId.SetValue(data.JournalId), APDBDef.WorkJournal.UserId.SetValue(data.UserId), APDBDef.WorkJournal.Projectid.SetValue(data.Projectid), APDBDef.WorkJournal.TaskId.SetValue(data.TaskId), APDBDef.WorkJournal.Progress.SetValue(data.Progress), APDBDef.WorkJournal.WorkHours.SetValue(data.WorkHours), APDBDef.WorkJournal.RecordDate.SetValue(data.RecordDate), APDBDef.WorkJournal.CreateDate.SetValue(data.CreateDate), APDBDef.WorkJournal.ModifyDate.SetValue(data.ModifyDate), APDBDef.WorkJournal.Comment.SetValue(data.Comment), APDBDef.WorkJournal.Status.SetValue(data.Status), APDBDef.WorkJournal.AttachmentId.SetValue(data.AttachmentId), APDBDef.WorkJournal.RecordType.SetValue(data.RecordType), APDBDef.WorkJournal.TaskEstimateWorkHours.SetValue(data.TaskEstimateWorkHours), APDBDef.WorkJournal.ServiceCount.SetValue(data.ServiceCount), APDBDef.WorkJournal.TaskType.SetValue(data.TaskType), APDBDef.WorkJournal.TaskStatus.SetValue(data.TaskStatus), APDBDef.WorkJournal.TaskSubType.SetValue(data.TaskSubType), APDBDef.WorkJournal.TaskSubTypeValue.SetValue(data.TaskSubTypeValue));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(WorkJournal data) {
                var query = APQuery.update(APDBDef.WorkJournal).values(APDBDef.WorkJournal.UserId.SetValue(data.UserId), APDBDef.WorkJournal.Projectid.SetValue(data.Projectid), APDBDef.WorkJournal.TaskId.SetValue(data.TaskId), APDBDef.WorkJournal.Progress.SetValue(data.Progress), APDBDef.WorkJournal.WorkHours.SetValue(data.WorkHours), APDBDef.WorkJournal.RecordDate.SetValue(data.RecordDate), APDBDef.WorkJournal.CreateDate.SetValue(data.CreateDate), APDBDef.WorkJournal.ModifyDate.SetValue(data.ModifyDate), APDBDef.WorkJournal.Comment.SetValue(data.Comment), APDBDef.WorkJournal.Status.SetValue(data.Status), APDBDef.WorkJournal.AttachmentId.SetValue(data.AttachmentId), APDBDef.WorkJournal.RecordType.SetValue(data.RecordType), APDBDef.WorkJournal.TaskEstimateWorkHours.SetValue(data.TaskEstimateWorkHours), APDBDef.WorkJournal.ServiceCount.SetValue(data.ServiceCount), APDBDef.WorkJournal.TaskType.SetValue(data.TaskType), APDBDef.WorkJournal.TaskStatus.SetValue(data.TaskStatus), APDBDef.WorkJournal.TaskSubType.SetValue(data.TaskSubType), APDBDef.WorkJournal.TaskSubTypeValue.SetValue(data.TaskSubTypeValue)).where((APDBDef.WorkJournal.JournalId == data.JournalId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid journalId, Object metadata) {
                var query = APQuery.update(APDBDef.WorkJournal).values(APSqlSetPhraseSelector.Select(APDBDef.WorkJournal, metadata)).where((APDBDef.WorkJournal.JournalId == journalId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid journalId) {
                var query = APQuery.delete(APDBDef.WorkJournal).where((APDBDef.WorkJournal.JournalId == journalId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.WorkJournal).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.WorkJournal.Asterisk.Count()).from(APDBDef.WorkJournal).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual WorkJournal PrimaryGet(System.Guid journalId) {
                var query = APQuery.select(APDBDef.WorkJournal.Asterisk).from(APDBDef.WorkJournal).where((APDBDef.WorkJournal.JournalId == journalId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.WorkJournal.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<WorkJournal> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.WorkJournal.Asterisk).from(APDBDef.WorkJournal);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.WorkJournal.JournalId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.WorkJournal.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<WorkJournal> GetInitData() {
                return new List<WorkJournal>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<WorkJournal> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    WorkJournal data = list[i];
                    if ((PrimaryGet(data.JournalId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 工作日志 Dal
        /// </summary>
        public partial class WorkJournalDal : WorkJournalDalBase {
            
            public WorkJournalDal() {
            }
            
            public WorkJournalDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 文件 DalBase
        /// </summary>
        public partial class AttachmentDalBase : APDal {
            
            public AttachmentDalBase() {
            }
            
            public AttachmentDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Attachment data) {
                var query = APQuery.insert(APDBDef.Attachment).values(APDBDef.Attachment.AttachmentId.SetValue(data.AttachmentId), APDBDef.Attachment.Projectid.SetValue(data.Projectid), APDBDef.Attachment.TaskId.SetValue(data.TaskId), APDBDef.Attachment.CategoryId.SetValue(data.CategoryId), APDBDef.Attachment.RealName.SetValue(data.RealName), APDBDef.Attachment.Url.SetValue(data.Url), APDBDef.Attachment.FileExtName.SetValue(data.FileExtName), APDBDef.Attachment.UploadDate.SetValue(data.UploadDate), APDBDef.Attachment.PublishUserId.SetValue(data.PublishUserId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Attachment data) {
                var query = APQuery.update(APDBDef.Attachment).values(APDBDef.Attachment.Projectid.SetValue(data.Projectid), APDBDef.Attachment.TaskId.SetValue(data.TaskId), APDBDef.Attachment.CategoryId.SetValue(data.CategoryId), APDBDef.Attachment.RealName.SetValue(data.RealName), APDBDef.Attachment.Url.SetValue(data.Url), APDBDef.Attachment.FileExtName.SetValue(data.FileExtName), APDBDef.Attachment.UploadDate.SetValue(data.UploadDate), APDBDef.Attachment.PublishUserId.SetValue(data.PublishUserId)).where((APDBDef.Attachment.AttachmentId == data.AttachmentId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid attachmentId, Object metadata) {
                var query = APQuery.update(APDBDef.Attachment).values(APSqlSetPhraseSelector.Select(APDBDef.Attachment, metadata)).where((APDBDef.Attachment.AttachmentId == attachmentId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid attachmentId) {
                var query = APQuery.delete(APDBDef.Attachment).where((APDBDef.Attachment.AttachmentId == attachmentId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Attachment).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Attachment.Asterisk.Count()).from(APDBDef.Attachment).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Attachment PrimaryGet(System.Guid attachmentId) {
                var query = APQuery.select(APDBDef.Attachment.Asterisk).from(APDBDef.Attachment).where((APDBDef.Attachment.AttachmentId == attachmentId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Attachment.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Attachment> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Attachment.Asterisk).from(APDBDef.Attachment);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Attachment.AttachmentId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Attachment.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Attachment> GetInitData() {
                return new List<Attachment>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Attachment> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Attachment data = list[i];
                    if ((PrimaryGet(data.AttachmentId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 文件 Dal
        /// </summary>
        public partial class AttachmentDal : AttachmentDalBase {
            
            public AttachmentDal() {
            }
            
            public AttachmentDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 字典 DalBase
        /// </summary>
        public partial class DictionaryDalBase : APDal {
            
            public DictionaryDalBase() {
            }
            
            public DictionaryDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Dictionary data) {
                var query = APQuery.insert(APDBDef.Dictionary).values(APDBDef.Dictionary.ID.SetValue(data.ID), APDBDef.Dictionary.ParentID.SetValue(data.ParentID), APDBDef.Dictionary.Title.SetValue(data.Title), APDBDef.Dictionary.Code.SetValue(data.Code), APDBDef.Dictionary.Value.SetValue(data.Value), APDBDef.Dictionary.Note.SetValue(data.Note), APDBDef.Dictionary.Other.SetValue(data.Other), APDBDef.Dictionary.Sort.SetValue(data.Sort));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Dictionary data) {
                var query = APQuery.update(APDBDef.Dictionary).values(APDBDef.Dictionary.ParentID.SetValue(data.ParentID), APDBDef.Dictionary.Title.SetValue(data.Title), APDBDef.Dictionary.Code.SetValue(data.Code), APDBDef.Dictionary.Value.SetValue(data.Value), APDBDef.Dictionary.Note.SetValue(data.Note), APDBDef.Dictionary.Other.SetValue(data.Other), APDBDef.Dictionary.Sort.SetValue(data.Sort)).where((APDBDef.Dictionary.ID == data.ID));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid iD, Object metadata) {
                var query = APQuery.update(APDBDef.Dictionary).values(APSqlSetPhraseSelector.Select(APDBDef.Dictionary, metadata)).where((APDBDef.Dictionary.ID == iD));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid iD) {
                var query = APQuery.delete(APDBDef.Dictionary).where((APDBDef.Dictionary.ID == iD));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Dictionary).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Dictionary.Asterisk.Count()).from(APDBDef.Dictionary).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Dictionary PrimaryGet(System.Guid iD) {
                var query = APQuery.select(APDBDef.Dictionary.Asterisk).from(APDBDef.Dictionary).where((APDBDef.Dictionary.ID == iD));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Dictionary.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Dictionary> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Dictionary.Asterisk).from(APDBDef.Dictionary);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Dictionary.ID);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Dictionary.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Dictionary> GetInitData() {
                return new List<Dictionary>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Dictionary> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Dictionary data = list[i];
                    if ((PrimaryGet(data.ID) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 字典 Dal
        /// </summary>
        public partial class DictionaryDal : DictionaryDalBase {
            
            public DictionaryDal() {
            }
            
            public DictionaryDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        ///  DalBase
        /// </summary>
        public partial class ReviewDalBase : APDal {
            
            public ReviewDalBase() {
            }
            
            public ReviewDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Review data) {
                var query = APQuery.insert(APDBDef.Review).values(APDBDef.Review.ReviewId.SetValue(data.ReviewId), APDBDef.Review.SenderID.SetValue(data.SenderID), APDBDef.Review.ReceiverID.SetValue(data.ReceiverID), APDBDef.Review.TaskId.SetValue(data.TaskId), APDBDef.Review.ProjectId.SetValue(data.ProjectId), APDBDef.Review.ReviewType.SetValue(data.ReviewType), APDBDef.Review.Result.SetValue(data.Result), APDBDef.Review.SendDate.SetValue(data.SendDate), APDBDef.Review.ReviewDate.SetValue(data.ReviewDate), APDBDef.Review.AttachmentUrl.SetValue(data.AttachmentUrl), APDBDef.Review.Comment.SetValue(data.Comment), APDBDef.Review.Title.SetValue(data.Title), APDBDef.Review.ReviewComment.SetValue(data.ReviewComment));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Review data) {
                var query = APQuery.update(APDBDef.Review).values(APDBDef.Review.SenderID.SetValue(data.SenderID), APDBDef.Review.ReceiverID.SetValue(data.ReceiverID), APDBDef.Review.TaskId.SetValue(data.TaskId), APDBDef.Review.ProjectId.SetValue(data.ProjectId), APDBDef.Review.ReviewType.SetValue(data.ReviewType), APDBDef.Review.Result.SetValue(data.Result), APDBDef.Review.SendDate.SetValue(data.SendDate), APDBDef.Review.ReviewDate.SetValue(data.ReviewDate), APDBDef.Review.AttachmentUrl.SetValue(data.AttachmentUrl), APDBDef.Review.Comment.SetValue(data.Comment), APDBDef.Review.Title.SetValue(data.Title), APDBDef.Review.ReviewComment.SetValue(data.ReviewComment)).where((APDBDef.Review.ReviewId == data.ReviewId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid reviewId, Object metadata) {
                var query = APQuery.update(APDBDef.Review).values(APSqlSetPhraseSelector.Select(APDBDef.Review, metadata)).where((APDBDef.Review.ReviewId == reviewId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid reviewId) {
                var query = APQuery.delete(APDBDef.Review).where((APDBDef.Review.ReviewId == reviewId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Review).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Review.Asterisk.Count()).from(APDBDef.Review).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Review PrimaryGet(System.Guid reviewId) {
                var query = APQuery.select(APDBDef.Review.Asterisk).from(APDBDef.Review).where((APDBDef.Review.ReviewId == reviewId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Review.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Review> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Review.Asterisk).from(APDBDef.Review);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Review.ReviewId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Review.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Review> GetInitData() {
                return new List<Review>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Review> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Review data = list[i];
                    if ((PrimaryGet(data.ReviewId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        ///  Dal
        /// </summary>
        public partial class ReviewDal : ReviewDalBase {
            
            public ReviewDal() {
            }
            
            public ReviewDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 流程任务（专属于第三方工作流） DalBase
        /// </summary>
        public partial class WorkflowTaskDalBase : APDal {
            
            public WorkflowTaskDalBase() {
            }
            
            public WorkflowTaskDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(WorkflowTask data) {
                var query = APQuery.insert(APDBDef.WorkflowTask).values(APDBDef.WorkflowTask.TaskId.SetValue(data.TaskId), APDBDef.WorkflowTask.PrevID.SetValue(data.PrevID), APDBDef.WorkflowTask.PrevStepID.SetValue(data.PrevStepID), APDBDef.WorkflowTask.FlowId.SetValue(data.FlowId), APDBDef.WorkflowTask.StepID.SetValue(data.StepID), APDBDef.WorkflowTask.StepName.SetValue(data.StepName), APDBDef.WorkflowTask.SenderName.SetValue(data.SenderName), APDBDef.WorkflowTask.ReceiveName.SetValue(data.ReceiveName), APDBDef.WorkflowTask.InstanceID.SetValue(data.InstanceID), APDBDef.WorkflowTask.GroupID.SetValue(data.GroupID), APDBDef.WorkflowTask.Type.SetValue(data.Type), APDBDef.WorkflowTask.Title.SetValue(data.Title), APDBDef.WorkflowTask.SenderID.SetValue(data.SenderID), APDBDef.WorkflowTask.ReceiveID.SetValue(data.ReceiveID), APDBDef.WorkflowTask.SenderTime.SetValue(data.SenderTime), APDBDef.WorkflowTask.ReceiveTime.SetValue(data.ReceiveTime), APDBDef.WorkflowTask.OpenTime.SetValue(data.OpenTime), APDBDef.WorkflowTask.CompletedTime.SetValue(data.CompletedTime), APDBDef.WorkflowTask.CompletedTime1.SetValue(data.CompletedTime1), APDBDef.WorkflowTask.Comment.SetValue(data.Comment), APDBDef.WorkflowTask.IsSign.SetValue(data.IsSign), APDBDef.WorkflowTask.Status.SetValue(data.Status), APDBDef.WorkflowTask.Note.SetValue(data.Note), APDBDef.WorkflowTask.Sort.SetValue(data.Sort), APDBDef.WorkflowTask.SubFlowGroupID.SetValue(data.SubFlowGroupID));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(WorkflowTask data) {
                var query = APQuery.update(APDBDef.WorkflowTask).values(APDBDef.WorkflowTask.PrevID.SetValue(data.PrevID), APDBDef.WorkflowTask.PrevStepID.SetValue(data.PrevStepID), APDBDef.WorkflowTask.FlowId.SetValue(data.FlowId), APDBDef.WorkflowTask.StepID.SetValue(data.StepID), APDBDef.WorkflowTask.StepName.SetValue(data.StepName), APDBDef.WorkflowTask.SenderName.SetValue(data.SenderName), APDBDef.WorkflowTask.ReceiveName.SetValue(data.ReceiveName), APDBDef.WorkflowTask.InstanceID.SetValue(data.InstanceID), APDBDef.WorkflowTask.GroupID.SetValue(data.GroupID), APDBDef.WorkflowTask.Type.SetValue(data.Type), APDBDef.WorkflowTask.Title.SetValue(data.Title), APDBDef.WorkflowTask.SenderID.SetValue(data.SenderID), APDBDef.WorkflowTask.ReceiveID.SetValue(data.ReceiveID), APDBDef.WorkflowTask.SenderTime.SetValue(data.SenderTime), APDBDef.WorkflowTask.ReceiveTime.SetValue(data.ReceiveTime), APDBDef.WorkflowTask.OpenTime.SetValue(data.OpenTime), APDBDef.WorkflowTask.CompletedTime.SetValue(data.CompletedTime), APDBDef.WorkflowTask.CompletedTime1.SetValue(data.CompletedTime1), APDBDef.WorkflowTask.Comment.SetValue(data.Comment), APDBDef.WorkflowTask.IsSign.SetValue(data.IsSign), APDBDef.WorkflowTask.Status.SetValue(data.Status), APDBDef.WorkflowTask.Note.SetValue(data.Note), APDBDef.WorkflowTask.Sort.SetValue(data.Sort), APDBDef.WorkflowTask.SubFlowGroupID.SetValue(data.SubFlowGroupID)).where((APDBDef.WorkflowTask.TaskId == data.TaskId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid taskId, Object metadata) {
                var query = APQuery.update(APDBDef.WorkflowTask).values(APSqlSetPhraseSelector.Select(APDBDef.WorkflowTask, metadata)).where((APDBDef.WorkflowTask.TaskId == taskId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid taskId) {
                var query = APQuery.delete(APDBDef.WorkflowTask).where((APDBDef.WorkflowTask.TaskId == taskId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.WorkflowTask).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.WorkflowTask.Asterisk.Count()).from(APDBDef.WorkflowTask).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual WorkflowTask PrimaryGet(System.Guid taskId) {
                var query = APQuery.select(APDBDef.WorkflowTask.Asterisk).from(APDBDef.WorkflowTask).where((APDBDef.WorkflowTask.TaskId == taskId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.WorkflowTask.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<WorkflowTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.WorkflowTask.Asterisk).from(APDBDef.WorkflowTask);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.WorkflowTask.TaskId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.WorkflowTask.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<WorkflowTask> GetInitData() {
                return new List<WorkflowTask>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<WorkflowTask> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    WorkflowTask data = list[i];
                    if ((PrimaryGet(data.TaskId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 流程任务（专属于第三方工作流） Dal
        /// </summary>
        public partial class WorkflowTaskDal : WorkflowTaskDalBase {
            
            public WorkflowTaskDal() {
            }
            
            public WorkflowTaskDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 指标 DalBase
        /// </summary>
        public partial class IndicationDalBase : APDal {
            
            public IndicationDalBase() {
            }
            
            public IndicationDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Indication data) {
                var query = APQuery.insert(APDBDef.Indication).values(APDBDef.Indication.IndicationId.SetValue(data.IndicationId), APDBDef.Indication.IndicationName.SetValue(data.IndicationName), APDBDef.Indication.Description.SetValue(data.Description), APDBDef.Indication.CreaterId.SetValue(data.CreaterId), APDBDef.Indication.IndicationType.SetValue(data.IndicationType), APDBDef.Indication.IndicationStatus.SetValue(data.IndicationStatus), APDBDef.Indication.CreateDate.SetValue(data.CreateDate), APDBDef.Indication.UseCount.SetValue(data.UseCount));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Indication data) {
                var query = APQuery.update(APDBDef.Indication).values(APDBDef.Indication.IndicationName.SetValue(data.IndicationName), APDBDef.Indication.Description.SetValue(data.Description), APDBDef.Indication.CreaterId.SetValue(data.CreaterId), APDBDef.Indication.IndicationType.SetValue(data.IndicationType), APDBDef.Indication.IndicationStatus.SetValue(data.IndicationStatus), APDBDef.Indication.CreateDate.SetValue(data.CreateDate), APDBDef.Indication.UseCount.SetValue(data.UseCount)).where((APDBDef.Indication.IndicationId == data.IndicationId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid indicationId, Object metadata) {
                var query = APQuery.update(APDBDef.Indication).values(APSqlSetPhraseSelector.Select(APDBDef.Indication, metadata)).where((APDBDef.Indication.IndicationId == indicationId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid indicationId) {
                var query = APQuery.delete(APDBDef.Indication).where((APDBDef.Indication.IndicationId == indicationId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Indication).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Indication.Asterisk.Count()).from(APDBDef.Indication).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Indication PrimaryGet(System.Guid indicationId) {
                var query = APQuery.select(APDBDef.Indication.Asterisk).from(APDBDef.Indication).where((APDBDef.Indication.IndicationId == indicationId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Indication.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Indication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Indication.Asterisk).from(APDBDef.Indication);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Indication.IndicationId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Indication.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Indication> GetInitData() {
                return new List<Indication>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Indication> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Indication data = list[i];
                    if ((PrimaryGet(data.IndicationId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 指标 Dal
        /// </summary>
        public partial class IndicationDal : IndicationDalBase {
            
            public IndicationDal() {
            }
            
            public IndicationDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 考核表-指标-关联 DalBase
        /// </summary>
        public partial class EvalIndicationDalBase : APDal {
            
            public EvalIndicationDalBase() {
            }
            
            public EvalIndicationDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalIndication data) {
                var query = APQuery.insert(APDBDef.EvalIndication).values(APDBDef.EvalIndication.Id.SetValue(data.Id), APDBDef.EvalIndication.IndicationId.SetValue(data.IndicationId), APDBDef.EvalIndication.TableId.SetValue(data.TableId), APDBDef.EvalIndication.FullScore.SetValue(data.FullScore), APDBDef.EvalIndication.EvalType.SetValue(data.EvalType));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalIndication data) {
                var query = APQuery.update(APDBDef.EvalIndication).values(APDBDef.EvalIndication.IndicationId.SetValue(data.IndicationId), APDBDef.EvalIndication.TableId.SetValue(data.TableId), APDBDef.EvalIndication.FullScore.SetValue(data.FullScore), APDBDef.EvalIndication.EvalType.SetValue(data.EvalType)).where((APDBDef.EvalIndication.Id == data.Id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid id, Object metadata) {
                var query = APQuery.update(APDBDef.EvalIndication).values(APSqlSetPhraseSelector.Select(APDBDef.EvalIndication, metadata)).where((APDBDef.EvalIndication.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid id) {
                var query = APQuery.delete(APDBDef.EvalIndication).where((APDBDef.EvalIndication.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalIndication).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalIndication.Asterisk.Count()).from(APDBDef.EvalIndication).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalIndication PrimaryGet(System.Guid id) {
                var query = APQuery.select(APDBDef.EvalIndication.Asterisk).from(APDBDef.EvalIndication).where((APDBDef.EvalIndication.Id == id));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalIndication.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalIndication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalIndication.Asterisk).from(APDBDef.EvalIndication);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalIndication.Id);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalIndication.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalIndication> GetInitData() {
                return new List<EvalIndication>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalIndication> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalIndication data = list[i];
                    if ((PrimaryGet(data.Id) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 考核表-指标-关联 Dal
        /// </summary>
        public partial class EvalIndicationDal : EvalIndicationDalBase {
            
            public EvalIndicationDal() {
            }
            
            public EvalIndicationDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 考核-指标-指标项 DalBase
        /// </summary>
        public partial class EvalIndicationItemDalBase : APDal {
            
            public EvalIndicationItemDalBase() {
            }
            
            public EvalIndicationItemDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalIndicationItem data) {
                var query = APQuery.insert(APDBDef.EvalIndicationItem).values(APDBDef.EvalIndicationItem.ItemId.SetValue(data.ItemId), APDBDef.EvalIndicationItem.EvalIndicationId.SetValue(data.EvalIndicationId), APDBDef.EvalIndicationItem.ItemName.SetValue(data.ItemName), APDBDef.EvalIndicationItem.ItemScore.SetValue(data.ItemScore), APDBDef.EvalIndicationItem.ItemValue.SetValue(data.ItemValue));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalIndicationItem data) {
                var query = APQuery.update(APDBDef.EvalIndicationItem).values(APDBDef.EvalIndicationItem.EvalIndicationId.SetValue(data.EvalIndicationId), APDBDef.EvalIndicationItem.ItemName.SetValue(data.ItemName), APDBDef.EvalIndicationItem.ItemScore.SetValue(data.ItemScore), APDBDef.EvalIndicationItem.ItemValue.SetValue(data.ItemValue)).where((APDBDef.EvalIndicationItem.ItemId == data.ItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid itemId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalIndicationItem).values(APSqlSetPhraseSelector.Select(APDBDef.EvalIndicationItem, metadata)).where((APDBDef.EvalIndicationItem.ItemId == itemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid itemId) {
                var query = APQuery.delete(APDBDef.EvalIndicationItem).where((APDBDef.EvalIndicationItem.ItemId == itemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalIndicationItem).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalIndicationItem.Asterisk.Count()).from(APDBDef.EvalIndicationItem).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalIndicationItem PrimaryGet(System.Guid itemId) {
                var query = APQuery.select(APDBDef.EvalIndicationItem.Asterisk).from(APDBDef.EvalIndicationItem).where((APDBDef.EvalIndicationItem.ItemId == itemId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalIndicationItem.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalIndicationItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalIndicationItem.Asterisk).from(APDBDef.EvalIndicationItem);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalIndicationItem.ItemId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalIndicationItem.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalIndicationItem> GetInitData() {
                return new List<EvalIndicationItem>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalIndicationItem> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalIndicationItem data = list[i];
                    if ((PrimaryGet(data.ItemId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 考核-指标-指标项 Dal
        /// </summary>
        public partial class EvalIndicationItemDal : EvalIndicationItemDalBase {
            
            public EvalIndicationItemDal() {
            }
            
            public EvalIndicationItemDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 考核表 DalBase
        /// </summary>
        public partial class EvalTableDalBase : APDal {
            
            public EvalTableDalBase() {
            }
            
            public EvalTableDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalTable data) {
                var query = APQuery.insert(APDBDef.EvalTable).values(APDBDef.EvalTable.TableId.SetValue(data.TableId), APDBDef.EvalTable.TableName.SetValue(data.TableName), APDBDef.EvalTable.Description.SetValue(data.Description), APDBDef.EvalTable.TableType.SetValue(data.TableType), APDBDef.EvalTable.TableStatus.SetValue(data.TableStatus), APDBDef.EvalTable.FullScore.SetValue(data.FullScore), APDBDef.EvalTable.CreateDate.SetValue(data.CreateDate), APDBDef.EvalTable.CreaterId.SetValue(data.CreaterId), APDBDef.EvalTable.ModifyDate.SetValue(data.ModifyDate), APDBDef.EvalTable.ModifierId.SetValue(data.ModifierId), APDBDef.EvalTable.UseCount.SetValue(data.UseCount), APDBDef.EvalTable.PerviouslyTableStatus.SetValue(data.PerviouslyTableStatus));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalTable data) {
                var query = APQuery.update(APDBDef.EvalTable).values(APDBDef.EvalTable.TableName.SetValue(data.TableName), APDBDef.EvalTable.Description.SetValue(data.Description), APDBDef.EvalTable.TableType.SetValue(data.TableType), APDBDef.EvalTable.TableStatus.SetValue(data.TableStatus), APDBDef.EvalTable.FullScore.SetValue(data.FullScore), APDBDef.EvalTable.CreateDate.SetValue(data.CreateDate), APDBDef.EvalTable.CreaterId.SetValue(data.CreaterId), APDBDef.EvalTable.ModifyDate.SetValue(data.ModifyDate), APDBDef.EvalTable.ModifierId.SetValue(data.ModifierId), APDBDef.EvalTable.UseCount.SetValue(data.UseCount), APDBDef.EvalTable.PerviouslyTableStatus.SetValue(data.PerviouslyTableStatus)).where((APDBDef.EvalTable.TableId == data.TableId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid tableId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalTable).values(APSqlSetPhraseSelector.Select(APDBDef.EvalTable, metadata)).where((APDBDef.EvalTable.TableId == tableId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid tableId) {
                var query = APQuery.delete(APDBDef.EvalTable).where((APDBDef.EvalTable.TableId == tableId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalTable).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalTable.Asterisk.Count()).from(APDBDef.EvalTable).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalTable PrimaryGet(System.Guid tableId) {
                var query = APQuery.select(APDBDef.EvalTable.Asterisk).from(APDBDef.EvalTable).where((APDBDef.EvalTable.TableId == tableId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalTable.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalTable> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalTable.Asterisk).from(APDBDef.EvalTable);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalTable.TableId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalTable.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalTable> GetInitData() {
                return new List<EvalTable>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalTable> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalTable data = list[i];
                    if ((PrimaryGet(data.TableId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 考核表 Dal
        /// </summary>
        public partial class EvalTableDal : EvalTableDalBase {
            
            public EvalTableDal() {
            }
            
            public EvalTableDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 评价-周期 DalBase
        /// </summary>
        public partial class EvalPeriodDalBase : APDal {
            
            public EvalPeriodDalBase() {
            }
            
            public EvalPeriodDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalPeriod data) {
                var query = APQuery.insert(APDBDef.EvalPeriod).values(APDBDef.EvalPeriod.PeriodId.SetValue(data.PeriodId), APDBDef.EvalPeriod.Name.SetValue(data.Name), APDBDef.EvalPeriod.BeginDate.SetValue(data.BeginDate), APDBDef.EvalPeriod.EndDate.SetValue(data.EndDate), APDBDef.EvalPeriod.AccessBeginDate.SetValue(data.AccessBeginDate), APDBDef.EvalPeriod.AccessEndDate.SetValue(data.AccessEndDate), APDBDef.EvalPeriod.AnalysisName.SetValue(data.AnalysisName), APDBDef.EvalPeriod.AnalysisType.SetValue(data.AnalysisType), APDBDef.EvalPeriod.IsCurrent.SetValue(data.IsCurrent), APDBDef.EvalPeriod.CreateDate.SetValue(data.CreateDate));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalPeriod data) {
                var query = APQuery.update(APDBDef.EvalPeriod).values(APDBDef.EvalPeriod.Name.SetValue(data.Name), APDBDef.EvalPeriod.BeginDate.SetValue(data.BeginDate), APDBDef.EvalPeriod.EndDate.SetValue(data.EndDate), APDBDef.EvalPeriod.AccessBeginDate.SetValue(data.AccessBeginDate), APDBDef.EvalPeriod.AccessEndDate.SetValue(data.AccessEndDate), APDBDef.EvalPeriod.AnalysisName.SetValue(data.AnalysisName), APDBDef.EvalPeriod.AnalysisType.SetValue(data.AnalysisType), APDBDef.EvalPeriod.IsCurrent.SetValue(data.IsCurrent), APDBDef.EvalPeriod.CreateDate.SetValue(data.CreateDate)).where((APDBDef.EvalPeriod.PeriodId == data.PeriodId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid periodId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalPeriod).values(APSqlSetPhraseSelector.Select(APDBDef.EvalPeriod, metadata)).where((APDBDef.EvalPeriod.PeriodId == periodId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid periodId) {
                var query = APQuery.delete(APDBDef.EvalPeriod).where((APDBDef.EvalPeriod.PeriodId == periodId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalPeriod).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalPeriod.Asterisk.Count()).from(APDBDef.EvalPeriod).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalPeriod PrimaryGet(System.Guid periodId) {
                var query = APQuery.select(APDBDef.EvalPeriod.Asterisk).from(APDBDef.EvalPeriod).where((APDBDef.EvalPeriod.PeriodId == periodId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalPeriod.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalPeriod.Asterisk).from(APDBDef.EvalPeriod);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalPeriod.PeriodId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalPeriod.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalPeriod> GetInitData() {
                return new List<EvalPeriod>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalPeriod> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalPeriod data = list[i];
                    if ((PrimaryGet(data.PeriodId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 评价-周期 Dal
        /// </summary>
        public partial class EvalPeriodDal : EvalPeriodDalBase {
            
            public EvalPeriodDal() {
            }
            
            public EvalPeriodDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 考核表-比重 DalBase
        /// </summary>
        public partial class EvalTargetTablePropertionDalBase : APDal {
            
            public EvalTargetTablePropertionDalBase() {
            }
            
            public EvalTargetTablePropertionDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalTargetTablePropertion data) {
                var query = APQuery.insert(APDBDef.EvalTargetTablePropertion).values(APDBDef.EvalTargetTablePropertion.PropertionID.SetValue(data.PropertionID), APDBDef.EvalTargetTablePropertion.TableId.SetValue(data.TableId), APDBDef.EvalTargetTablePropertion.TargetId.SetValue(data.TargetId), APDBDef.EvalTargetTablePropertion.Propertion.SetValue(data.Propertion), APDBDef.EvalTargetTablePropertion.PeriodId.SetValue(data.PeriodId), APDBDef.EvalTargetTablePropertion.GroupId.SetValue(data.GroupId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalTargetTablePropertion data) {
                var query = APQuery.update(APDBDef.EvalTargetTablePropertion).values(APDBDef.EvalTargetTablePropertion.TableId.SetValue(data.TableId), APDBDef.EvalTargetTablePropertion.TargetId.SetValue(data.TargetId), APDBDef.EvalTargetTablePropertion.Propertion.SetValue(data.Propertion), APDBDef.EvalTargetTablePropertion.PeriodId.SetValue(data.PeriodId), APDBDef.EvalTargetTablePropertion.GroupId.SetValue(data.GroupId)).where((APDBDef.EvalTargetTablePropertion.PropertionID == data.PropertionID));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid propertionID, Object metadata) {
                var query = APQuery.update(APDBDef.EvalTargetTablePropertion).values(APSqlSetPhraseSelector.Select(APDBDef.EvalTargetTablePropertion, metadata)).where((APDBDef.EvalTargetTablePropertion.PropertionID == propertionID));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid propertionID) {
                var query = APQuery.delete(APDBDef.EvalTargetTablePropertion).where((APDBDef.EvalTargetTablePropertion.PropertionID == propertionID));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalTargetTablePropertion).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalTargetTablePropertion.Asterisk.Count()).from(APDBDef.EvalTargetTablePropertion).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalTargetTablePropertion PrimaryGet(System.Guid propertionID) {
                var query = APQuery.select(APDBDef.EvalTargetTablePropertion.Asterisk).from(APDBDef.EvalTargetTablePropertion).where((APDBDef.EvalTargetTablePropertion.PropertionID == propertionID));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalTargetTablePropertion.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalTargetTablePropertion> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalTargetTablePropertion.Asterisk).from(APDBDef.EvalTargetTablePropertion);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalTargetTablePropertion.PropertionID);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalTargetTablePropertion.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalTargetTablePropertion> GetInitData() {
                return new List<EvalTargetTablePropertion>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalTargetTablePropertion> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalTargetTablePropertion data = list[i];
                    if ((PrimaryGet(data.PropertionID) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 考核表-比重 Dal
        /// </summary>
        public partial class EvalTargetTablePropertionDal : EvalTargetTablePropertionDalBase {
            
            public EvalTargetTablePropertionDal() {
            }
            
            public EvalTargetTablePropertionDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 考核组 DalBase
        /// </summary>
        public partial class EvalGroupDalBase : APDal {
            
            public EvalGroupDalBase() {
            }
            
            public EvalGroupDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalGroup data) {
                var query = APQuery.insert(APDBDef.EvalGroup).values(APDBDef.EvalGroup.GroupId.SetValue(data.GroupId), APDBDef.EvalGroup.GroupName.SetValue(data.GroupName), APDBDef.EvalGroup.CreateDate.SetValue(data.CreateDate));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalGroup data) {
                var query = APQuery.update(APDBDef.EvalGroup).values(APDBDef.EvalGroup.GroupName.SetValue(data.GroupName), APDBDef.EvalGroup.CreateDate.SetValue(data.CreateDate)).where((APDBDef.EvalGroup.GroupId == data.GroupId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid groupId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalGroup).values(APSqlSetPhraseSelector.Select(APDBDef.EvalGroup, metadata)).where((APDBDef.EvalGroup.GroupId == groupId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid groupId) {
                var query = APQuery.delete(APDBDef.EvalGroup).where((APDBDef.EvalGroup.GroupId == groupId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalGroup).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalGroup.Asterisk.Count()).from(APDBDef.EvalGroup).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalGroup PrimaryGet(System.Guid groupId) {
                var query = APQuery.select(APDBDef.EvalGroup.Asterisk).from(APDBDef.EvalGroup).where((APDBDef.EvalGroup.GroupId == groupId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalGroup.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalGroup.Asterisk).from(APDBDef.EvalGroup);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalGroup.GroupId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalGroup.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalGroup> GetInitData() {
                return new List<EvalGroup>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalGroup> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalGroup data = list[i];
                    if ((PrimaryGet(data.GroupId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 考核组 Dal
        /// </summary>
        public partial class EvalGroupDal : EvalGroupDalBase {
            
            public EvalGroupDal() {
            }
            
            public EvalGroupDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 考核组-成员 DalBase
        /// </summary>
        public partial class EvalGroupMemberDalBase : APDal {
            
            public EvalGroupMemberDalBase() {
            }
            
            public EvalGroupMemberDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalGroupMember data) {
                var query = APQuery.insert(APDBDef.EvalGroupMember).values(APDBDef.EvalGroupMember.GroupMemberId.SetValue(data.GroupMemberId), APDBDef.EvalGroupMember.GroupId.SetValue(data.GroupId), APDBDef.EvalGroupMember.MemberId.SetValue(data.MemberId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalGroupMember data) {
                var query = APQuery.update(APDBDef.EvalGroupMember).values(APDBDef.EvalGroupMember.GroupId.SetValue(data.GroupId), APDBDef.EvalGroupMember.MemberId.SetValue(data.MemberId)).where((APDBDef.EvalGroupMember.GroupMemberId == data.GroupMemberId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid groupMemberId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalGroupMember).values(APSqlSetPhraseSelector.Select(APDBDef.EvalGroupMember, metadata)).where((APDBDef.EvalGroupMember.GroupMemberId == groupMemberId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid groupMemberId) {
                var query = APQuery.delete(APDBDef.EvalGroupMember).where((APDBDef.EvalGroupMember.GroupMemberId == groupMemberId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalGroupMember).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalGroupMember.Asterisk.Count()).from(APDBDef.EvalGroupMember).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalGroupMember PrimaryGet(System.Guid groupMemberId) {
                var query = APQuery.select(APDBDef.EvalGroupMember.Asterisk).from(APDBDef.EvalGroupMember).where((APDBDef.EvalGroupMember.GroupMemberId == groupMemberId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalGroupMember.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalGroupMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalGroupMember.Asterisk).from(APDBDef.EvalGroupMember);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalGroupMember.GroupMemberId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalGroupMember.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalGroupMember> GetInitData() {
                return new List<EvalGroupMember>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalGroupMember> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalGroupMember data = list[i];
                    if ((PrimaryGet(data.GroupMemberId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 考核组-成员 Dal
        /// </summary>
        public partial class EvalGroupMemberDal : EvalGroupMemberDalBase {
            
            public EvalGroupMemberDal() {
            }
            
            public EvalGroupMemberDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 考核组-评审人 DalBase
        /// </summary>
        public partial class EvalGroupAccessorDalBase : APDal {
            
            public EvalGroupAccessorDalBase() {
            }
            
            public EvalGroupAccessorDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalGroupAccessor data) {
                var query = APQuery.insert(APDBDef.EvalGroupAccessor).values(APDBDef.EvalGroupAccessor.GroupAccessorId.SetValue(data.GroupAccessorId), APDBDef.EvalGroupAccessor.GroupId.SetValue(data.GroupId), APDBDef.EvalGroupAccessor.AccessorId.SetValue(data.AccessorId), APDBDef.EvalGroupAccessor.ModifyDate.SetValue(data.ModifyDate));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalGroupAccessor data) {
                var query = APQuery.update(APDBDef.EvalGroupAccessor).values(APDBDef.EvalGroupAccessor.GroupId.SetValue(data.GroupId), APDBDef.EvalGroupAccessor.AccessorId.SetValue(data.AccessorId), APDBDef.EvalGroupAccessor.ModifyDate.SetValue(data.ModifyDate)).where((APDBDef.EvalGroupAccessor.GroupAccessorId == data.GroupAccessorId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid groupAccessorId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalGroupAccessor).values(APSqlSetPhraseSelector.Select(APDBDef.EvalGroupAccessor, metadata)).where((APDBDef.EvalGroupAccessor.GroupAccessorId == groupAccessorId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid groupAccessorId) {
                var query = APQuery.delete(APDBDef.EvalGroupAccessor).where((APDBDef.EvalGroupAccessor.GroupAccessorId == groupAccessorId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalGroupAccessor).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalGroupAccessor.Asterisk.Count()).from(APDBDef.EvalGroupAccessor).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalGroupAccessor PrimaryGet(System.Guid groupAccessorId) {
                var query = APQuery.select(APDBDef.EvalGroupAccessor.Asterisk).from(APDBDef.EvalGroupAccessor).where((APDBDef.EvalGroupAccessor.GroupAccessorId == groupAccessorId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalGroupAccessor.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalGroupAccessor> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalGroupAccessor.Asterisk).from(APDBDef.EvalGroupAccessor);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalGroupAccessor.GroupAccessorId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalGroupAccessor.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalGroupAccessor> GetInitData() {
                return new List<EvalGroupAccessor>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalGroupAccessor> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalGroupAccessor data = list[i];
                    if ((PrimaryGet(data.GroupAccessorId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 考核组-评审人 Dal
        /// </summary>
        public partial class EvalGroupAccessorDal : EvalGroupAccessorDalBase {
            
            public EvalGroupAccessorDal() {
            }
            
            public EvalGroupAccessorDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 评审人-评审对象 DalBase
        /// </summary>
        public partial class EvalAccessorTargetDalBase : APDal {
            
            public EvalAccessorTargetDalBase() {
            }
            
            public EvalAccessorTargetDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalAccessorTarget data) {
                var query = APQuery.insert(APDBDef.EvalAccessorTarget).values(APDBDef.EvalAccessorTarget.AccessorTargetId.SetValue(data.AccessorTargetId), APDBDef.EvalAccessorTarget.AccessorId.SetValue(data.AccessorId), APDBDef.EvalAccessorTarget.TargetId.SetValue(data.TargetId), APDBDef.EvalAccessorTarget.EvalType.SetValue(data.EvalType), APDBDef.EvalAccessorTarget.TableId.SetValue(data.TableId), APDBDef.EvalAccessorTarget.Propertion.SetValue(data.Propertion), APDBDef.EvalAccessorTarget.ModifyDate.SetValue(data.ModifyDate), APDBDef.EvalAccessorTarget.PeriodId.SetValue(data.PeriodId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalAccessorTarget data) {
                var query = APQuery.update(APDBDef.EvalAccessorTarget).values(APDBDef.EvalAccessorTarget.AccessorId.SetValue(data.AccessorId), APDBDef.EvalAccessorTarget.TargetId.SetValue(data.TargetId), APDBDef.EvalAccessorTarget.EvalType.SetValue(data.EvalType), APDBDef.EvalAccessorTarget.TableId.SetValue(data.TableId), APDBDef.EvalAccessorTarget.Propertion.SetValue(data.Propertion), APDBDef.EvalAccessorTarget.ModifyDate.SetValue(data.ModifyDate), APDBDef.EvalAccessorTarget.PeriodId.SetValue(data.PeriodId)).where((APDBDef.EvalAccessorTarget.AccessorTargetId == data.AccessorTargetId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid accessorTargetId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalAccessorTarget).values(APSqlSetPhraseSelector.Select(APDBDef.EvalAccessorTarget, metadata)).where((APDBDef.EvalAccessorTarget.AccessorTargetId == accessorTargetId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid accessorTargetId) {
                var query = APQuery.delete(APDBDef.EvalAccessorTarget).where((APDBDef.EvalAccessorTarget.AccessorTargetId == accessorTargetId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalAccessorTarget).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalAccessorTarget.Asterisk.Count()).from(APDBDef.EvalAccessorTarget).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalAccessorTarget PrimaryGet(System.Guid accessorTargetId) {
                var query = APQuery.select(APDBDef.EvalAccessorTarget.Asterisk).from(APDBDef.EvalAccessorTarget).where((APDBDef.EvalAccessorTarget.AccessorTargetId == accessorTargetId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalAccessorTarget.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalAccessorTarget> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalAccessorTarget.Asterisk).from(APDBDef.EvalAccessorTarget);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalAccessorTarget.AccessorTargetId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalAccessorTarget.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalAccessorTarget> GetInitData() {
                return new List<EvalAccessorTarget>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalAccessorTarget> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalAccessorTarget data = list[i];
                    if ((PrimaryGet(data.AccessorTargetId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 评审人-评审对象 Dal
        /// </summary>
        public partial class EvalAccessorTargetDal : EvalAccessorTargetDalBase {
            
            public EvalAccessorTargetDal() {
            }
            
            public EvalAccessorTargetDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 评价-结果 DalBase
        /// </summary>
        public partial class EvalResultDalBase : APDal {
            
            public EvalResultDalBase() {
            }
            
            public EvalResultDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalResult data) {
                var query = APQuery.insert(APDBDef.EvalResult).values(APDBDef.EvalResult.ResultId.SetValue(data.ResultId), APDBDef.EvalResult.PeriodId.SetValue(data.PeriodId), APDBDef.EvalResult.GroupId.SetValue(data.GroupId), APDBDef.EvalResult.TableId.SetValue(data.TableId), APDBDef.EvalResult.TargetId.SetValue(data.TargetId), APDBDef.EvalResult.AccesserRoleId.SetValue(data.AccesserRoleId), APDBDef.EvalResult.AccesserId.SetValue(data.AccesserId), APDBDef.EvalResult.AccessDate.SetValue(data.AccessDate), APDBDef.EvalResult.Score.SetValue(data.Score), APDBDef.EvalResult.EvalType.SetValue(data.EvalType), APDBDef.EvalResult.TargetRoleId.SetValue(data.TargetRoleId), APDBDef.EvalResult.AdjustScore.SetValue(data.AdjustScore));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalResult data) {
                var query = APQuery.update(APDBDef.EvalResult).values(APDBDef.EvalResult.PeriodId.SetValue(data.PeriodId), APDBDef.EvalResult.GroupId.SetValue(data.GroupId), APDBDef.EvalResult.TableId.SetValue(data.TableId), APDBDef.EvalResult.TargetId.SetValue(data.TargetId), APDBDef.EvalResult.AccesserRoleId.SetValue(data.AccesserRoleId), APDBDef.EvalResult.AccesserId.SetValue(data.AccesserId), APDBDef.EvalResult.AccessDate.SetValue(data.AccessDate), APDBDef.EvalResult.Score.SetValue(data.Score), APDBDef.EvalResult.EvalType.SetValue(data.EvalType), APDBDef.EvalResult.TargetRoleId.SetValue(data.TargetRoleId), APDBDef.EvalResult.AdjustScore.SetValue(data.AdjustScore)).where((APDBDef.EvalResult.ResultId == data.ResultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid resultId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalResult).values(APSqlSetPhraseSelector.Select(APDBDef.EvalResult, metadata)).where((APDBDef.EvalResult.ResultId == resultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid resultId) {
                var query = APQuery.delete(APDBDef.EvalResult).where((APDBDef.EvalResult.ResultId == resultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalResult).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalResult.Asterisk.Count()).from(APDBDef.EvalResult).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalResult PrimaryGet(System.Guid resultId) {
                var query = APQuery.select(APDBDef.EvalResult.Asterisk).from(APDBDef.EvalResult).where((APDBDef.EvalResult.ResultId == resultId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalResult.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalResult.Asterisk).from(APDBDef.EvalResult);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalResult.ResultId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalResult.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalResult> GetInitData() {
                return new List<EvalResult>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalResult> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalResult data = list[i];
                    if ((PrimaryGet(data.ResultId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 评价-结果 Dal
        /// </summary>
        public partial class EvalResultDal : EvalResultDalBase {
            
            public EvalResultDal() {
            }
            
            public EvalResultDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 评价-结果-结果项 DalBase
        /// </summary>
        public partial class EvalResultItemDalBase : APDal {
            
            public EvalResultItemDalBase() {
            }
            
            public EvalResultItemDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalResultItem data) {
                var query = APQuery.insert(APDBDef.EvalResultItem).values(APDBDef.EvalResultItem.ResultItemId.SetValue(data.ResultItemId), APDBDef.EvalResultItem.ResultId.SetValue(data.ResultId), APDBDef.EvalResultItem.IndicationId.SetValue(data.IndicationId), APDBDef.EvalResultItem.EvalItemKey.SetValue(data.EvalItemKey), APDBDef.EvalResultItem.ChooseValue.SetValue(data.ChooseValue), APDBDef.EvalResultItem.ResultValue.SetValue(data.ResultValue), APDBDef.EvalResultItem.Score.SetValue(data.Score));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalResultItem data) {
                var query = APQuery.update(APDBDef.EvalResultItem).values(APDBDef.EvalResultItem.ResultId.SetValue(data.ResultId), APDBDef.EvalResultItem.IndicationId.SetValue(data.IndicationId), APDBDef.EvalResultItem.EvalItemKey.SetValue(data.EvalItemKey), APDBDef.EvalResultItem.ChooseValue.SetValue(data.ChooseValue), APDBDef.EvalResultItem.ResultValue.SetValue(data.ResultValue), APDBDef.EvalResultItem.Score.SetValue(data.Score)).where((APDBDef.EvalResultItem.ResultItemId == data.ResultItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid resultItemId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalResultItem).values(APSqlSetPhraseSelector.Select(APDBDef.EvalResultItem, metadata)).where((APDBDef.EvalResultItem.ResultItemId == resultItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid resultItemId) {
                var query = APQuery.delete(APDBDef.EvalResultItem).where((APDBDef.EvalResultItem.ResultItemId == resultItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalResultItem).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalResultItem.Asterisk.Count()).from(APDBDef.EvalResultItem).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalResultItem PrimaryGet(System.Guid resultItemId) {
                var query = APQuery.select(APDBDef.EvalResultItem.Asterisk).from(APDBDef.EvalResultItem).where((APDBDef.EvalResultItem.ResultItemId == resultItemId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalResultItem.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalResultItem.Asterisk).from(APDBDef.EvalResultItem);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalResultItem.ResultItemId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalResultItem.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalResultItem> GetInitData() {
                return new List<EvalResultItem>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalResultItem> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalResultItem data = list[i];
                    if ((PrimaryGet(data.ResultItemId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 评价-结果-结果项 Dal
        /// </summary>
        public partial class EvalResultItemDal : EvalResultItemDalBase {
            
            public EvalResultItemDal() {
            }
            
            public EvalResultItemDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 评价-最终-结果 DalBase
        /// </summary>
        public partial class EvalSubmitResultDalBase : APDal {
            
            public EvalSubmitResultDalBase() {
            }
            
            public EvalSubmitResultDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalSubmitResult data) {
                var query = APQuery.insert(APDBDef.EvalSubmitResult).values(APDBDef.EvalSubmitResult.SubmitResultId.SetValue(data.SubmitResultId), APDBDef.EvalSubmitResult.PeriodId.SetValue(data.PeriodId), APDBDef.EvalSubmitResult.UserId.SetValue(data.UserId), APDBDef.EvalSubmitResult.RoleId.SetValue(data.RoleId), APDBDef.EvalSubmitResult.Score.SetValue(data.Score), APDBDef.EvalSubmitResult.AdjustScore.SetValue(data.AdjustScore), APDBDef.EvalSubmitResult.PeriodName.SetValue(data.PeriodName), APDBDef.EvalSubmitResult.RoleName.SetValue(data.RoleName), APDBDef.EvalSubmitResult.UserName.SetValue(data.UserName));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalSubmitResult data) {
                var query = APQuery.update(APDBDef.EvalSubmitResult).values(APDBDef.EvalSubmitResult.PeriodId.SetValue(data.PeriodId), APDBDef.EvalSubmitResult.UserId.SetValue(data.UserId), APDBDef.EvalSubmitResult.RoleId.SetValue(data.RoleId), APDBDef.EvalSubmitResult.Score.SetValue(data.Score), APDBDef.EvalSubmitResult.AdjustScore.SetValue(data.AdjustScore), APDBDef.EvalSubmitResult.PeriodName.SetValue(data.PeriodName), APDBDef.EvalSubmitResult.RoleName.SetValue(data.RoleName), APDBDef.EvalSubmitResult.UserName.SetValue(data.UserName)).where((APDBDef.EvalSubmitResult.SubmitResultId == data.SubmitResultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid submitResultId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalSubmitResult).values(APSqlSetPhraseSelector.Select(APDBDef.EvalSubmitResult, metadata)).where((APDBDef.EvalSubmitResult.SubmitResultId == submitResultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid submitResultId) {
                var query = APQuery.delete(APDBDef.EvalSubmitResult).where((APDBDef.EvalSubmitResult.SubmitResultId == submitResultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalSubmitResult).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalSubmitResult.Asterisk.Count()).from(APDBDef.EvalSubmitResult).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalSubmitResult PrimaryGet(System.Guid submitResultId) {
                var query = APQuery.select(APDBDef.EvalSubmitResult.Asterisk).from(APDBDef.EvalSubmitResult).where((APDBDef.EvalSubmitResult.SubmitResultId == submitResultId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalSubmitResult.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalSubmitResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalSubmitResult.Asterisk).from(APDBDef.EvalSubmitResult);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalSubmitResult.SubmitResultId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalSubmitResult.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalSubmitResult> GetInitData() {
                return new List<EvalSubmitResult>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalSubmitResult> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalSubmitResult data = list[i];
                    if ((PrimaryGet(data.SubmitResultId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 评价-最终-结果 Dal
        /// </summary>
        public partial class EvalSubmitResultDal : EvalSubmitResultDalBase {
            
            public EvalSubmitResultDal() {
            }
            
            public EvalSubmitResultDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 文件夹 DalBase
        /// </summary>
        public partial class FolderDalBase : APDal {
            
            public FolderDalBase() {
            }
            
            public FolderDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Folder data) {
                var query = APQuery.insert(APDBDef.Folder).values(APDBDef.Folder.FolderId.SetValue(data.FolderId), APDBDef.Folder.ParentId.SetValue(data.ParentId), APDBDef.Folder.SortId.SetValue(data.SortId), APDBDef.Folder.FolderName.SetValue(data.FolderName), APDBDef.Folder.FolderType.SetValue(data.FolderType), APDBDef.Folder.OperatorId.SetValue(data.OperatorId), APDBDef.Folder.FolderPath.SetValue(data.FolderPath), APDBDef.Folder.FileCount.SetValue(data.FileCount), APDBDef.Folder.FolderCount.SetValue(data.FolderCount));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Folder data) {
                var query = APQuery.update(APDBDef.Folder).values(APDBDef.Folder.ParentId.SetValue(data.ParentId), APDBDef.Folder.SortId.SetValue(data.SortId), APDBDef.Folder.FolderName.SetValue(data.FolderName), APDBDef.Folder.FolderType.SetValue(data.FolderType), APDBDef.Folder.OperatorId.SetValue(data.OperatorId), APDBDef.Folder.FolderPath.SetValue(data.FolderPath), APDBDef.Folder.FileCount.SetValue(data.FileCount), APDBDef.Folder.FolderCount.SetValue(data.FolderCount)).where((APDBDef.Folder.FolderId == data.FolderId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid folderId, Object metadata) {
                var query = APQuery.update(APDBDef.Folder).values(APSqlSetPhraseSelector.Select(APDBDef.Folder, metadata)).where((APDBDef.Folder.FolderId == folderId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid folderId) {
                var query = APQuery.delete(APDBDef.Folder).where((APDBDef.Folder.FolderId == folderId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Folder).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Folder.Asterisk.Count()).from(APDBDef.Folder).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Folder PrimaryGet(System.Guid folderId) {
                var query = APQuery.select(APDBDef.Folder.Asterisk).from(APDBDef.Folder).where((APDBDef.Folder.FolderId == folderId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Folder.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Folder> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Folder.Asterisk).from(APDBDef.Folder);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Folder.FolderId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Folder.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Folder> GetInitData() {
                return new List<Folder>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Folder> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Folder data = list[i];
                    if ((PrimaryGet(data.FolderId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 文件夹 Dal
        /// </summary>
        public partial class FolderDal : FolderDalBase {
            
            public FolderDal() {
            }
            
            public FolderDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        ///  DalBase
        /// </summary>
        public partial class FolderFileDalBase : APDal {
            
            public FolderFileDalBase() {
            }
            
            public FolderFileDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(FolderFile data) {
                var query = APQuery.insert(APDBDef.FolderFile).values(APDBDef.FolderFile.FolderFileId.SetValue(data.FolderFileId), APDBDef.FolderFile.FolderId.SetValue(data.FolderId), APDBDef.FolderFile.AttachmentId.SetValue(data.AttachmentId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(FolderFile data) {
                var query = APQuery.update(APDBDef.FolderFile).values(APDBDef.FolderFile.FolderId.SetValue(data.FolderId), APDBDef.FolderFile.AttachmentId.SetValue(data.AttachmentId)).where((APDBDef.FolderFile.FolderFileId == data.FolderFileId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid folderFileId, Object metadata) {
                var query = APQuery.update(APDBDef.FolderFile).values(APSqlSetPhraseSelector.Select(APDBDef.FolderFile, metadata)).where((APDBDef.FolderFile.FolderFileId == folderFileId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid folderFileId) {
                var query = APQuery.delete(APDBDef.FolderFile).where((APDBDef.FolderFile.FolderFileId == folderFileId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.FolderFile).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.FolderFile.Asterisk.Count()).from(APDBDef.FolderFile).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual FolderFile PrimaryGet(System.Guid folderFileId) {
                var query = APQuery.select(APDBDef.FolderFile.Asterisk).from(APDBDef.FolderFile).where((APDBDef.FolderFile.FolderFileId == folderFileId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.FolderFile.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<FolderFile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.FolderFile.Asterisk).from(APDBDef.FolderFile);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.FolderFile.FolderFileId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.FolderFile.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<FolderFile> GetInitData() {
                return new List<FolderFile>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<FolderFile> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    FolderFile data = list[i];
                    if ((PrimaryGet(data.FolderFileId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        ///  Dal
        /// </summary>
        public partial class FolderFileDal : FolderFileDalBase {
            
            public FolderFileDal() {
            }
            
            public FolderFileDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 建议 DalBase
        /// </summary>
        public partial class AdviceDalBase : APDal {
            
            public AdviceDalBase() {
            }
            
            public AdviceDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Advice data) {
                var query = APQuery.insert(APDBDef.Advice).values(APDBDef.Advice.AdviceId.SetValue(data.AdviceId), APDBDef.Advice.AdviceType.SetValue(data.AdviceType), APDBDef.Advice.Title.SetValue(data.Title), APDBDef.Advice.Content.SetValue(data.Content), APDBDef.Advice.IsAdopt.SetValue(data.IsAdopt), APDBDef.Advice.Reason.SetValue(data.Reason), APDBDef.Advice.Status.SetValue(data.Status), APDBDef.Advice.SupportCount.SetValue(data.SupportCount), APDBDef.Advice.CreatorId.SetValue(data.CreatorId), APDBDef.Advice.CreateDate.SetValue(data.CreateDate), APDBDef.Advice.ModifierId.SetValue(data.ModifierId), APDBDef.Advice.ModifyDate.SetValue(data.ModifyDate));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Advice data) {
                var query = APQuery.update(APDBDef.Advice).values(APDBDef.Advice.AdviceType.SetValue(data.AdviceType), APDBDef.Advice.Title.SetValue(data.Title), APDBDef.Advice.Content.SetValue(data.Content), APDBDef.Advice.IsAdopt.SetValue(data.IsAdopt), APDBDef.Advice.Reason.SetValue(data.Reason), APDBDef.Advice.Status.SetValue(data.Status), APDBDef.Advice.SupportCount.SetValue(data.SupportCount), APDBDef.Advice.CreatorId.SetValue(data.CreatorId), APDBDef.Advice.CreateDate.SetValue(data.CreateDate), APDBDef.Advice.ModifierId.SetValue(data.ModifierId), APDBDef.Advice.ModifyDate.SetValue(data.ModifyDate)).where((APDBDef.Advice.AdviceId == data.AdviceId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid adviceId, Object metadata) {
                var query = APQuery.update(APDBDef.Advice).values(APSqlSetPhraseSelector.Select(APDBDef.Advice, metadata)).where((APDBDef.Advice.AdviceId == adviceId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid adviceId) {
                var query = APQuery.delete(APDBDef.Advice).where((APDBDef.Advice.AdviceId == adviceId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Advice).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Advice.Asterisk.Count()).from(APDBDef.Advice).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Advice PrimaryGet(System.Guid adviceId) {
                var query = APQuery.select(APDBDef.Advice.Asterisk).from(APDBDef.Advice).where((APDBDef.Advice.AdviceId == adviceId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Advice.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Advice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Advice.Asterisk).from(APDBDef.Advice);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Advice.AdviceId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Advice.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Advice> GetInitData() {
                return new List<Advice>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Advice> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Advice data = list[i];
                    if ((PrimaryGet(data.AdviceId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 建议 Dal
        /// </summary>
        public partial class AdviceDal : AdviceDalBase {
            
            public AdviceDal() {
            }
            
            public AdviceDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 建议支持者明细 DalBase
        /// </summary>
        public partial class AdviceSupportDalBase : APDal {
            
            public AdviceSupportDalBase() {
            }
            
            public AdviceSupportDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(AdviceSupport data) {
                var query = APQuery.insert(APDBDef.AdviceSupport).values(APDBDef.AdviceSupport.SupportId.SetValue(data.SupportId), APDBDef.AdviceSupport.AdviceId.SetValue(data.AdviceId), APDBDef.AdviceSupport.SupporterId.SetValue(data.SupporterId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(AdviceSupport data) {
                var query = APQuery.update(APDBDef.AdviceSupport).values(APDBDef.AdviceSupport.AdviceId.SetValue(data.AdviceId), APDBDef.AdviceSupport.SupporterId.SetValue(data.SupporterId)).where((APDBDef.AdviceSupport.SupportId == data.SupportId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(System.Guid supportId, Object metadata) {
                var query = APQuery.update(APDBDef.AdviceSupport).values(APSqlSetPhraseSelector.Select(APDBDef.AdviceSupport, metadata)).where((APDBDef.AdviceSupport.SupportId == supportId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(System.Guid supportId) {
                var query = APQuery.delete(APDBDef.AdviceSupport).where((APDBDef.AdviceSupport.SupportId == supportId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.AdviceSupport).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.AdviceSupport.Asterisk.Count()).from(APDBDef.AdviceSupport).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual AdviceSupport PrimaryGet(System.Guid supportId) {
                var query = APQuery.select(APDBDef.AdviceSupport.Asterisk).from(APDBDef.AdviceSupport).where((APDBDef.AdviceSupport.SupportId == supportId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.AdviceSupport.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<AdviceSupport> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.AdviceSupport.Asterisk).from(APDBDef.AdviceSupport);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.AdviceSupport.SupportId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.AdviceSupport.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<AdviceSupport> GetInitData() {
                return new List<AdviceSupport>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<AdviceSupport> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    AdviceSupport data = list[i];
                    if ((PrimaryGet(data.SupportId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 建议支持者明细 Dal
        /// </summary>
        public partial class AdviceSupportDal : AdviceSupportDalBase {
            
            public AdviceSupportDal() {
            }
            
            public AdviceSupportDal(APDatabase db) : 
                    base(db) {
            }
        }
    }
    
    /// <summary>
    /// APBplDef 是一个自动生成的具有 Partial 修饰的类，用于定义所有的 Bpl 类。你可以 添加同名的 Partial 类来扩充功能。
    /// </summary>
    public partial class APBplDef {
        
        /// <summary>
        /// 用户账号 BplBase
        /// </summary>
        public partial class AccountBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Account data) {
                APDBDef db = new APDBDef();
                try {
                    db.AccountDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Account data) {
                APDBDef db = new APDBDef();
                try {
                    db.AccountDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid userId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.AccountDal.UpdatePartial(userId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid userId) {
                APDBDef db = new APDBDef();
                try {
                    db.AccountDal.PrimaryDelete(userId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.AccountDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.AccountDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Account PrimaryGet(System.Guid userId) {
                APDBDef db = new APDBDef();
                try {
                    return db.AccountDal.PrimaryGet(userId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Account> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.AccountDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Account> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.AccountDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Account> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.AccountDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Account> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 用户账号 Dal
        /// </summary>
        public partial class AccountBpl : AccountBplBase {
        }
        
        /// <summary>
        /// 用户信息 BplBase
        /// </summary>
        public partial class UserInfoBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(UserInfo data) {
                APDBDef db = new APDBDef();
                try {
                    db.UserInfoDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(UserInfo data) {
                APDBDef db = new APDBDef();
                try {
                    db.UserInfoDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid userId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.UserInfoDal.UpdatePartial(userId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid userId) {
                APDBDef db = new APDBDef();
                try {
                    db.UserInfoDal.PrimaryDelete(userId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.UserInfoDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.UserInfoDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static UserInfo PrimaryGet(System.Guid userId) {
                APDBDef db = new APDBDef();
                try {
                    return db.UserInfoDal.PrimaryGet(userId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<UserInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.UserInfoDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<UserInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.UserInfoDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<UserInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.UserInfoDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<UserInfo> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 用户信息 Dal
        /// </summary>
        public partial class UserInfoBpl : UserInfoBplBase {
        }
        
        /// <summary>
        /// 应用程序库(权限) BplBase
        /// </summary>
        public partial class AppBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(App data) {
                APDBDef db = new APDBDef();
                try {
                    db.AppDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(App data) {
                APDBDef db = new APDBDef();
                try {
                    db.AppDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid appId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.AppDal.UpdatePartial(appId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid appId) {
                APDBDef db = new APDBDef();
                try {
                    db.AppDal.PrimaryDelete(appId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.AppDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.AppDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static App PrimaryGet(System.Guid appId) {
                APDBDef db = new APDBDef();
                try {
                    return db.AppDal.PrimaryGet(appId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<App> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.AppDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<App> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.AppDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<App> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.AppDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<App> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 应用程序库(权限) Dal
        /// </summary>
        public partial class AppBpl : AppBplBase {
        }
        
        /// <summary>
        /// 角色 BplBase
        /// </summary>
        public partial class RoleBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Role data) {
                APDBDef db = new APDBDef();
                try {
                    db.RoleDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Role data) {
                APDBDef db = new APDBDef();
                try {
                    db.RoleDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid roleId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.RoleDal.UpdatePartial(roleId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid roleId) {
                APDBDef db = new APDBDef();
                try {
                    db.RoleDal.PrimaryDelete(roleId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.RoleDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.RoleDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Role PrimaryGet(System.Guid roleId) {
                APDBDef db = new APDBDef();
                try {
                    return db.RoleDal.PrimaryGet(roleId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Role> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.RoleDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Role> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.RoleDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Role> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.RoleDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Role> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 角色 Dal
        /// </summary>
        public partial class RoleBpl : RoleBplBase {
        }
        
        /// <summary>
        /// 用户角色 BplBase
        /// </summary>
        public partial class UserRoleBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(UserRole data) {
                APDBDef db = new APDBDef();
                try {
                    db.UserRoleDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(UserRole data) {
                APDBDef db = new APDBDef();
                try {
                    db.UserRoleDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid iD, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.UserRoleDal.UpdatePartial(iD, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid iD) {
                APDBDef db = new APDBDef();
                try {
                    db.UserRoleDal.PrimaryDelete(iD);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.UserRoleDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.UserRoleDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static UserRole PrimaryGet(System.Guid iD) {
                APDBDef db = new APDBDef();
                try {
                    return db.UserRoleDal.PrimaryGet(iD);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<UserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.UserRoleDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<UserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.UserRoleDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<UserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.UserRoleDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<UserRole> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 用户角色 Dal
        /// </summary>
        public partial class UserRoleBpl : UserRoleBplBase {
        }
        
        /// <summary>
        /// 单位表 BplBase
        /// </summary>
        public partial class CompanyInfoBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(CompanyInfo data) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyInfoDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(CompanyInfo data) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyInfoDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid companyId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyInfoDal.UpdatePartial(companyId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid companyId) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyInfoDal.PrimaryDelete(companyId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyInfoDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyInfoDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static CompanyInfo PrimaryGet(System.Guid companyId) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyInfoDal.PrimaryGet(companyId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<CompanyInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyInfoDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<CompanyInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyInfoDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<CompanyInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyInfoDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<CompanyInfo> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 单位表 Dal
        /// </summary>
        public partial class CompanyInfoBpl : CompanyInfoBplBase {
        }
        
        /// <summary>
        /// 项目 BplBase
        /// </summary>
        public partial class ProjectBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Project data) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Project data) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid projectId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectDal.UpdatePartial(projectId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid projectId) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectDal.PrimaryDelete(projectId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Project PrimaryGet(System.Guid projectId) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectDal.PrimaryGet(projectId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Project> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Project> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Project> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Project> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 项目 Dal
        /// </summary>
        public partial class ProjectBpl : ProjectBplBase {
        }
        
        /// <summary>
        /// 项目记录 BplBase
        /// </summary>
        public partial class ProjectRecordBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(ProjectRecord data) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectRecordDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(ProjectRecord data) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectRecordDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid recordId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectRecordDal.UpdatePartial(recordId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid recordId) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectRecordDal.PrimaryDelete(recordId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectRecordDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectRecordDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static ProjectRecord PrimaryGet(System.Guid recordId) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectRecordDal.PrimaryGet(recordId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ProjectRecord> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectRecordDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ProjectRecord> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectRecordDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ProjectRecord> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectRecordDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<ProjectRecord> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 项目记录 Dal
        /// </summary>
        public partial class ProjectRecordBpl : ProjectRecordBplBase {
        }
        
        /// <summary>
        /// 项目角色 BplBase
        /// </summary>
        public partial class ProjectRoleBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(ProjectRole data) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectRoleDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(ProjectRole data) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectRoleDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid pRID, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectRoleDal.UpdatePartial(pRID, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid pRID) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectRoleDal.PrimaryDelete(pRID);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectRoleDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectRoleDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static ProjectRole PrimaryGet(System.Guid pRID) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectRoleDal.PrimaryGet(pRID);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ProjectRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectRoleDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ProjectRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectRoleDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ProjectRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectRoleDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<ProjectRole> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 项目角色 Dal
        /// </summary>
        public partial class ProjectRoleBpl : ProjectRoleBplBase {
        }
        
        /// <summary>
        /// 项目资源 BplBase
        /// </summary>
        public partial class ResourceBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Resource data) {
                APDBDef db = new APDBDef();
                try {
                    db.ResourceDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Resource data) {
                APDBDef db = new APDBDef();
                try {
                    db.ResourceDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid resourceId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.ResourceDal.UpdatePartial(resourceId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid resourceId) {
                APDBDef db = new APDBDef();
                try {
                    db.ResourceDal.PrimaryDelete(resourceId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.ResourceDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResourceDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Resource PrimaryGet(System.Guid resourceId) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResourceDal.PrimaryGet(resourceId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Resource> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResourceDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Resource> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResourceDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Resource> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.ResourceDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Resource> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 项目资源 Dal
        /// </summary>
        public partial class ResourceBpl : ResourceBplBase {
        }
        
        /// <summary>
        /// 款项 BplBase
        /// </summary>
        public partial class PaymentsBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Payments data) {
                APDBDef db = new APDBDef();
                try {
                    db.PaymentsDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Payments data) {
                APDBDef db = new APDBDef();
                try {
                    db.PaymentsDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid payId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.PaymentsDal.UpdatePartial(payId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid payId) {
                APDBDef db = new APDBDef();
                try {
                    db.PaymentsDal.PrimaryDelete(payId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.PaymentsDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.PaymentsDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Payments PrimaryGet(System.Guid payId) {
                APDBDef db = new APDBDef();
                try {
                    return db.PaymentsDal.PrimaryGet(payId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Payments> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.PaymentsDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Payments> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.PaymentsDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Payments> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.PaymentsDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Payments> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 款项 Dal
        /// </summary>
        public partial class PaymentsBpl : PaymentsBplBase {
        }
        
        /// <summary>
        ///  BplBase
        /// </summary>
        public partial class MileStoneBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(MileStone data) {
                APDBDef db = new APDBDef();
                try {
                    db.MileStoneDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(MileStone data) {
                APDBDef db = new APDBDef();
                try {
                    db.MileStoneDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid stoneId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.MileStoneDal.UpdatePartial(stoneId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid stoneId) {
                APDBDef db = new APDBDef();
                try {
                    db.MileStoneDal.PrimaryDelete(stoneId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.MileStoneDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.MileStoneDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static MileStone PrimaryGet(System.Guid stoneId) {
                APDBDef db = new APDBDef();
                try {
                    return db.MileStoneDal.PrimaryGet(stoneId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<MileStone> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.MileStoneDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<MileStone> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.MileStoneDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<MileStone> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.MileStoneDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<MileStone> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        ///  Dal
        /// </summary>
        public partial class MileStoneBpl : MileStoneBplBase {
        }
        
        /// <summary>
        ///  BplBase
        /// </summary>
        public partial class ProjectMileStoneBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(ProjectMileStone data) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectMileStoneDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(ProjectMileStone data) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectMileStoneDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid pmsId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectMileStoneDal.UpdatePartial(pmsId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid pmsId) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectMileStoneDal.PrimaryDelete(pmsId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectMileStoneDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectMileStoneDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static ProjectMileStone PrimaryGet(System.Guid pmsId) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectMileStoneDal.PrimaryGet(pmsId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ProjectMileStone> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectMileStoneDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ProjectMileStone> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectMileStoneDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ProjectMileStone> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectMileStoneDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<ProjectMileStone> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        ///  Dal
        /// </summary>
        public partial class ProjectMileStoneBpl : ProjectMileStoneBplBase {
        }
        
        /// <summary>
        ///  BplBase
        /// </summary>
        public partial class ProjectStoneTaskBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(ProjectStoneTask data) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectStoneTaskDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(ProjectStoneTask data) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectStoneTaskDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid pstId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectStoneTaskDal.UpdatePartial(pstId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid pstId) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectStoneTaskDal.PrimaryDelete(pstId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.ProjectStoneTaskDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectStoneTaskDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static ProjectStoneTask PrimaryGet(System.Guid pstId) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectStoneTaskDal.PrimaryGet(pstId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ProjectStoneTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectStoneTaskDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ProjectStoneTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectStoneTaskDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ProjectStoneTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProjectStoneTaskDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<ProjectStoneTask> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        ///  Dal
        /// </summary>
        public partial class ProjectStoneTaskBpl : ProjectStoneTaskBplBase {
        }
        
        /// <summary>
        /// 工作任务 BplBase
        /// </summary>
        public partial class WorkTaskBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(WorkTask data) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(WorkTask data) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid taskId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskDal.UpdatePartial(taskId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid taskId) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskDal.PrimaryDelete(taskId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static WorkTask PrimaryGet(System.Guid taskId) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskDal.PrimaryGet(taskId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WorkTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WorkTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WorkTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<WorkTask> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 工作任务 Dal
        /// </summary>
        public partial class WorkTaskBpl : WorkTaskBplBase {
        }
        
        /// <summary>
        /// 任务记录 BplBase
        /// </summary>
        public partial class WorkTaskLogBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(WorkTaskLog data) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskLogDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(WorkTaskLog data) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskLogDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid logID, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskLogDal.UpdatePartial(logID, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid logID) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskLogDal.PrimaryDelete(logID);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskLogDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskLogDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static WorkTaskLog PrimaryGet(System.Guid logID) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskLogDal.PrimaryGet(logID);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WorkTaskLog> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskLogDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WorkTaskLog> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskLogDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WorkTaskLog> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskLogDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<WorkTaskLog> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 任务记录 Dal
        /// </summary>
        public partial class WorkTaskLogBpl : WorkTaskLogBplBase {
        }
        
        /// <summary>
        /// 任务复杂度 BplBase
        /// </summary>
        public partial class WorkTaskComplextiyBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(WorkTaskComplextiy data) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskComplextiyDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(WorkTaskComplextiy data) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskComplextiyDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid complextiyId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskComplextiyDal.UpdatePartial(complextiyId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid complextiyId) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskComplextiyDal.PrimaryDelete(complextiyId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskComplextiyDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskComplextiyDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static WorkTaskComplextiy PrimaryGet(System.Guid complextiyId) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskComplextiyDal.PrimaryGet(complextiyId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WorkTaskComplextiy> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskComplextiyDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WorkTaskComplextiy> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskComplextiyDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WorkTaskComplextiy> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskComplextiyDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<WorkTaskComplextiy> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 任务复杂度 Dal
        /// </summary>
        public partial class WorkTaskComplextiyBpl : WorkTaskComplextiyBplBase {
        }
        
        /// <summary>
        /// 任务问题 BplBase
        /// </summary>
        public partial class WorkTaskIssueBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(WorkTaskIssue data) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskIssueDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(WorkTaskIssue data) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskIssueDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid taskIssueId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskIssueDal.UpdatePartial(taskIssueId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid taskIssueId) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskIssueDal.PrimaryDelete(taskIssueId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkTaskIssueDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskIssueDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static WorkTaskIssue PrimaryGet(System.Guid taskIssueId) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskIssueDal.PrimaryGet(taskIssueId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WorkTaskIssue> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskIssueDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WorkTaskIssue> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskIssueDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WorkTaskIssue> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkTaskIssueDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<WorkTaskIssue> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 任务问题 Dal
        /// </summary>
        public partial class WorkTaskIssueBpl : WorkTaskIssueBplBase {
        }
        
        /// <summary>
        /// 任务复杂度调整角色权重，(例如项目经理-调整某个复杂度为50%的占比，所有角色占比和为100%)，注意如果是标准复杂度，角色为空 BplBase
        /// </summary>
        public partial class TaskCompelxtiyRoleBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(TaskCompelxtiyRole data) {
                APDBDef db = new APDBDef();
                try {
                    db.TaskCompelxtiyRoleDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(TaskCompelxtiyRole data) {
                APDBDef db = new APDBDef();
                try {
                    db.TaskCompelxtiyRoleDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid compelxtiyRoleId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.TaskCompelxtiyRoleDal.UpdatePartial(compelxtiyRoleId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid compelxtiyRoleId) {
                APDBDef db = new APDBDef();
                try {
                    db.TaskCompelxtiyRoleDal.PrimaryDelete(compelxtiyRoleId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.TaskCompelxtiyRoleDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.TaskCompelxtiyRoleDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static TaskCompelxtiyRole PrimaryGet(System.Guid compelxtiyRoleId) {
                APDBDef db = new APDBDef();
                try {
                    return db.TaskCompelxtiyRoleDal.PrimaryGet(compelxtiyRoleId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TaskCompelxtiyRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.TaskCompelxtiyRoleDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TaskCompelxtiyRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.TaskCompelxtiyRoleDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TaskCompelxtiyRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.TaskCompelxtiyRoleDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<TaskCompelxtiyRole> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 任务复杂度调整角色权重，(例如项目经理-调整某个复杂度为50%的占比，所有角色占比和为100%)，注意如果是标准复杂度，角色为空 Dal
        /// </summary>
        public partial class TaskCompelxtiyRoleBpl : TaskCompelxtiyRoleBplBase {
        }
        
        /// <summary>
        /// 任务标准项（包含标准复杂度和标准工时） BplBase
        /// </summary>
        public partial class TaskStandardItemBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(TaskStandardItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.TaskStandardItemDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(TaskStandardItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.TaskStandardItemDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid itemId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.TaskStandardItemDal.UpdatePartial(itemId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid itemId) {
                APDBDef db = new APDBDef();
                try {
                    db.TaskStandardItemDal.PrimaryDelete(itemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.TaskStandardItemDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.TaskStandardItemDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static TaskStandardItem PrimaryGet(System.Guid itemId) {
                APDBDef db = new APDBDef();
                try {
                    return db.TaskStandardItemDal.PrimaryGet(itemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TaskStandardItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.TaskStandardItemDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TaskStandardItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.TaskStandardItemDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TaskStandardItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.TaskStandardItemDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<TaskStandardItem> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 任务标准项（包含标准复杂度和标准工时） Dal
        /// </summary>
        public partial class TaskStandardItemBpl : TaskStandardItemBplBase {
        }
        
        /// <summary>
        /// 问题项 BplBase
        /// </summary>
        public partial class IssueItemBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(IssueItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.IssueItemDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(IssueItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.IssueItemDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid itemId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.IssueItemDal.UpdatePartial(itemId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid itemId) {
                APDBDef db = new APDBDef();
                try {
                    db.IssueItemDal.PrimaryDelete(itemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.IssueItemDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.IssueItemDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static IssueItem PrimaryGet(System.Guid itemId) {
                APDBDef db = new APDBDef();
                try {
                    return db.IssueItemDal.PrimaryGet(itemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<IssueItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.IssueItemDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<IssueItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.IssueItemDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<IssueItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.IssueItemDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<IssueItem> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 问题项 Dal
        /// </summary>
        public partial class IssueItemBpl : IssueItemBplBase {
        }
        
        /// <summary>
        /// 工作日志 BplBase
        /// </summary>
        public partial class WorkJournalBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(WorkJournal data) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkJournalDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(WorkJournal data) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkJournalDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid journalId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkJournalDal.UpdatePartial(journalId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid journalId) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkJournalDal.PrimaryDelete(journalId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkJournalDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkJournalDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static WorkJournal PrimaryGet(System.Guid journalId) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkJournalDal.PrimaryGet(journalId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WorkJournal> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkJournalDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WorkJournal> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkJournalDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WorkJournal> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkJournalDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<WorkJournal> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 工作日志 Dal
        /// </summary>
        public partial class WorkJournalBpl : WorkJournalBplBase {
        }
        
        /// <summary>
        /// 文件 BplBase
        /// </summary>
        public partial class AttachmentBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Attachment data) {
                APDBDef db = new APDBDef();
                try {
                    db.AttachmentDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Attachment data) {
                APDBDef db = new APDBDef();
                try {
                    db.AttachmentDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid attachmentId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.AttachmentDal.UpdatePartial(attachmentId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid attachmentId) {
                APDBDef db = new APDBDef();
                try {
                    db.AttachmentDal.PrimaryDelete(attachmentId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.AttachmentDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.AttachmentDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Attachment PrimaryGet(System.Guid attachmentId) {
                APDBDef db = new APDBDef();
                try {
                    return db.AttachmentDal.PrimaryGet(attachmentId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Attachment> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.AttachmentDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Attachment> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.AttachmentDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Attachment> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.AttachmentDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Attachment> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 文件 Dal
        /// </summary>
        public partial class AttachmentBpl : AttachmentBplBase {
        }
        
        /// <summary>
        /// 字典 BplBase
        /// </summary>
        public partial class DictionaryBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Dictionary data) {
                APDBDef db = new APDBDef();
                try {
                    db.DictionaryDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Dictionary data) {
                APDBDef db = new APDBDef();
                try {
                    db.DictionaryDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid iD, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.DictionaryDal.UpdatePartial(iD, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid iD) {
                APDBDef db = new APDBDef();
                try {
                    db.DictionaryDal.PrimaryDelete(iD);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.DictionaryDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.DictionaryDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Dictionary PrimaryGet(System.Guid iD) {
                APDBDef db = new APDBDef();
                try {
                    return db.DictionaryDal.PrimaryGet(iD);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Dictionary> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.DictionaryDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Dictionary> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.DictionaryDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Dictionary> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.DictionaryDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Dictionary> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 字典 Dal
        /// </summary>
        public partial class DictionaryBpl : DictionaryBplBase {
        }
        
        /// <summary>
        ///  BplBase
        /// </summary>
        public partial class ReviewBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Review data) {
                APDBDef db = new APDBDef();
                try {
                    db.ReviewDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Review data) {
                APDBDef db = new APDBDef();
                try {
                    db.ReviewDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid reviewId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.ReviewDal.UpdatePartial(reviewId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid reviewId) {
                APDBDef db = new APDBDef();
                try {
                    db.ReviewDal.PrimaryDelete(reviewId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.ReviewDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.ReviewDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Review PrimaryGet(System.Guid reviewId) {
                APDBDef db = new APDBDef();
                try {
                    return db.ReviewDal.PrimaryGet(reviewId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Review> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.ReviewDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Review> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.ReviewDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Review> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.ReviewDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Review> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        ///  Dal
        /// </summary>
        public partial class ReviewBpl : ReviewBplBase {
        }
        
        /// <summary>
        /// 流程任务（专属于第三方工作流） BplBase
        /// </summary>
        public partial class WorkflowTaskBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(WorkflowTask data) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkflowTaskDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(WorkflowTask data) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkflowTaskDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid taskId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkflowTaskDal.UpdatePartial(taskId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid taskId) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkflowTaskDal.PrimaryDelete(taskId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.WorkflowTaskDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkflowTaskDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static WorkflowTask PrimaryGet(System.Guid taskId) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkflowTaskDal.PrimaryGet(taskId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WorkflowTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkflowTaskDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WorkflowTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkflowTaskDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<WorkflowTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.WorkflowTaskDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<WorkflowTask> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 流程任务（专属于第三方工作流） Dal
        /// </summary>
        public partial class WorkflowTaskBpl : WorkflowTaskBplBase {
        }
        
        /// <summary>
        /// 指标 BplBase
        /// </summary>
        public partial class IndicationBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Indication data) {
                APDBDef db = new APDBDef();
                try {
                    db.IndicationDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Indication data) {
                APDBDef db = new APDBDef();
                try {
                    db.IndicationDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid indicationId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.IndicationDal.UpdatePartial(indicationId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid indicationId) {
                APDBDef db = new APDBDef();
                try {
                    db.IndicationDal.PrimaryDelete(indicationId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.IndicationDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.IndicationDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Indication PrimaryGet(System.Guid indicationId) {
                APDBDef db = new APDBDef();
                try {
                    return db.IndicationDal.PrimaryGet(indicationId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Indication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.IndicationDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Indication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.IndicationDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Indication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.IndicationDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Indication> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 指标 Dal
        /// </summary>
        public partial class IndicationBpl : IndicationBplBase {
        }
        
        /// <summary>
        /// 考核表-指标-关联 BplBase
        /// </summary>
        public partial class EvalIndicationBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalIndication data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalIndicationDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalIndication data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalIndicationDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid id, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalIndicationDal.UpdatePartial(id, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid id) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalIndicationDal.PrimaryDelete(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalIndicationDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalIndicationDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalIndication PrimaryGet(System.Guid id) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalIndicationDal.PrimaryGet(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalIndication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalIndicationDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalIndication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalIndicationDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalIndication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalIndicationDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalIndication> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 考核表-指标-关联 Dal
        /// </summary>
        public partial class EvalIndicationBpl : EvalIndicationBplBase {
        }
        
        /// <summary>
        /// 考核-指标-指标项 BplBase
        /// </summary>
        public partial class EvalIndicationItemBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalIndicationItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalIndicationItemDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalIndicationItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalIndicationItemDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid itemId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalIndicationItemDal.UpdatePartial(itemId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid itemId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalIndicationItemDal.PrimaryDelete(itemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalIndicationItemDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalIndicationItemDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalIndicationItem PrimaryGet(System.Guid itemId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalIndicationItemDal.PrimaryGet(itemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalIndicationItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalIndicationItemDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalIndicationItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalIndicationItemDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalIndicationItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalIndicationItemDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalIndicationItem> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 考核-指标-指标项 Dal
        /// </summary>
        public partial class EvalIndicationItemBpl : EvalIndicationItemBplBase {
        }
        
        /// <summary>
        /// 考核表 BplBase
        /// </summary>
        public partial class EvalTableBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalTable data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalTableDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalTable data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalTableDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid tableId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalTableDal.UpdatePartial(tableId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid tableId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalTableDal.PrimaryDelete(tableId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalTableDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalTableDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalTable PrimaryGet(System.Guid tableId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalTableDal.PrimaryGet(tableId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalTable> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalTableDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalTable> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalTableDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalTable> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalTableDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalTable> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 考核表 Dal
        /// </summary>
        public partial class EvalTableBpl : EvalTableBplBase {
        }
        
        /// <summary>
        /// 评价-周期 BplBase
        /// </summary>
        public partial class EvalPeriodBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalPeriod data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalPeriodDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalPeriod data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalPeriodDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid periodId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalPeriodDal.UpdatePartial(periodId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid periodId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalPeriodDal.PrimaryDelete(periodId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalPeriodDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalPeriodDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalPeriod PrimaryGet(System.Guid periodId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalPeriodDal.PrimaryGet(periodId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalPeriodDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalPeriodDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalPeriodDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalPeriod> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 评价-周期 Dal
        /// </summary>
        public partial class EvalPeriodBpl : EvalPeriodBplBase {
        }
        
        /// <summary>
        /// 考核表-比重 BplBase
        /// </summary>
        public partial class EvalTargetTablePropertionBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalTargetTablePropertion data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalTargetTablePropertionDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalTargetTablePropertion data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalTargetTablePropertionDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid propertionID, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalTargetTablePropertionDal.UpdatePartial(propertionID, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid propertionID) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalTargetTablePropertionDal.PrimaryDelete(propertionID);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalTargetTablePropertionDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalTargetTablePropertionDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalTargetTablePropertion PrimaryGet(System.Guid propertionID) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalTargetTablePropertionDal.PrimaryGet(propertionID);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalTargetTablePropertion> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalTargetTablePropertionDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalTargetTablePropertion> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalTargetTablePropertionDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalTargetTablePropertion> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalTargetTablePropertionDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalTargetTablePropertion> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 考核表-比重 Dal
        /// </summary>
        public partial class EvalTargetTablePropertionBpl : EvalTargetTablePropertionBplBase {
        }
        
        /// <summary>
        /// 考核组 BplBase
        /// </summary>
        public partial class EvalGroupBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalGroup data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalGroup data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid groupId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupDal.UpdatePartial(groupId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid groupId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupDal.PrimaryDelete(groupId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalGroup PrimaryGet(System.Guid groupId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupDal.PrimaryGet(groupId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalGroup> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 考核组 Dal
        /// </summary>
        public partial class EvalGroupBpl : EvalGroupBplBase {
        }
        
        /// <summary>
        /// 考核组-成员 BplBase
        /// </summary>
        public partial class EvalGroupMemberBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalGroupMember data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupMemberDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalGroupMember data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupMemberDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid groupMemberId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupMemberDal.UpdatePartial(groupMemberId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid groupMemberId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupMemberDal.PrimaryDelete(groupMemberId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupMemberDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupMemberDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalGroupMember PrimaryGet(System.Guid groupMemberId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupMemberDal.PrimaryGet(groupMemberId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalGroupMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupMemberDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalGroupMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupMemberDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalGroupMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupMemberDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalGroupMember> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 考核组-成员 Dal
        /// </summary>
        public partial class EvalGroupMemberBpl : EvalGroupMemberBplBase {
        }
        
        /// <summary>
        /// 考核组-评审人 BplBase
        /// </summary>
        public partial class EvalGroupAccessorBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalGroupAccessor data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupAccessorDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalGroupAccessor data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupAccessorDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid groupAccessorId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupAccessorDal.UpdatePartial(groupAccessorId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid groupAccessorId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupAccessorDal.PrimaryDelete(groupAccessorId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalGroupAccessorDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupAccessorDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalGroupAccessor PrimaryGet(System.Guid groupAccessorId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupAccessorDal.PrimaryGet(groupAccessorId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalGroupAccessor> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupAccessorDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalGroupAccessor> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupAccessorDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalGroupAccessor> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalGroupAccessorDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalGroupAccessor> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 考核组-评审人 Dal
        /// </summary>
        public partial class EvalGroupAccessorBpl : EvalGroupAccessorBplBase {
        }
        
        /// <summary>
        /// 评审人-评审对象 BplBase
        /// </summary>
        public partial class EvalAccessorTargetBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalAccessorTarget data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalAccessorTargetDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalAccessorTarget data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalAccessorTargetDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid accessorTargetId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalAccessorTargetDal.UpdatePartial(accessorTargetId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid accessorTargetId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalAccessorTargetDal.PrimaryDelete(accessorTargetId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalAccessorTargetDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalAccessorTargetDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalAccessorTarget PrimaryGet(System.Guid accessorTargetId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalAccessorTargetDal.PrimaryGet(accessorTargetId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalAccessorTarget> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalAccessorTargetDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalAccessorTarget> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalAccessorTargetDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalAccessorTarget> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalAccessorTargetDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalAccessorTarget> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 评审人-评审对象 Dal
        /// </summary>
        public partial class EvalAccessorTargetBpl : EvalAccessorTargetBplBase {
        }
        
        /// <summary>
        /// 评价-结果 BplBase
        /// </summary>
        public partial class EvalResultBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalResult data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalResult data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid resultId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultDal.UpdatePartial(resultId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid resultId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultDal.PrimaryDelete(resultId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalResult PrimaryGet(System.Guid resultId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultDal.PrimaryGet(resultId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalResult> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 评价-结果 Dal
        /// </summary>
        public partial class EvalResultBpl : EvalResultBplBase {
        }
        
        /// <summary>
        /// 评价-结果-结果项 BplBase
        /// </summary>
        public partial class EvalResultItemBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalResultItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultItemDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalResultItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultItemDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid resultItemId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultItemDal.UpdatePartial(resultItemId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid resultItemId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultItemDal.PrimaryDelete(resultItemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalResultItemDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultItemDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalResultItem PrimaryGet(System.Guid resultItemId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultItemDal.PrimaryGet(resultItemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultItemDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultItemDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalResultItemDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalResultItem> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 评价-结果-结果项 Dal
        /// </summary>
        public partial class EvalResultItemBpl : EvalResultItemBplBase {
        }
        
        /// <summary>
        /// 评价-最终-结果 BplBase
        /// </summary>
        public partial class EvalSubmitResultBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalSubmitResult data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalSubmitResultDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalSubmitResult data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalSubmitResultDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid submitResultId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalSubmitResultDal.UpdatePartial(submitResultId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid submitResultId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalSubmitResultDal.PrimaryDelete(submitResultId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalSubmitResultDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalSubmitResultDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalSubmitResult PrimaryGet(System.Guid submitResultId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalSubmitResultDal.PrimaryGet(submitResultId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalSubmitResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalSubmitResultDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalSubmitResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalSubmitResultDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalSubmitResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalSubmitResultDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalSubmitResult> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 评价-最终-结果 Dal
        /// </summary>
        public partial class EvalSubmitResultBpl : EvalSubmitResultBplBase {
        }
        
        /// <summary>
        /// 文件夹 BplBase
        /// </summary>
        public partial class FolderBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Folder data) {
                APDBDef db = new APDBDef();
                try {
                    db.FolderDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Folder data) {
                APDBDef db = new APDBDef();
                try {
                    db.FolderDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid folderId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.FolderDal.UpdatePartial(folderId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid folderId) {
                APDBDef db = new APDBDef();
                try {
                    db.FolderDal.PrimaryDelete(folderId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.FolderDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.FolderDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Folder PrimaryGet(System.Guid folderId) {
                APDBDef db = new APDBDef();
                try {
                    return db.FolderDal.PrimaryGet(folderId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Folder> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.FolderDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Folder> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.FolderDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Folder> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.FolderDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Folder> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 文件夹 Dal
        /// </summary>
        public partial class FolderBpl : FolderBplBase {
        }
        
        /// <summary>
        ///  BplBase
        /// </summary>
        public partial class FolderFileBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(FolderFile data) {
                APDBDef db = new APDBDef();
                try {
                    db.FolderFileDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(FolderFile data) {
                APDBDef db = new APDBDef();
                try {
                    db.FolderFileDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid folderFileId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.FolderFileDal.UpdatePartial(folderFileId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid folderFileId) {
                APDBDef db = new APDBDef();
                try {
                    db.FolderFileDal.PrimaryDelete(folderFileId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.FolderFileDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.FolderFileDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static FolderFile PrimaryGet(System.Guid folderFileId) {
                APDBDef db = new APDBDef();
                try {
                    return db.FolderFileDal.PrimaryGet(folderFileId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<FolderFile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.FolderFileDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<FolderFile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.FolderFileDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<FolderFile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.FolderFileDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<FolderFile> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        ///  Dal
        /// </summary>
        public partial class FolderFileBpl : FolderFileBplBase {
        }
        
        /// <summary>
        /// 建议 BplBase
        /// </summary>
        public partial class AdviceBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Advice data) {
                APDBDef db = new APDBDef();
                try {
                    db.AdviceDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Advice data) {
                APDBDef db = new APDBDef();
                try {
                    db.AdviceDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid adviceId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.AdviceDal.UpdatePartial(adviceId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid adviceId) {
                APDBDef db = new APDBDef();
                try {
                    db.AdviceDal.PrimaryDelete(adviceId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.AdviceDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.AdviceDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Advice PrimaryGet(System.Guid adviceId) {
                APDBDef db = new APDBDef();
                try {
                    return db.AdviceDal.PrimaryGet(adviceId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Advice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.AdviceDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Advice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.AdviceDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Advice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.AdviceDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Advice> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 建议 Dal
        /// </summary>
        public partial class AdviceBpl : AdviceBplBase {
        }
        
        /// <summary>
        /// 建议支持者明细 BplBase
        /// </summary>
        public partial class AdviceSupportBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(AdviceSupport data) {
                APDBDef db = new APDBDef();
                try {
                    db.AdviceSupportDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(AdviceSupport data) {
                APDBDef db = new APDBDef();
                try {
                    db.AdviceSupportDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(System.Guid supportId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.AdviceSupportDal.UpdatePartial(supportId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(System.Guid supportId) {
                APDBDef db = new APDBDef();
                try {
                    db.AdviceSupportDal.PrimaryDelete(supportId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.AdviceSupportDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.AdviceSupportDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static AdviceSupport PrimaryGet(System.Guid supportId) {
                APDBDef db = new APDBDef();
                try {
                    return db.AdviceSupportDal.PrimaryGet(supportId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<AdviceSupport> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.AdviceSupportDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<AdviceSupport> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.AdviceSupportDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<AdviceSupport> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.AdviceSupportDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<AdviceSupport> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 建议支持者明细 Dal
        /// </summary>
        public partial class AdviceSupportBpl : AdviceSupportBplBase {
        }
    }
    
    /// <summary>
    /// 用户账号 Base
    /// </summary>
    [Serializable()]
    public abstract partial class AccountBase {
        
        /// <summary>
        /// 用户ID
        /// </summary>
        private System.Guid _userId;
        
        /// <summary>
        /// UserName
        /// </summary>
        private string _userName = string.Empty;
        
        /// <summary>
        /// Account
        /// </summary>
        private string _account = string.Empty;
        
        /// <summary>
        /// Password
        /// </summary>
        private string _password = string.Empty;
        
        /// <summary>
        /// Status
        /// </summary>
        private int _status = 0;
        
        /// <summary>
        /// Sort
        /// </summary>
        private int _sort = 0;
        
        /// <summary>
        /// Note
        /// </summary>
        private string _note;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public AccountBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public AccountBase(System.Guid userId, string userName, string account, string password, int status, int sort, string note) {
            _userId = userId;
            _userName = userName;
            _account = account;
            _password = password;
            _status = status;
            _sort = sort;
            _note = note;
        }
        
        /// <summary>
        /// 用户ID
        /// </summary>
        public virtual System.Guid UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// 用户ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef UserIdDef {
            get {
                return APDBDef.Account.UserId;
            }
        }
        
        /// <summary>
        /// UserName
        /// </summary>
        [Display(Name="用户名")]
        [Required()]
        [StringLength(40)]
        public virtual string UserName {
            get {
                return _userName;
            }
            set {
                _userName = value;
            }
        }
        
        /// <summary>
        /// UserName APColumnDef
        /// </summary>
        public static StringAPColumnDef UserNameDef {
            get {
                return APDBDef.Account.UserName;
            }
        }
        
        /// <summary>
        /// Account
        /// </summary>
        [Display(Name="账号")]
        [Required()]
        [StringLength(40)]
        public virtual string Account {
            get {
                return _account;
            }
            set {
                _account = value;
            }
        }
        
        /// <summary>
        /// Account APColumnDef
        /// </summary>
        public static StringAPColumnDef AccountDef {
            get {
                return APDBDef.Account.Account;
            }
        }
        
        /// <summary>
        /// Password
        /// </summary>
        [Display(Name="密码")]
        [Required()]
        [StringLength(40)]
        public virtual string Password {
            get {
                return _password;
            }
            set {
                _password = value;
            }
        }
        
        /// <summary>
        /// Password APColumnDef
        /// </summary>
        public static StringAPColumnDef PasswordDef {
            get {
                return APDBDef.Account.Password;
            }
        }
        
        /// <summary>
        /// Status
        /// </summary>
        [Display(Name="账号状态")]
        public virtual int Status {
            get {
                return _status;
            }
            set {
                _status = value;
            }
        }
        
        /// <summary>
        /// Status APColumnDef
        /// </summary>
        public static Int32APColumnDef StatusDef {
            get {
                return APDBDef.Account.Status;
            }
        }
        
        /// <summary>
        /// Sort
        /// </summary>
        [Display(Name="账号排序号")]
        public virtual int Sort {
            get {
                return _sort;
            }
            set {
                _sort = value;
            }
        }
        
        /// <summary>
        /// Sort APColumnDef
        /// </summary>
        public static Int32APColumnDef SortDef {
            get {
                return APDBDef.Account.Sort;
            }
        }
        
        /// <summary>
        /// Note
        /// </summary>
        [Display(Name="备注")]
        [StringLength(1000)]
        public virtual string Note {
            get {
                return _note;
            }
            set {
                _note = value;
            }
        }
        
        /// <summary>
        /// Note APColumnDef
        /// </summary>
        public static StringAPColumnDef NoteDef {
            get {
                return APDBDef.Account.Note;
            }
        }
        
        /// <summary>
        /// AccountTableDef APTableDef
        /// </summary>
        public static APDBDef.AccountTableDef TableDef {
            get {
                return APDBDef.Account;
            }
        }
        
        /// <summary>
        /// AccountTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Account.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Account data) {
            UserId = data.UserId;
            UserName = data.UserName;
            Account = data.Account;
            Password = data.Password;
            Status = data.Status;
            Sort = data.Sort;
            Note = data.Note;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Account data) {
            if ((UserId != data.UserId)) {
                return false;
            }
            if ((UserName != data.UserName)) {
                return false;
            }
            if ((Account != data.Account)) {
                return false;
            }
            if ((Password != data.Password)) {
                return false;
            }
            if ((Status != data.Status)) {
                return false;
            }
            if ((Sort != data.Sort)) {
                return false;
            }
            if ((Note != data.Note)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.AccountBpl.Insert(((Account)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.AccountBpl.Update(((Account)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid userId, Object metadata) {
            APBplDef.AccountBpl.UpdatePartial(userId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid userId) {
            APBplDef.AccountBpl.PrimaryDelete(userId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.AccountBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.AccountBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Account PrimaryGet(System.Guid userId) {
            return APBplDef.AccountBpl.PrimaryGet(userId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Account> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.AccountBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Account> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.AccountBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Account> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.AccountBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Account> GetAll() {
            return APBplDef.AccountBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 用户账号
    /// </summary>
    [Serializable()]
    public partial class Account : AccountBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Account() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Account(System.Guid userId, string userName, string account, string password, int status, int sort, string note) : 
                base(userId, userName, account, password, status, sort, note) {
        }
    }
    
    /// <summary>
    /// 用户信息 Base
    /// </summary>
    [Serializable()]
    public abstract partial class UserInfoBase {
        
        /// <summary>
        /// 用户ID
        /// </summary>
        private System.Guid _userId;
        
        /// <summary>
        /// UserName
        /// </summary>
        private string _userName = string.Empty;
        
        /// <summary>
        /// RealName
        /// </summary>
        private string _realName;
        
        /// <summary>
        /// NickName
        /// </summary>
        private string _nickName;
        
        /// <summary>
        /// Gender
        /// </summary>
        private int _gender;
        
        /// <summary>
        /// Department
        /// </summary>
        private string _department;
        
        /// <summary>
        /// Position
        /// </summary>
        private string _position;
        
        /// <summary>
        /// Phone
        /// </summary>
        private string _phone;
        
        /// <summary>
        /// Mobile
        /// </summary>
        private string _mobile;
        
        /// <summary>
        /// Email
        /// </summary>
        private string _email;
        
        /// <summary>
        /// Birthday
        /// </summary>
        private System.Nullable<System.DateTime> _birthday;
        
        /// <summary>
        /// Introduce
        /// </summary>
        private string _introduce;
        
        /// <summary>
        /// IsDelete
        /// </summary>
        private bool _isDelete;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public UserInfoBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public UserInfoBase(System.Guid userId, string userName, string realName, string nickName, int gender, string department, string position, string phone, string mobile, string email, System.Nullable<System.DateTime> birthday, string introduce, bool isDelete) {
            _userId = userId;
            _userName = userName;
            _realName = realName;
            _nickName = nickName;
            _gender = gender;
            _department = department;
            _position = position;
            _phone = phone;
            _mobile = mobile;
            _email = email;
            _birthday = birthday;
            _introduce = introduce;
            _isDelete = isDelete;
        }
        
        /// <summary>
        /// 用户ID
        /// </summary>
        public virtual System.Guid UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// 用户ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef UserIdDef {
            get {
                return APDBDef.UserInfo.UserId;
            }
        }
        
        /// <summary>
        /// UserName
        /// </summary>
        [Display(Name="用户名")]
        [Required()]
        [StringLength(40)]
        public virtual string UserName {
            get {
                return _userName;
            }
            set {
                _userName = value;
            }
        }
        
        /// <summary>
        /// UserName APColumnDef
        /// </summary>
        public static StringAPColumnDef UserNameDef {
            get {
                return APDBDef.UserInfo.UserName;
            }
        }
        
        /// <summary>
        /// RealName
        /// </summary>
        [Display(Name="真实姓名")]
        [StringLength(40)]
        public virtual string RealName {
            get {
                return _realName;
            }
            set {
                _realName = value;
            }
        }
        
        /// <summary>
        /// RealName APColumnDef
        /// </summary>
        public static StringAPColumnDef RealNameDef {
            get {
                return APDBDef.UserInfo.RealName;
            }
        }
        
        /// <summary>
        /// NickName
        /// </summary>
        [Display(Name="用户昵称")]
        [StringLength(40)]
        public virtual string NickName {
            get {
                return _nickName;
            }
            set {
                _nickName = value;
            }
        }
        
        /// <summary>
        /// NickName APColumnDef
        /// </summary>
        public static StringAPColumnDef NickNameDef {
            get {
                return APDBDef.UserInfo.NickName;
            }
        }
        
        /// <summary>
        /// Gender
        /// </summary>
        [Display(Name="性别")]
        public virtual int Gender {
            get {
                return _gender;
            }
            set {
                _gender = value;
            }
        }
        
        /// <summary>
        /// Gender APColumnDef
        /// </summary>
        public static Int32APColumnDef GenderDef {
            get {
                return APDBDef.UserInfo.Gender;
            }
        }
        
        /// <summary>
        /// Department
        /// </summary>
        [Display(Name="所在部门")]
        [StringLength(255)]
        public virtual string Department {
            get {
                return _department;
            }
            set {
                _department = value;
            }
        }
        
        /// <summary>
        /// Department APColumnDef
        /// </summary>
        public static StringAPColumnDef DepartmentDef {
            get {
                return APDBDef.UserInfo.Department;
            }
        }
        
        /// <summary>
        /// Position
        /// </summary>
        [Display(Name="职位")]
        [StringLength(255)]
        public virtual string Position {
            get {
                return _position;
            }
            set {
                _position = value;
            }
        }
        
        /// <summary>
        /// Position APColumnDef
        /// </summary>
        public static StringAPColumnDef PositionDef {
            get {
                return APDBDef.UserInfo.Position;
            }
        }
        
        /// <summary>
        /// Phone
        /// </summary>
        [Display(Name="公司电话")]
        [StringLength(20)]
        public virtual string Phone {
            get {
                return _phone;
            }
            set {
                _phone = value;
            }
        }
        
        /// <summary>
        /// Phone APColumnDef
        /// </summary>
        public static StringAPColumnDef PhoneDef {
            get {
                return APDBDef.UserInfo.Phone;
            }
        }
        
        /// <summary>
        /// Mobile
        /// </summary>
        [Display(Name="手机号")]
        [StringLength(20)]
        public virtual string Mobile {
            get {
                return _mobile;
            }
            set {
                _mobile = value;
            }
        }
        
        /// <summary>
        /// Mobile APColumnDef
        /// </summary>
        public static StringAPColumnDef MobileDef {
            get {
                return APDBDef.UserInfo.Mobile;
            }
        }
        
        /// <summary>
        /// Email
        /// </summary>
        [Display(Name="邮箱")]
        [StringLength(50)]
        public virtual string Email {
            get {
                return _email;
            }
            set {
                _email = value;
            }
        }
        
        /// <summary>
        /// Email APColumnDef
        /// </summary>
        public static StringAPColumnDef EmailDef {
            get {
                return APDBDef.UserInfo.Email;
            }
        }
        
        /// <summary>
        /// Birthday
        /// </summary>
        [Display(Name="生日")]
        public virtual System.Nullable<System.DateTime> Birthday {
            get {
                return _birthday;
            }
            set {
                _birthday = value;
            }
        }
        
        /// <summary>
        /// Birthday APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef BirthdayDef {
            get {
                return APDBDef.UserInfo.Birthday;
            }
        }
        
        /// <summary>
        /// Introduce
        /// </summary>
        [Display(Name="自我介绍")]
        [StringLength(500)]
        public virtual string Introduce {
            get {
                return _introduce;
            }
            set {
                _introduce = value;
            }
        }
        
        /// <summary>
        /// Introduce APColumnDef
        /// </summary>
        public static StringAPColumnDef IntroduceDef {
            get {
                return APDBDef.UserInfo.Introduce;
            }
        }
        
        /// <summary>
        /// IsDelete
        /// </summary>
        public virtual bool IsDelete {
            get {
                return _isDelete;
            }
            set {
                _isDelete = value;
            }
        }
        
        /// <summary>
        /// IsDelete APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsDeleteDef {
            get {
                return APDBDef.UserInfo.IsDelete;
            }
        }
        
        /// <summary>
        /// UserInfoTableDef APTableDef
        /// </summary>
        public static APDBDef.UserInfoTableDef TableDef {
            get {
                return APDBDef.UserInfo;
            }
        }
        
        /// <summary>
        /// UserInfoTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.UserInfo.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(UserInfo data) {
            UserId = data.UserId;
            UserName = data.UserName;
            RealName = data.RealName;
            NickName = data.NickName;
            Gender = data.Gender;
            Department = data.Department;
            Position = data.Position;
            Phone = data.Phone;
            Mobile = data.Mobile;
            Email = data.Email;
            Birthday = data.Birthday;
            Introduce = data.Introduce;
            IsDelete = data.IsDelete;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(UserInfo data) {
            if ((UserId != data.UserId)) {
                return false;
            }
            if ((UserName != data.UserName)) {
                return false;
            }
            if ((RealName != data.RealName)) {
                return false;
            }
            if ((NickName != data.NickName)) {
                return false;
            }
            if ((Gender != data.Gender)) {
                return false;
            }
            if ((Department != data.Department)) {
                return false;
            }
            if ((Position != data.Position)) {
                return false;
            }
            if ((Phone != data.Phone)) {
                return false;
            }
            if ((Mobile != data.Mobile)) {
                return false;
            }
            if ((Email != data.Email)) {
                return false;
            }
            if ((Birthday != data.Birthday)) {
                return false;
            }
            if ((Introduce != data.Introduce)) {
                return false;
            }
            if ((IsDelete != data.IsDelete)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.UserInfoBpl.Insert(((UserInfo)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.UserInfoBpl.Update(((UserInfo)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid userId, Object metadata) {
            APBplDef.UserInfoBpl.UpdatePartial(userId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid userId) {
            APBplDef.UserInfoBpl.PrimaryDelete(userId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.UserInfoBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.UserInfoBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static UserInfo PrimaryGet(System.Guid userId) {
            return APBplDef.UserInfoBpl.PrimaryGet(userId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<UserInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.UserInfoBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<UserInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.UserInfoBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<UserInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.UserInfoBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<UserInfo> GetAll() {
            return APBplDef.UserInfoBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 用户信息
    /// </summary>
    [Serializable()]
    public partial class UserInfo : UserInfoBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public UserInfo() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public UserInfo(System.Guid userId, string userName, string realName, string nickName, int gender, string department, string position, string phone, string mobile, string email, System.Nullable<System.DateTime> birthday, string introduce, bool isDelete) : 
                base(userId, userName, realName, nickName, gender, department, position, phone, mobile, email, birthday, introduce, isDelete) {
        }
    }
    
    /// <summary>
    /// 应用程序库(权限) Base
    /// </summary>
    [Serializable()]
    public abstract partial class AppBase {
        
        /// <summary>
        /// AppId
        /// </summary>
        private System.Guid _appId;
        
        /// <summary>
        /// Title
        /// </summary>
        private string _title = string.Empty;
        
        /// <summary>
        /// Address
        /// </summary>
        private string _address = string.Empty;
        
        /// <summary>
        /// AppType
        /// </summary>
        private System.Guid _appType;
        
        /// <summary>
        /// Code
        /// </summary>
        private string _code;
        
        /// <summary>
        /// Note
        /// </summary>
        private string _note;
        
        /// <summary>
        /// backup1
        /// </summary>
        private int _backup1;
        
        /// <summary>
        /// backup2
        /// </summary>
        private int _backup2;
        
        /// <summary>
        /// backup3
        /// </summary>
        private int _backup3;
        
        /// <summary>
        /// backup4
        /// </summary>
        private string _backup4;
        
        /// <summary>
        /// backup5
        /// </summary>
        private string _backup5;
        
        /// <summary>
        /// backup6
        /// </summary>
        private string _backup6;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public AppBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public AppBase(System.Guid appId, string title, string address, System.Guid appType, string code, string note, int backup1, int backup2, int backup3, string backup4, string backup5, string backup6) {
            _appId = appId;
            _title = title;
            _address = address;
            _appType = appType;
            _code = code;
            _note = note;
            _backup1 = backup1;
            _backup2 = backup2;
            _backup3 = backup3;
            _backup4 = backup4;
            _backup5 = backup5;
            _backup6 = backup6;
        }
        
        /// <summary>
        /// AppId
        /// </summary>
        public virtual System.Guid AppId {
            get {
                return _appId;
            }
            set {
                _appId = value;
            }
        }
        
        /// <summary>
        /// AppId APColumnDef
        /// </summary>
        public static GuidAPColumnDef AppIdDef {
            get {
                return APDBDef.App.AppId;
            }
        }
        
        /// <summary>
        /// Title
        /// </summary>
        [Display(Name="标题")]
        [StringLength(255)]
        public virtual string Title {
            get {
                return _title;
            }
            set {
                _title = value;
            }
        }
        
        /// <summary>
        /// Title APColumnDef
        /// </summary>
        public static StringAPColumnDef TitleDef {
            get {
                return APDBDef.App.Title;
            }
        }
        
        /// <summary>
        /// Address
        /// </summary>
        [Display(Name="应用地址")]
        [StringLength(255)]
        public virtual string Address {
            get {
                return _address;
            }
            set {
                _address = value;
            }
        }
        
        /// <summary>
        /// Address APColumnDef
        /// </summary>
        public static StringAPColumnDef AddressDef {
            get {
                return APDBDef.App.Address;
            }
        }
        
        /// <summary>
        /// AppType
        /// </summary>
        public virtual System.Guid AppType {
            get {
                return _appType;
            }
            set {
                _appType = value;
            }
        }
        
        /// <summary>
        /// AppType APColumnDef
        /// </summary>
        public static GuidAPColumnDef AppTypeDef {
            get {
                return APDBDef.App.AppType;
            }
        }
        
        /// <summary>
        /// Code
        /// </summary>
        [StringLength(200)]
        public virtual string Code {
            get {
                return _code;
            }
            set {
                _code = value;
            }
        }
        
        /// <summary>
        /// Code APColumnDef
        /// </summary>
        public static StringAPColumnDef CodeDef {
            get {
                return APDBDef.App.Code;
            }
        }
        
        /// <summary>
        /// Note
        /// </summary>
        [Display(Name="应用描述")]
        [StringLength(200)]
        public virtual string Note {
            get {
                return _note;
            }
            set {
                _note = value;
            }
        }
        
        /// <summary>
        /// Note APColumnDef
        /// </summary>
        public static StringAPColumnDef NoteDef {
            get {
                return APDBDef.App.Note;
            }
        }
        
        /// <summary>
        /// backup1
        /// </summary>
        public virtual int backup1 {
            get {
                return _backup1;
            }
            set {
                _backup1 = value;
            }
        }
        
        /// <summary>
        /// backup1 APColumnDef
        /// </summary>
        public static Int32APColumnDef backup1Def {
            get {
                return APDBDef.App.backup1;
            }
        }
        
        /// <summary>
        /// backup2
        /// </summary>
        public virtual int backup2 {
            get {
                return _backup2;
            }
            set {
                _backup2 = value;
            }
        }
        
        /// <summary>
        /// backup2 APColumnDef
        /// </summary>
        public static Int32APColumnDef backup2Def {
            get {
                return APDBDef.App.backup2;
            }
        }
        
        /// <summary>
        /// backup3
        /// </summary>
        public virtual int backup3 {
            get {
                return _backup3;
            }
            set {
                _backup3 = value;
            }
        }
        
        /// <summary>
        /// backup3 APColumnDef
        /// </summary>
        public static Int32APColumnDef backup3Def {
            get {
                return APDBDef.App.backup3;
            }
        }
        
        /// <summary>
        /// backup4
        /// </summary>
        [StringLength(2000)]
        public virtual string backup4 {
            get {
                return _backup4;
            }
            set {
                _backup4 = value;
            }
        }
        
        /// <summary>
        /// backup4 APColumnDef
        /// </summary>
        public static StringAPColumnDef backup4Def {
            get {
                return APDBDef.App.backup4;
            }
        }
        
        /// <summary>
        /// backup5
        /// </summary>
        [StringLength(2000)]
        public virtual string backup5 {
            get {
                return _backup5;
            }
            set {
                _backup5 = value;
            }
        }
        
        /// <summary>
        /// backup5 APColumnDef
        /// </summary>
        public static StringAPColumnDef backup5Def {
            get {
                return APDBDef.App.backup5;
            }
        }
        
        /// <summary>
        /// backup6
        /// </summary>
        [StringLength(2000)]
        public virtual string backup6 {
            get {
                return _backup6;
            }
            set {
                _backup6 = value;
            }
        }
        
        /// <summary>
        /// backup6 APColumnDef
        /// </summary>
        public static StringAPColumnDef backup6Def {
            get {
                return APDBDef.App.backup6;
            }
        }
        
        /// <summary>
        /// AppTableDef APTableDef
        /// </summary>
        public static APDBDef.AppTableDef TableDef {
            get {
                return APDBDef.App;
            }
        }
        
        /// <summary>
        /// AppTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.App.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(App data) {
            AppId = data.AppId;
            Title = data.Title;
            Address = data.Address;
            AppType = data.AppType;
            Code = data.Code;
            Note = data.Note;
            backup1 = data.backup1;
            backup2 = data.backup2;
            backup3 = data.backup3;
            backup4 = data.backup4;
            backup5 = data.backup5;
            backup6 = data.backup6;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(App data) {
            if ((AppId != data.AppId)) {
                return false;
            }
            if ((Title != data.Title)) {
                return false;
            }
            if ((Address != data.Address)) {
                return false;
            }
            if ((AppType != data.AppType)) {
                return false;
            }
            if ((Code != data.Code)) {
                return false;
            }
            if ((Note != data.Note)) {
                return false;
            }
            if ((backup1 != data.backup1)) {
                return false;
            }
            if ((backup2 != data.backup2)) {
                return false;
            }
            if ((backup3 != data.backup3)) {
                return false;
            }
            if ((backup4 != data.backup4)) {
                return false;
            }
            if ((backup5 != data.backup5)) {
                return false;
            }
            if ((backup6 != data.backup6)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.AppBpl.Insert(((App)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.AppBpl.Update(((App)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid appId, Object metadata) {
            APBplDef.AppBpl.UpdatePartial(appId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid appId) {
            APBplDef.AppBpl.PrimaryDelete(appId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.AppBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.AppBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static App PrimaryGet(System.Guid appId) {
            return APBplDef.AppBpl.PrimaryGet(appId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<App> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.AppBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<App> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.AppBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<App> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.AppBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<App> GetAll() {
            return APBplDef.AppBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 应用程序库(权限)
    /// </summary>
    [Serializable()]
    public partial class App : AppBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public App() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public App(System.Guid appId, string title, string address, System.Guid appType, string code, string note, int backup1, int backup2, int backup3, string backup4, string backup5, string backup6) : 
                base(appId, title, address, appType, code, note, backup1, backup2, backup3, backup4, backup5, backup6) {
        }
    }
    
    /// <summary>
    /// 角色 Base
    /// </summary>
    [Serializable()]
    public abstract partial class RoleBase {
        
        /// <summary>
        /// RoleId
        /// </summary>
        private System.Guid _roleId;
        
        /// <summary>
        /// RoleName
        /// </summary>
        private string _roleName = string.Empty;
        
        /// <summary>
        /// RoleUseMember
        /// </summary>
        private string _roleUseMember;
        
        /// <summary>
        /// Note
        /// </summary>
        private string _note;
        
        /// <summary>
        /// 角色类型
        /// </summary>
        private int _roleType;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public RoleBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public RoleBase(System.Guid roleId, string roleName, string roleUseMember, string note, int roleType) {
            _roleId = roleId;
            _roleName = roleName;
            _roleUseMember = roleUseMember;
            _note = note;
            _roleType = roleType;
        }
        
        /// <summary>
        /// RoleId
        /// </summary>
        public virtual System.Guid RoleId {
            get {
                return _roleId;
            }
            set {
                _roleId = value;
            }
        }
        
        /// <summary>
        /// RoleId APColumnDef
        /// </summary>
        public static GuidAPColumnDef RoleIdDef {
            get {
                return APDBDef.Role.RoleId;
            }
        }
        
        /// <summary>
        /// RoleName
        /// </summary>
        [Display(Name="角色名称")]
        [StringLength(200)]
        public virtual string RoleName {
            get {
                return _roleName;
            }
            set {
                _roleName = value;
            }
        }
        
        /// <summary>
        /// RoleName APColumnDef
        /// </summary>
        public static StringAPColumnDef RoleNameDef {
            get {
                return APDBDef.Role.RoleName;
            }
        }
        
        /// <summary>
        /// RoleUseMember
        /// </summary>
        [StringLength(8000)]
        public virtual string RoleUseMember {
            get {
                return _roleUseMember;
            }
            set {
                _roleUseMember = value;
            }
        }
        
        /// <summary>
        /// RoleUseMember APColumnDef
        /// </summary>
        public static StringAPColumnDef RoleUseMemberDef {
            get {
                return APDBDef.Role.RoleUseMember;
            }
        }
        
        /// <summary>
        /// Note
        /// </summary>
        [Display(Name="备注")]
        [StringLength(8000)]
        public virtual string Note {
            get {
                return _note;
            }
            set {
                _note = value;
            }
        }
        
        /// <summary>
        /// Note APColumnDef
        /// </summary>
        public static StringAPColumnDef NoteDef {
            get {
                return APDBDef.Role.Note;
            }
        }
        
        /// <summary>
        /// 角色类型
        /// </summary>
        public virtual int RoleType {
            get {
                return _roleType;
            }
            set {
                _roleType = value;
            }
        }
        
        /// <summary>
        /// 角色类型 APColumnDef
        /// </summary>
        public static Int32APColumnDef RoleTypeDef {
            get {
                return APDBDef.Role.RoleType;
            }
        }
        
        /// <summary>
        /// RoleTableDef APTableDef
        /// </summary>
        public static APDBDef.RoleTableDef TableDef {
            get {
                return APDBDef.Role;
            }
        }
        
        /// <summary>
        /// RoleTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Role.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Role data) {
            RoleId = data.RoleId;
            RoleName = data.RoleName;
            RoleUseMember = data.RoleUseMember;
            Note = data.Note;
            RoleType = data.RoleType;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Role data) {
            if ((RoleId != data.RoleId)) {
                return false;
            }
            if ((RoleName != data.RoleName)) {
                return false;
            }
            if ((RoleUseMember != data.RoleUseMember)) {
                return false;
            }
            if ((Note != data.Note)) {
                return false;
            }
            if ((RoleType != data.RoleType)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.RoleBpl.Insert(((Role)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.RoleBpl.Update(((Role)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid roleId, Object metadata) {
            APBplDef.RoleBpl.UpdatePartial(roleId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid roleId) {
            APBplDef.RoleBpl.PrimaryDelete(roleId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.RoleBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.RoleBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Role PrimaryGet(System.Guid roleId) {
            return APBplDef.RoleBpl.PrimaryGet(roleId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Role> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.RoleBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Role> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.RoleBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Role> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.RoleBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Role> GetAll() {
            return APBplDef.RoleBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 角色
    /// </summary>
    [Serializable()]
    public partial class Role : RoleBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Role() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Role(System.Guid roleId, string roleName, string roleUseMember, string note, int roleType) : 
                base(roleId, roleName, roleUseMember, note, roleType) {
        }
    }
    
    /// <summary>
    /// 用户角色 Base
    /// </summary>
    [Serializable()]
    public abstract partial class UserRoleBase {
        
        /// <summary>
        /// ID
        /// </summary>
        private System.Guid _iD;
        
        /// <summary>
        /// UserId
        /// </summary>
        private System.Guid _userId;
        
        /// <summary>
        /// RoleId
        /// </summary>
        private System.Guid _roleId;
        
        /// <summary>
        /// IsDefault
        /// </summary>
        private int _isDefault;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public UserRoleBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public UserRoleBase(System.Guid iD, System.Guid userId, System.Guid roleId, int isDefault) {
            _iD = iD;
            _userId = userId;
            _roleId = roleId;
            _isDefault = isDefault;
        }
        
        /// <summary>
        /// ID
        /// </summary>
        public virtual System.Guid ID {
            get {
                return _iD;
            }
            set {
                _iD = value;
            }
        }
        
        /// <summary>
        /// ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef IDDef {
            get {
                return APDBDef.UserRole.ID;
            }
        }
        
        /// <summary>
        /// UserId
        /// </summary>
        public virtual System.Guid UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// UserId APColumnDef
        /// </summary>
        public static GuidAPColumnDef UserIdDef {
            get {
                return APDBDef.UserRole.UserId;
            }
        }
        
        /// <summary>
        /// RoleId
        /// </summary>
        public virtual System.Guid RoleId {
            get {
                return _roleId;
            }
            set {
                _roleId = value;
            }
        }
        
        /// <summary>
        /// RoleId APColumnDef
        /// </summary>
        public static GuidAPColumnDef RoleIdDef {
            get {
                return APDBDef.UserRole.RoleId;
            }
        }
        
        /// <summary>
        /// IsDefault
        /// </summary>
        public virtual int IsDefault {
            get {
                return _isDefault;
            }
            set {
                _isDefault = value;
            }
        }
        
        /// <summary>
        /// IsDefault APColumnDef
        /// </summary>
        public static Int32APColumnDef IsDefaultDef {
            get {
                return APDBDef.UserRole.IsDefault;
            }
        }
        
        /// <summary>
        /// UserRoleTableDef APTableDef
        /// </summary>
        public static APDBDef.UserRoleTableDef TableDef {
            get {
                return APDBDef.UserRole;
            }
        }
        
        /// <summary>
        /// UserRoleTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.UserRole.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(UserRole data) {
            ID = data.ID;
            UserId = data.UserId;
            RoleId = data.RoleId;
            IsDefault = data.IsDefault;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(UserRole data) {
            if ((ID != data.ID)) {
                return false;
            }
            if ((UserId != data.UserId)) {
                return false;
            }
            if ((RoleId != data.RoleId)) {
                return false;
            }
            if ((IsDefault != data.IsDefault)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.UserRoleBpl.Insert(((UserRole)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.UserRoleBpl.Update(((UserRole)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid iD, Object metadata) {
            APBplDef.UserRoleBpl.UpdatePartial(iD, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid iD) {
            APBplDef.UserRoleBpl.PrimaryDelete(iD);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.UserRoleBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.UserRoleBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static UserRole PrimaryGet(System.Guid iD) {
            return APBplDef.UserRoleBpl.PrimaryGet(iD);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<UserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.UserRoleBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<UserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.UserRoleBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<UserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.UserRoleBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<UserRole> GetAll() {
            return APBplDef.UserRoleBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 用户角色
    /// </summary>
    [Serializable()]
    public partial class UserRole : UserRoleBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public UserRole() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public UserRole(System.Guid iD, System.Guid userId, System.Guid roleId, int isDefault) : 
                base(iD, userId, roleId, isDefault) {
        }
    }
    
    /// <summary>
    /// 单位表 Base
    /// </summary>
    [Serializable()]
    public abstract partial class CompanyInfoBase {
        
        /// <summary>
        /// 单位ID
        /// </summary>
        private System.Guid _companyId;
        
        /// <summary>
        /// CompanyName
        /// </summary>
        private string _companyName = string.Empty;
        
        /// <summary>
        /// CompanyStatus
        /// </summary>
        private string _companyStatus = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public CompanyInfoBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public CompanyInfoBase(System.Guid companyId, string companyName, string companyStatus) {
            _companyId = companyId;
            _companyName = companyName;
            _companyStatus = companyStatus;
        }
        
        /// <summary>
        /// 单位ID
        /// </summary>
        public virtual System.Guid CompanyId {
            get {
                return _companyId;
            }
            set {
                _companyId = value;
            }
        }
        
        /// <summary>
        /// 单位ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef CompanyIdDef {
            get {
                return APDBDef.CompanyInfo.CompanyId;
            }
        }
        
        /// <summary>
        /// CompanyName
        /// </summary>
        [Display(Name="单位名称")]
        [Required()]
        [StringLength(40)]
        public virtual string CompanyName {
            get {
                return _companyName;
            }
            set {
                _companyName = value;
            }
        }
        
        /// <summary>
        /// CompanyName APColumnDef
        /// </summary>
        public static StringAPColumnDef CompanyNameDef {
            get {
                return APDBDef.CompanyInfo.CompanyName;
            }
        }
        
        /// <summary>
        /// CompanyStatus
        /// </summary>
        [Display(Name="状态")]
        [Required()]
        [StringLength(40)]
        public virtual string CompanyStatus {
            get {
                return _companyStatus;
            }
            set {
                _companyStatus = value;
            }
        }
        
        /// <summary>
        /// CompanyStatus APColumnDef
        /// </summary>
        public static StringAPColumnDef CompanyStatusDef {
            get {
                return APDBDef.CompanyInfo.CompanyStatus;
            }
        }
        
        /// <summary>
        /// CompanyInfoTableDef APTableDef
        /// </summary>
        public static APDBDef.CompanyInfoTableDef TableDef {
            get {
                return APDBDef.CompanyInfo;
            }
        }
        
        /// <summary>
        /// CompanyInfoTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.CompanyInfo.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(CompanyInfo data) {
            CompanyId = data.CompanyId;
            CompanyName = data.CompanyName;
            CompanyStatus = data.CompanyStatus;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(CompanyInfo data) {
            if ((CompanyId != data.CompanyId)) {
                return false;
            }
            if ((CompanyName != data.CompanyName)) {
                return false;
            }
            if ((CompanyStatus != data.CompanyStatus)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.CompanyInfoBpl.Insert(((CompanyInfo)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.CompanyInfoBpl.Update(((CompanyInfo)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid companyId, Object metadata) {
            APBplDef.CompanyInfoBpl.UpdatePartial(companyId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid companyId) {
            APBplDef.CompanyInfoBpl.PrimaryDelete(companyId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.CompanyInfoBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.CompanyInfoBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static CompanyInfo PrimaryGet(System.Guid companyId) {
            return APBplDef.CompanyInfoBpl.PrimaryGet(companyId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<CompanyInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.CompanyInfoBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<CompanyInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.CompanyInfoBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<CompanyInfo> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.CompanyInfoBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<CompanyInfo> GetAll() {
            return APBplDef.CompanyInfoBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 单位表
    /// </summary>
    [Serializable()]
    public partial class CompanyInfo : CompanyInfoBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public CompanyInfo() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public CompanyInfo(System.Guid companyId, string companyName, string companyStatus) : 
                base(companyId, companyName, companyStatus) {
        }
    }
    
    /// <summary>
    /// 项目 Base
    /// </summary>
    [Serializable()]
    public abstract partial class ProjectBase {
        
        /// <summary>
        /// ProjectId
        /// </summary>
        private System.Guid _projectId;
        
        /// <summary>
        /// ProjectName
        /// </summary>
        private string _projectName = string.Empty;
        
        /// <summary>
        /// Description
        /// </summary>
        private string _description;
        
        /// <summary>
        /// ProjectStatus
        /// </summary>
        private System.Guid _projectStatus;
        
        /// <summary>
        /// ProjectType
        /// </summary>
        private System.Guid _projectType;
        
        /// <summary>
        /// RateOfProgress
        /// </summary>
        private double _rateOfProgress;
        
        /// <summary>
        /// PMId
        /// </summary>
        private System.Guid _pMId;
        
        /// <summary>
        /// CreatorId
        /// </summary>
        private System.Guid _creatorId;
        
        /// <summary>
        /// StartDate
        /// </summary>
        private System.DateTime _startDate = DateTime.Now;
        
        /// <summary>
        /// EndDate
        /// </summary>
        private System.DateTime _endDate;
        
        /// <summary>
        /// RealStartDate
        /// </summary>
        private System.DateTime _realStartDate;
        
        /// <summary>
        /// RealEndDate
        /// </summary>
        private System.DateTime _realEndDate;
        
        /// <summary>
        /// ProjectOwner
        /// </summary>
        private string _projectOwner;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.DateTime _modifyDate;
        
        /// <summary>
        /// OrgId
        /// </summary>
        private System.Guid _orgId;
        
        /// <summary>
        /// Code
        /// </summary>
        private string _code;
        
        /// <summary>
        /// RealCode
        /// </summary>
        private string _realCode;
        
        /// <summary>
        /// ReviewerId
        /// </summary>
        private System.Guid _reviewerId;
        
        /// <summary>
        /// ProjectExecutor
        /// </summary>
        private string _projectExecutor;
        
        /// <summary>
        /// ManagerId
        /// </summary>
        private System.Guid _managerId;
        
        /// <summary>
        /// ProcessName
        /// </summary>
        private string _processName;
        
        /// <summary>
        /// FolderId
        /// </summary>
        private System.Guid _folderId;
        
        /// <summary>
        /// Money
        /// </summary>
        private double _money;
        
        /// <summary>
        /// CMoney
        /// </summary>
        private double _cMoney;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ProjectBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ProjectBase(
                    System.Guid projectId, 
                    string projectName, 
                    string description, 
                    System.Guid projectStatus, 
                    System.Guid projectType, 
                    double rateOfProgress, 
                    System.Guid pMId, 
                    System.Guid creatorId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    System.DateTime realStartDate, 
                    System.DateTime realEndDate, 
                    string projectOwner, 
                    System.DateTime createDate, 
                    System.DateTime modifyDate, 
                    System.Guid orgId, 
                    string code, 
                    string realCode, 
                    System.Guid reviewerId, 
                    string projectExecutor, 
                    System.Guid managerId, 
                    string processName, 
                    System.Guid folderId, 
                    double money, 
                    double cMoney) {
            _projectId = projectId;
            _projectName = projectName;
            _description = description;
            _projectStatus = projectStatus;
            _projectType = projectType;
            _rateOfProgress = rateOfProgress;
            _pMId = pMId;
            _creatorId = creatorId;
            _startDate = startDate;
            _endDate = endDate;
            _realStartDate = realStartDate;
            _realEndDate = realEndDate;
            _projectOwner = projectOwner;
            _createDate = createDate;
            _modifyDate = modifyDate;
            _orgId = orgId;
            _code = code;
            _realCode = realCode;
            _reviewerId = reviewerId;
            _projectExecutor = projectExecutor;
            _managerId = managerId;
            _processName = processName;
            _folderId = folderId;
            _money = money;
            _cMoney = cMoney;
        }
        
        /// <summary>
        /// ProjectId
        /// </summary>
        [Display(Name="项目ID")]
        public virtual System.Guid ProjectId {
            get {
                return _projectId;
            }
            set {
                _projectId = value;
            }
        }
        
        /// <summary>
        /// ProjectId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ProjectIdDef {
            get {
                return APDBDef.Project.ProjectId;
            }
        }
        
        /// <summary>
        /// ProjectName
        /// </summary>
        [Display(Name="项目名称")]
        [Required()]
        [StringLength(200)]
        public virtual string ProjectName {
            get {
                return _projectName;
            }
            set {
                _projectName = value;
            }
        }
        
        /// <summary>
        /// ProjectName APColumnDef
        /// </summary>
        public static StringAPColumnDef ProjectNameDef {
            get {
                return APDBDef.Project.ProjectName;
            }
        }
        
        /// <summary>
        /// Description
        /// </summary>
        [Display(Name="项目描述")]
        [StringLength(40000)]
        public virtual string Description {
            get {
                return _description;
            }
            set {
                _description = value;
            }
        }
        
        /// <summary>
        /// Description APColumnDef
        /// </summary>
        public static StringAPColumnDef DescriptionDef {
            get {
                return APDBDef.Project.Description;
            }
        }
        
        /// <summary>
        /// ProjectStatus
        /// </summary>
        [Display(Name="项目状态")]
        public virtual System.Guid ProjectStatus {
            get {
                return _projectStatus;
            }
            set {
                _projectStatus = value;
            }
        }
        
        /// <summary>
        /// ProjectStatus APColumnDef
        /// </summary>
        public static GuidAPColumnDef ProjectStatusDef {
            get {
                return APDBDef.Project.ProjectStatus;
            }
        }
        
        /// <summary>
        /// ProjectType
        /// </summary>
        [Display(Name="项目类型")]
        public virtual System.Guid ProjectType {
            get {
                return _projectType;
            }
            set {
                _projectType = value;
            }
        }
        
        /// <summary>
        /// ProjectType APColumnDef
        /// </summary>
        public static GuidAPColumnDef ProjectTypeDef {
            get {
                return APDBDef.Project.ProjectType;
            }
        }
        
        /// <summary>
        /// RateOfProgress
        /// </summary>
        [Display(Name="项目进度")]
        public virtual double RateOfProgress {
            get {
                return _rateOfProgress;
            }
            set {
                _rateOfProgress = value;
            }
        }
        
        /// <summary>
        /// RateOfProgress APColumnDef
        /// </summary>
        public static DoubleAPColumnDef RateOfProgressDef {
            get {
                return APDBDef.Project.RateOfProgress;
            }
        }
        
        /// <summary>
        /// PMId
        /// </summary>
        [Display(Name="项目负责人ID")]
        public virtual System.Guid PMId {
            get {
                return _pMId;
            }
            set {
                _pMId = value;
            }
        }
        
        /// <summary>
        /// PMId APColumnDef
        /// </summary>
        public static GuidAPColumnDef PMIdDef {
            get {
                return APDBDef.Project.PMId;
            }
        }
        
        /// <summary>
        /// CreatorId
        /// </summary>
        [Display(Name="项目创建者ID")]
        public virtual System.Guid CreatorId {
            get {
                return _creatorId;
            }
            set {
                _creatorId = value;
            }
        }
        
        /// <summary>
        /// CreatorId APColumnDef
        /// </summary>
        public static GuidAPColumnDef CreatorIdDef {
            get {
                return APDBDef.Project.CreatorId;
            }
        }
        
        /// <summary>
        /// StartDate
        /// </summary>
        [Display(Name="预估开始时间")]
        public virtual System.DateTime StartDate {
            get {
                return _startDate;
            }
            set {
                _startDate = value;
            }
        }
        
        /// <summary>
        /// StartDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef StartDateDef {
            get {
                return APDBDef.Project.StartDate;
            }
        }
        
        /// <summary>
        /// EndDate
        /// </summary>
        [Display(Name="预估结束时间")]
        public virtual System.DateTime EndDate {
            get {
                return _endDate;
            }
            set {
                _endDate = value;
            }
        }
        
        /// <summary>
        /// EndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef EndDateDef {
            get {
                return APDBDef.Project.EndDate;
            }
        }
        
        /// <summary>
        /// RealStartDate
        /// </summary>
        [Display(Name="实际开始时间")]
        public virtual System.DateTime RealStartDate {
            get {
                return _realStartDate;
            }
            set {
                _realStartDate = value;
            }
        }
        
        /// <summary>
        /// RealStartDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef RealStartDateDef {
            get {
                return APDBDef.Project.RealStartDate;
            }
        }
        
        /// <summary>
        /// RealEndDate
        /// </summary>
        [Display(Name="实际结束时间")]
        public virtual System.DateTime RealEndDate {
            get {
                return _realEndDate;
            }
            set {
                _realEndDate = value;
            }
        }
        
        /// <summary>
        /// RealEndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef RealEndDateDef {
            get {
                return APDBDef.Project.RealEndDate;
            }
        }
        
        /// <summary>
        /// ProjectOwner
        /// </summary>
        [Display(Name="项目甲方")]
        [StringLength(100)]
        public virtual string ProjectOwner {
            get {
                return _projectOwner;
            }
            set {
                _projectOwner = value;
            }
        }
        
        /// <summary>
        /// ProjectOwner APColumnDef
        /// </summary>
        public static StringAPColumnDef ProjectOwnerDef {
            get {
                return APDBDef.Project.ProjectOwner;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.Project.CreateDate;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="最近修改时间")]
        public virtual System.DateTime ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.Project.ModifyDate;
            }
        }
        
        /// <summary>
        /// OrgId
        /// </summary>
        [Display(Name="项目归属部门")]
        public virtual System.Guid OrgId {
            get {
                return _orgId;
            }
            set {
                _orgId = value;
            }
        }
        
        /// <summary>
        /// OrgId APColumnDef
        /// </summary>
        public static GuidAPColumnDef OrgIdDef {
            get {
                return APDBDef.Project.OrgId;
            }
        }
        
        /// <summary>
        /// Code
        /// </summary>
        [Display(Name="内部项目编号")]
        [StringLength(100)]
        public virtual string Code {
            get {
                return _code;
            }
            set {
                _code = value;
            }
        }
        
        /// <summary>
        /// Code APColumnDef
        /// </summary>
        public static StringAPColumnDef CodeDef {
            get {
                return APDBDef.Project.Code;
            }
        }
        
        /// <summary>
        /// RealCode
        /// </summary>
        [Display(Name="立项编号")]
        [StringLength(100)]
        public virtual string RealCode {
            get {
                return _realCode;
            }
            set {
                _realCode = value;
            }
        }
        
        /// <summary>
        /// RealCode APColumnDef
        /// </summary>
        public static StringAPColumnDef RealCodeDef {
            get {
                return APDBDef.Project.RealCode;
            }
        }
        
        /// <summary>
        /// ReviewerId
        /// </summary>
        [Display(Name="审核人ID")]
        public virtual System.Guid ReviewerId {
            get {
                return _reviewerId;
            }
            set {
                _reviewerId = value;
            }
        }
        
        /// <summary>
        /// ReviewerId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ReviewerIdDef {
            get {
                return APDBDef.Project.ReviewerId;
            }
        }
        
        /// <summary>
        /// ProjectExecutor
        /// </summary>
        [Display(Name="项目乙方")]
        [StringLength(100)]
        public virtual string ProjectExecutor {
            get {
                return _projectExecutor;
            }
            set {
                _projectExecutor = value;
            }
        }
        
        /// <summary>
        /// ProjectExecutor APColumnDef
        /// </summary>
        public static StringAPColumnDef ProjectExecutorDef {
            get {
                return APDBDef.Project.ProjectExecutor;
            }
        }
        
        /// <summary>
        /// ManagerId
        /// </summary>
        [Display(Name="项目经理")]
        public virtual System.Guid ManagerId {
            get {
                return _managerId;
            }
            set {
                _managerId = value;
            }
        }
        
        /// <summary>
        /// ManagerId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ManagerIdDef {
            get {
                return APDBDef.Project.ManagerId;
            }
        }
        
        /// <summary>
        /// ProcessName
        /// </summary>
        [Display(Name="项目进展")]
        [StringLength(100)]
        public virtual string ProcessName {
            get {
                return _processName;
            }
            set {
                _processName = value;
            }
        }
        
        /// <summary>
        /// ProcessName APColumnDef
        /// </summary>
        public static StringAPColumnDef ProcessNameDef {
            get {
                return APDBDef.Project.ProcessName;
            }
        }
        
        /// <summary>
        /// FolderId
        /// </summary>
        [Display(Name="项目文件夹ID")]
        public virtual System.Guid FolderId {
            get {
                return _folderId;
            }
            set {
                _folderId = value;
            }
        }
        
        /// <summary>
        /// FolderId APColumnDef
        /// </summary>
        public static GuidAPColumnDef FolderIdDef {
            get {
                return APDBDef.Project.FolderId;
            }
        }
        
        /// <summary>
        /// Money
        /// </summary>
        [Display(Name="预估总金额")]
        public virtual double Money {
            get {
                return _money;
            }
            set {
                _money = value;
            }
        }
        
        /// <summary>
        /// Money APColumnDef
        /// </summary>
        public static DoubleAPColumnDef MoneyDef {
            get {
                return APDBDef.Project.Money;
            }
        }
        
        /// <summary>
        /// CMoney
        /// </summary>
        [Display(Name="合同总金额")]
        public virtual double CMoney {
            get {
                return _cMoney;
            }
            set {
                _cMoney = value;
            }
        }
        
        /// <summary>
        /// CMoney APColumnDef
        /// </summary>
        public static DoubleAPColumnDef CMoneyDef {
            get {
                return APDBDef.Project.CMoney;
            }
        }
        
        /// <summary>
        /// ProjectTableDef APTableDef
        /// </summary>
        public static APDBDef.ProjectTableDef TableDef {
            get {
                return APDBDef.Project;
            }
        }
        
        /// <summary>
        /// ProjectTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Project.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Project data) {
            ProjectId = data.ProjectId;
            ProjectName = data.ProjectName;
            Description = data.Description;
            ProjectStatus = data.ProjectStatus;
            ProjectType = data.ProjectType;
            RateOfProgress = data.RateOfProgress;
            PMId = data.PMId;
            CreatorId = data.CreatorId;
            StartDate = data.StartDate;
            EndDate = data.EndDate;
            RealStartDate = data.RealStartDate;
            RealEndDate = data.RealEndDate;
            ProjectOwner = data.ProjectOwner;
            CreateDate = data.CreateDate;
            ModifyDate = data.ModifyDate;
            OrgId = data.OrgId;
            Code = data.Code;
            RealCode = data.RealCode;
            ReviewerId = data.ReviewerId;
            ProjectExecutor = data.ProjectExecutor;
            ManagerId = data.ManagerId;
            ProcessName = data.ProcessName;
            FolderId = data.FolderId;
            Money = data.Money;
            CMoney = data.CMoney;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Project data) {
            if ((ProjectId != data.ProjectId)) {
                return false;
            }
            if ((ProjectName != data.ProjectName)) {
                return false;
            }
            if ((Description != data.Description)) {
                return false;
            }
            if ((ProjectStatus != data.ProjectStatus)) {
                return false;
            }
            if ((ProjectType != data.ProjectType)) {
                return false;
            }
            if ((RateOfProgress != data.RateOfProgress)) {
                return false;
            }
            if ((PMId != data.PMId)) {
                return false;
            }
            if ((CreatorId != data.CreatorId)) {
                return false;
            }
            if ((StartDate != data.StartDate)) {
                return false;
            }
            if ((EndDate != data.EndDate)) {
                return false;
            }
            if ((RealStartDate != data.RealStartDate)) {
                return false;
            }
            if ((RealEndDate != data.RealEndDate)) {
                return false;
            }
            if ((ProjectOwner != data.ProjectOwner)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            if ((OrgId != data.OrgId)) {
                return false;
            }
            if ((Code != data.Code)) {
                return false;
            }
            if ((RealCode != data.RealCode)) {
                return false;
            }
            if ((ReviewerId != data.ReviewerId)) {
                return false;
            }
            if ((ProjectExecutor != data.ProjectExecutor)) {
                return false;
            }
            if ((ManagerId != data.ManagerId)) {
                return false;
            }
            if ((ProcessName != data.ProcessName)) {
                return false;
            }
            if ((FolderId != data.FolderId)) {
                return false;
            }
            if ((Money != data.Money)) {
                return false;
            }
            if ((CMoney != data.CMoney)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.ProjectBpl.Insert(((Project)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.ProjectBpl.Update(((Project)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid projectId, Object metadata) {
            APBplDef.ProjectBpl.UpdatePartial(projectId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid projectId) {
            APBplDef.ProjectBpl.PrimaryDelete(projectId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.ProjectBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.ProjectBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Project PrimaryGet(System.Guid projectId) {
            return APBplDef.ProjectBpl.PrimaryGet(projectId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Project> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.ProjectBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Project> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.ProjectBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Project> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.ProjectBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Project> GetAll() {
            return APBplDef.ProjectBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 项目
    /// </summary>
    [Serializable()]
    public partial class Project : ProjectBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Project() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Project(
                    System.Guid projectId, 
                    string projectName, 
                    string description, 
                    System.Guid projectStatus, 
                    System.Guid projectType, 
                    double rateOfProgress, 
                    System.Guid pMId, 
                    System.Guid creatorId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    System.DateTime realStartDate, 
                    System.DateTime realEndDate, 
                    string projectOwner, 
                    System.DateTime createDate, 
                    System.DateTime modifyDate, 
                    System.Guid orgId, 
                    string code, 
                    string realCode, 
                    System.Guid reviewerId, 
                    string projectExecutor, 
                    System.Guid managerId, 
                    string processName, 
                    System.Guid folderId, 
                    double money, 
                    double cMoney) : 
                base(projectId, projectName, description, projectStatus, projectType, rateOfProgress, pMId, creatorId, startDate, endDate, realStartDate, realEndDate, projectOwner, createDate, modifyDate, orgId, code, realCode, reviewerId, projectExecutor, managerId, processName, folderId, money, cMoney) {
        }
    }
    
    /// <summary>
    /// 项目记录 Base
    /// </summary>
    [Serializable()]
    public abstract partial class ProjectRecordBase {
        
        /// <summary>
        /// RecordId
        /// </summary>
        private System.Guid _recordId;
        
        /// <summary>
        /// ProjectName
        /// </summary>
        private string _projectName = string.Empty;
        
        /// <summary>
        /// ProjectId
        /// </summary>
        private System.Guid _projectId;
        
        /// <summary>
        /// Progress
        /// </summary>
        private double _progress;
        
        /// <summary>
        /// RecordDate
        /// </summary>
        private System.DateTime _recordDate;
        
        /// <summary>
        /// ProcessName
        /// </summary>
        private string _processName;
        
        /// <summary>
        /// ProjectStatus
        /// </summary>
        private System.Guid _projectStatus;
        
        /// <summary>
        /// ProjectType
        /// </summary>
        private System.Guid _projectType;
        
        /// <summary>
        /// RateOfProgress
        /// </summary>
        private double _rateOfProgress;
        
        /// <summary>
        /// PMId
        /// </summary>
        private System.Guid _pMId;
        
        /// <summary>
        /// StartDate
        /// </summary>
        private System.DateTime _startDate = DateTime.Now;
        
        /// <summary>
        /// EndDate
        /// </summary>
        private System.DateTime _endDate;
        
        /// <summary>
        /// ProjectOwner
        /// </summary>
        private string _projectOwner;
        
        /// <summary>
        /// RealCode
        /// </summary>
        private string _realCode;
        
        /// <summary>
        /// ReviewerId
        /// </summary>
        private System.Guid _reviewerId;
        
        /// <summary>
        /// ProjectExecutor
        /// </summary>
        private string _projectExecutor;
        
        /// <summary>
        /// ManagerId
        /// </summary>
        private System.Guid _managerId;
        
        /// <summary>
        /// Code
        /// </summary>
        private string _code;
        
        /// <summary>
        /// OperatorId
        /// </summary>
        private System.Guid _operatorId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ProjectRecordBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ProjectRecordBase(
                    System.Guid recordId, 
                    string projectName, 
                    System.Guid projectId, 
                    double progress, 
                    System.DateTime recordDate, 
                    string processName, 
                    System.Guid projectStatus, 
                    System.Guid projectType, 
                    double rateOfProgress, 
                    System.Guid pMId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    string projectOwner, 
                    string realCode, 
                    System.Guid reviewerId, 
                    string projectExecutor, 
                    System.Guid managerId, 
                    string code, 
                    System.Guid operatorId) {
            _recordId = recordId;
            _projectName = projectName;
            _projectId = projectId;
            _progress = progress;
            _recordDate = recordDate;
            _processName = processName;
            _projectStatus = projectStatus;
            _projectType = projectType;
            _rateOfProgress = rateOfProgress;
            _pMId = pMId;
            _startDate = startDate;
            _endDate = endDate;
            _projectOwner = projectOwner;
            _realCode = realCode;
            _reviewerId = reviewerId;
            _projectExecutor = projectExecutor;
            _managerId = managerId;
            _code = code;
            _operatorId = operatorId;
        }
        
        /// <summary>
        /// RecordId
        /// </summary>
        [Display(Name="日志ID")]
        public virtual System.Guid RecordId {
            get {
                return _recordId;
            }
            set {
                _recordId = value;
            }
        }
        
        /// <summary>
        /// RecordId APColumnDef
        /// </summary>
        public static GuidAPColumnDef RecordIdDef {
            get {
                return APDBDef.ProjectRecord.RecordId;
            }
        }
        
        /// <summary>
        /// ProjectName
        /// </summary>
        [Display(Name="项目名称")]
        [Required()]
        [StringLength(200)]
        public virtual string ProjectName {
            get {
                return _projectName;
            }
            set {
                _projectName = value;
            }
        }
        
        /// <summary>
        /// ProjectName APColumnDef
        /// </summary>
        public static StringAPColumnDef ProjectNameDef {
            get {
                return APDBDef.ProjectRecord.ProjectName;
            }
        }
        
        /// <summary>
        /// ProjectId
        /// </summary>
        [Display(Name="项目ID")]
        public virtual System.Guid ProjectId {
            get {
                return _projectId;
            }
            set {
                _projectId = value;
            }
        }
        
        /// <summary>
        /// ProjectId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ProjectIdDef {
            get {
                return APDBDef.ProjectRecord.ProjectId;
            }
        }
        
        /// <summary>
        /// Progress
        /// </summary>
        [Display(Name="项目进度")]
        public virtual double Progress {
            get {
                return _progress;
            }
            set {
                _progress = value;
            }
        }
        
        /// <summary>
        /// Progress APColumnDef
        /// </summary>
        public static DoubleAPColumnDef ProgressDef {
            get {
                return APDBDef.ProjectRecord.Progress;
            }
        }
        
        /// <summary>
        /// RecordDate
        /// </summary>
        [Display(Name="记录时间")]
        public virtual System.DateTime RecordDate {
            get {
                return _recordDate;
            }
            set {
                _recordDate = value;
            }
        }
        
        /// <summary>
        /// RecordDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef RecordDateDef {
            get {
                return APDBDef.ProjectRecord.RecordDate;
            }
        }
        
        /// <summary>
        /// ProcessName
        /// </summary>
        [Display(Name="项目进展")]
        [StringLength(100)]
        public virtual string ProcessName {
            get {
                return _processName;
            }
            set {
                _processName = value;
            }
        }
        
        /// <summary>
        /// ProcessName APColumnDef
        /// </summary>
        public static StringAPColumnDef ProcessNameDef {
            get {
                return APDBDef.ProjectRecord.ProcessName;
            }
        }
        
        /// <summary>
        /// ProjectStatus
        /// </summary>
        [Display(Name="项目状态")]
        public virtual System.Guid ProjectStatus {
            get {
                return _projectStatus;
            }
            set {
                _projectStatus = value;
            }
        }
        
        /// <summary>
        /// ProjectStatus APColumnDef
        /// </summary>
        public static GuidAPColumnDef ProjectStatusDef {
            get {
                return APDBDef.ProjectRecord.ProjectStatus;
            }
        }
        
        /// <summary>
        /// ProjectType
        /// </summary>
        [Display(Name="项目类型")]
        public virtual System.Guid ProjectType {
            get {
                return _projectType;
            }
            set {
                _projectType = value;
            }
        }
        
        /// <summary>
        /// ProjectType APColumnDef
        /// </summary>
        public static GuidAPColumnDef ProjectTypeDef {
            get {
                return APDBDef.ProjectRecord.ProjectType;
            }
        }
        
        /// <summary>
        /// RateOfProgress
        /// </summary>
        [Display(Name="项目进度")]
        public virtual double RateOfProgress {
            get {
                return _rateOfProgress;
            }
            set {
                _rateOfProgress = value;
            }
        }
        
        /// <summary>
        /// RateOfProgress APColumnDef
        /// </summary>
        public static DoubleAPColumnDef RateOfProgressDef {
            get {
                return APDBDef.ProjectRecord.RateOfProgress;
            }
        }
        
        /// <summary>
        /// PMId
        /// </summary>
        [Display(Name="项目负责人ID")]
        public virtual System.Guid PMId {
            get {
                return _pMId;
            }
            set {
                _pMId = value;
            }
        }
        
        /// <summary>
        /// PMId APColumnDef
        /// </summary>
        public static GuidAPColumnDef PMIdDef {
            get {
                return APDBDef.ProjectRecord.PMId;
            }
        }
        
        /// <summary>
        /// StartDate
        /// </summary>
        [Display(Name="预估开始时间")]
        public virtual System.DateTime StartDate {
            get {
                return _startDate;
            }
            set {
                _startDate = value;
            }
        }
        
        /// <summary>
        /// StartDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef StartDateDef {
            get {
                return APDBDef.ProjectRecord.StartDate;
            }
        }
        
        /// <summary>
        /// EndDate
        /// </summary>
        [Display(Name="预估结束时间")]
        public virtual System.DateTime EndDate {
            get {
                return _endDate;
            }
            set {
                _endDate = value;
            }
        }
        
        /// <summary>
        /// EndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef EndDateDef {
            get {
                return APDBDef.ProjectRecord.EndDate;
            }
        }
        
        /// <summary>
        /// ProjectOwner
        /// </summary>
        [Display(Name="项目甲方")]
        [StringLength(100)]
        public virtual string ProjectOwner {
            get {
                return _projectOwner;
            }
            set {
                _projectOwner = value;
            }
        }
        
        /// <summary>
        /// ProjectOwner APColumnDef
        /// </summary>
        public static StringAPColumnDef ProjectOwnerDef {
            get {
                return APDBDef.ProjectRecord.ProjectOwner;
            }
        }
        
        /// <summary>
        /// RealCode
        /// </summary>
        [Display(Name="立项编号")]
        [StringLength(100)]
        public virtual string RealCode {
            get {
                return _realCode;
            }
            set {
                _realCode = value;
            }
        }
        
        /// <summary>
        /// RealCode APColumnDef
        /// </summary>
        public static StringAPColumnDef RealCodeDef {
            get {
                return APDBDef.ProjectRecord.RealCode;
            }
        }
        
        /// <summary>
        /// ReviewerId
        /// </summary>
        [Display(Name="审核人ID")]
        public virtual System.Guid ReviewerId {
            get {
                return _reviewerId;
            }
            set {
                _reviewerId = value;
            }
        }
        
        /// <summary>
        /// ReviewerId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ReviewerIdDef {
            get {
                return APDBDef.ProjectRecord.ReviewerId;
            }
        }
        
        /// <summary>
        /// ProjectExecutor
        /// </summary>
        [Display(Name="项目乙方")]
        [StringLength(100)]
        public virtual string ProjectExecutor {
            get {
                return _projectExecutor;
            }
            set {
                _projectExecutor = value;
            }
        }
        
        /// <summary>
        /// ProjectExecutor APColumnDef
        /// </summary>
        public static StringAPColumnDef ProjectExecutorDef {
            get {
                return APDBDef.ProjectRecord.ProjectExecutor;
            }
        }
        
        /// <summary>
        /// ManagerId
        /// </summary>
        [Display(Name="项目经理")]
        public virtual System.Guid ManagerId {
            get {
                return _managerId;
            }
            set {
                _managerId = value;
            }
        }
        
        /// <summary>
        /// ManagerId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ManagerIdDef {
            get {
                return APDBDef.ProjectRecord.ManagerId;
            }
        }
        
        /// <summary>
        /// Code
        /// </summary>
        [Display(Name="内部项目编号")]
        [StringLength(100)]
        public virtual string Code {
            get {
                return _code;
            }
            set {
                _code = value;
            }
        }
        
        /// <summary>
        /// Code APColumnDef
        /// </summary>
        public static StringAPColumnDef CodeDef {
            get {
                return APDBDef.ProjectRecord.Code;
            }
        }
        
        /// <summary>
        /// OperatorId
        /// </summary>
        [Display(Name="操作人")]
        public virtual System.Guid OperatorId {
            get {
                return _operatorId;
            }
            set {
                _operatorId = value;
            }
        }
        
        /// <summary>
        /// OperatorId APColumnDef
        /// </summary>
        public static GuidAPColumnDef OperatorIdDef {
            get {
                return APDBDef.ProjectRecord.OperatorId;
            }
        }
        
        /// <summary>
        /// ProjectRecordTableDef APTableDef
        /// </summary>
        public static APDBDef.ProjectRecordTableDef TableDef {
            get {
                return APDBDef.ProjectRecord;
            }
        }
        
        /// <summary>
        /// ProjectRecordTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.ProjectRecord.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(ProjectRecord data) {
            RecordId = data.RecordId;
            ProjectName = data.ProjectName;
            ProjectId = data.ProjectId;
            Progress = data.Progress;
            RecordDate = data.RecordDate;
            ProcessName = data.ProcessName;
            ProjectStatus = data.ProjectStatus;
            ProjectType = data.ProjectType;
            RateOfProgress = data.RateOfProgress;
            PMId = data.PMId;
            StartDate = data.StartDate;
            EndDate = data.EndDate;
            ProjectOwner = data.ProjectOwner;
            RealCode = data.RealCode;
            ReviewerId = data.ReviewerId;
            ProjectExecutor = data.ProjectExecutor;
            ManagerId = data.ManagerId;
            Code = data.Code;
            OperatorId = data.OperatorId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(ProjectRecord data) {
            if ((RecordId != data.RecordId)) {
                return false;
            }
            if ((ProjectName != data.ProjectName)) {
                return false;
            }
            if ((ProjectId != data.ProjectId)) {
                return false;
            }
            if ((Progress != data.Progress)) {
                return false;
            }
            if ((RecordDate != data.RecordDate)) {
                return false;
            }
            if ((ProcessName != data.ProcessName)) {
                return false;
            }
            if ((ProjectStatus != data.ProjectStatus)) {
                return false;
            }
            if ((ProjectType != data.ProjectType)) {
                return false;
            }
            if ((RateOfProgress != data.RateOfProgress)) {
                return false;
            }
            if ((PMId != data.PMId)) {
                return false;
            }
            if ((StartDate != data.StartDate)) {
                return false;
            }
            if ((EndDate != data.EndDate)) {
                return false;
            }
            if ((ProjectOwner != data.ProjectOwner)) {
                return false;
            }
            if ((RealCode != data.RealCode)) {
                return false;
            }
            if ((ReviewerId != data.ReviewerId)) {
                return false;
            }
            if ((ProjectExecutor != data.ProjectExecutor)) {
                return false;
            }
            if ((ManagerId != data.ManagerId)) {
                return false;
            }
            if ((Code != data.Code)) {
                return false;
            }
            if ((OperatorId != data.OperatorId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.ProjectRecordBpl.Insert(((ProjectRecord)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.ProjectRecordBpl.Update(((ProjectRecord)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid recordId, Object metadata) {
            APBplDef.ProjectRecordBpl.UpdatePartial(recordId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid recordId) {
            APBplDef.ProjectRecordBpl.PrimaryDelete(recordId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.ProjectRecordBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.ProjectRecordBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static ProjectRecord PrimaryGet(System.Guid recordId) {
            return APBplDef.ProjectRecordBpl.PrimaryGet(recordId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ProjectRecord> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.ProjectRecordBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ProjectRecord> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.ProjectRecordBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ProjectRecord> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.ProjectRecordBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<ProjectRecord> GetAll() {
            return APBplDef.ProjectRecordBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 项目记录
    /// </summary>
    [Serializable()]
    public partial class ProjectRecord : ProjectRecordBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ProjectRecord() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ProjectRecord(
                    System.Guid recordId, 
                    string projectName, 
                    System.Guid projectId, 
                    double progress, 
                    System.DateTime recordDate, 
                    string processName, 
                    System.Guid projectStatus, 
                    System.Guid projectType, 
                    double rateOfProgress, 
                    System.Guid pMId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    string projectOwner, 
                    string realCode, 
                    System.Guid reviewerId, 
                    string projectExecutor, 
                    System.Guid managerId, 
                    string code, 
                    System.Guid operatorId) : 
                base(recordId, projectName, projectId, progress, recordDate, processName, projectStatus, projectType, rateOfProgress, pMId, startDate, endDate, projectOwner, realCode, reviewerId, projectExecutor, managerId, code, operatorId) {
        }
    }
    
    /// <summary>
    /// 项目角色 Base
    /// </summary>
    [Serializable()]
    public abstract partial class ProjectRoleBase {
        
        /// <summary>
        /// PRID
        /// </summary>
        private System.Guid _pRID;
        
        /// <summary>
        /// ProjectId
        /// </summary>
        private System.Guid _projectId;
        
        /// <summary>
        /// RoleId
        /// </summary>
        private System.Guid _roleId;
        
        /// <summary>
        /// 是否是默认角色 1:是 0 否
        /// </summary>
        private int _isDefault = 1;
        
        /// <summary>
        /// 权限Id用逗号分开
        /// </summary>
        private string _appIds;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ProjectRoleBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ProjectRoleBase(System.Guid pRID, System.Guid projectId, System.Guid roleId, int isDefault, string appIds) {
            _pRID = pRID;
            _projectId = projectId;
            _roleId = roleId;
            _isDefault = isDefault;
            _appIds = appIds;
        }
        
        /// <summary>
        /// PRID
        /// </summary>
        public virtual System.Guid PRID {
            get {
                return _pRID;
            }
            set {
                _pRID = value;
            }
        }
        
        /// <summary>
        /// PRID APColumnDef
        /// </summary>
        public static GuidAPColumnDef PRIDDef {
            get {
                return APDBDef.ProjectRole.PRID;
            }
        }
        
        /// <summary>
        /// ProjectId
        /// </summary>
        public virtual System.Guid ProjectId {
            get {
                return _projectId;
            }
            set {
                _projectId = value;
            }
        }
        
        /// <summary>
        /// ProjectId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ProjectIdDef {
            get {
                return APDBDef.ProjectRole.ProjectId;
            }
        }
        
        /// <summary>
        /// RoleId
        /// </summary>
        public virtual System.Guid RoleId {
            get {
                return _roleId;
            }
            set {
                _roleId = value;
            }
        }
        
        /// <summary>
        /// RoleId APColumnDef
        /// </summary>
        public static GuidAPColumnDef RoleIdDef {
            get {
                return APDBDef.ProjectRole.RoleId;
            }
        }
        
        /// <summary>
        /// 是否是默认角色 1:是 0 否
        /// </summary>
        public virtual int IsDefault {
            get {
                return _isDefault;
            }
            set {
                _isDefault = value;
            }
        }
        
        /// <summary>
        /// 是否是默认角色 1:是 0 否 APColumnDef
        /// </summary>
        public static Int32APColumnDef IsDefaultDef {
            get {
                return APDBDef.ProjectRole.IsDefault;
            }
        }
        
        /// <summary>
        /// 权限Id用逗号分开
        /// </summary>
        [Display(Name="项目角色权限")]
        [StringLength(2000)]
        public virtual string AppIds {
            get {
                return _appIds;
            }
            set {
                _appIds = value;
            }
        }
        
        /// <summary>
        /// 权限Id用逗号分开 APColumnDef
        /// </summary>
        public static StringAPColumnDef AppIdsDef {
            get {
                return APDBDef.ProjectRole.AppIds;
            }
        }
        
        /// <summary>
        /// ProjectRoleTableDef APTableDef
        /// </summary>
        public static APDBDef.ProjectRoleTableDef TableDef {
            get {
                return APDBDef.ProjectRole;
            }
        }
        
        /// <summary>
        /// ProjectRoleTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.ProjectRole.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(ProjectRole data) {
            PRID = data.PRID;
            ProjectId = data.ProjectId;
            RoleId = data.RoleId;
            IsDefault = data.IsDefault;
            AppIds = data.AppIds;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(ProjectRole data) {
            if ((PRID != data.PRID)) {
                return false;
            }
            if ((ProjectId != data.ProjectId)) {
                return false;
            }
            if ((RoleId != data.RoleId)) {
                return false;
            }
            if ((IsDefault != data.IsDefault)) {
                return false;
            }
            if ((AppIds != data.AppIds)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.ProjectRoleBpl.Insert(((ProjectRole)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.ProjectRoleBpl.Update(((ProjectRole)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid pRID, Object metadata) {
            APBplDef.ProjectRoleBpl.UpdatePartial(pRID, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid pRID) {
            APBplDef.ProjectRoleBpl.PrimaryDelete(pRID);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.ProjectRoleBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.ProjectRoleBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static ProjectRole PrimaryGet(System.Guid pRID) {
            return APBplDef.ProjectRoleBpl.PrimaryGet(pRID);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ProjectRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.ProjectRoleBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ProjectRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.ProjectRoleBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ProjectRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.ProjectRoleBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<ProjectRole> GetAll() {
            return APBplDef.ProjectRoleBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 项目角色
    /// </summary>
    [Serializable()]
    public partial class ProjectRole : ProjectRoleBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ProjectRole() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ProjectRole(System.Guid pRID, System.Guid projectId, System.Guid roleId, int isDefault, string appIds) : 
                base(pRID, projectId, roleId, isDefault, appIds) {
        }
    }
    
    /// <summary>
    /// 项目资源 Base
    /// </summary>
    [Serializable()]
    public abstract partial class ResourceBase {
        
        /// <summary>
        /// 资源ID
        /// </summary>
        private System.Guid _resourceId;
        
        /// <summary>
        /// 资源人ID
        /// </summary>
        private System.Guid _userId;
        
        /// <summary>
        /// 项目ID
        /// </summary>
        private System.Guid _projectid;
        
        /// <summary>
        /// 任务ID
        /// </summary>
        private System.Guid _taskId;
        
        /// <summary>
        /// ResourceName
        /// </summary>
        private string _resourceName = string.Empty;
        
        /// <summary>
        /// 资源角色用逗号分开
        /// </summary>
        private string _resourceTypes;
        
        /// <summary>
        /// Description
        /// </summary>
        private string _description;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate = DateTime.Now;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.DateTime _modifyDate;
        
        /// <summary>
        /// Status
        /// </summary>
        private System.Guid _status;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ResourceBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ResourceBase(System.Guid resourceId, System.Guid userId, System.Guid projectid, System.Guid taskId, string resourceName, string resourceTypes, string description, System.DateTime createDate, System.DateTime modifyDate, System.Guid status) {
            _resourceId = resourceId;
            _userId = userId;
            _projectid = projectid;
            _taskId = taskId;
            _resourceName = resourceName;
            _resourceTypes = resourceTypes;
            _description = description;
            _createDate = createDate;
            _modifyDate = modifyDate;
            _status = status;
        }
        
        /// <summary>
        /// 资源ID
        /// </summary>
        public virtual System.Guid ResourceId {
            get {
                return _resourceId;
            }
            set {
                _resourceId = value;
            }
        }
        
        /// <summary>
        /// 资源ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef ResourceIdDef {
            get {
                return APDBDef.Resource.ResourceId;
            }
        }
        
        /// <summary>
        /// 资源人ID
        /// </summary>
        public virtual System.Guid UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// 资源人ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef UserIdDef {
            get {
                return APDBDef.Resource.UserId;
            }
        }
        
        /// <summary>
        /// 项目ID
        /// </summary>
        public virtual System.Guid Projectid {
            get {
                return _projectid;
            }
            set {
                _projectid = value;
            }
        }
        
        /// <summary>
        /// 项目ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef ProjectidDef {
            get {
                return APDBDef.Resource.Projectid;
            }
        }
        
        /// <summary>
        /// 任务ID
        /// </summary>
        public virtual System.Guid TaskId {
            get {
                return _taskId;
            }
            set {
                _taskId = value;
            }
        }
        
        /// <summary>
        /// 任务ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskIdDef {
            get {
                return APDBDef.Resource.TaskId;
            }
        }
        
        /// <summary>
        /// ResourceName
        /// </summary>
        [Display(Name="资源名称")]
        [StringLength(100)]
        public virtual string ResourceName {
            get {
                return _resourceName;
            }
            set {
                _resourceName = value;
            }
        }
        
        /// <summary>
        /// ResourceName APColumnDef
        /// </summary>
        public static StringAPColumnDef ResourceNameDef {
            get {
                return APDBDef.Resource.ResourceName;
            }
        }
        
        /// <summary>
        /// 资源角色用逗号分开
        /// </summary>
        [Display(Name="资源类型")]
        [StringLength(200)]
        public virtual string ResourceTypes {
            get {
                return _resourceTypes;
            }
            set {
                _resourceTypes = value;
            }
        }
        
        /// <summary>
        /// 资源角色用逗号分开 APColumnDef
        /// </summary>
        public static StringAPColumnDef ResourceTypesDef {
            get {
                return APDBDef.Resource.ResourceTypes;
            }
        }
        
        /// <summary>
        /// Description
        /// </summary>
        [Display(Name="资源描述")]
        [StringLength(1000)]
        public virtual string Description {
            get {
                return _description;
            }
            set {
                _description = value;
            }
        }
        
        /// <summary>
        /// Description APColumnDef
        /// </summary>
        public static StringAPColumnDef DescriptionDef {
            get {
                return APDBDef.Resource.Description;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.Resource.CreateDate;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="修改时间")]
        public virtual System.DateTime ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.Resource.ModifyDate;
            }
        }
        
        /// <summary>
        /// Status
        /// </summary>
        [Display(Name="资源状态")]
        public virtual System.Guid Status {
            get {
                return _status;
            }
            set {
                _status = value;
            }
        }
        
        /// <summary>
        /// Status APColumnDef
        /// </summary>
        public static GuidAPColumnDef StatusDef {
            get {
                return APDBDef.Resource.Status;
            }
        }
        
        /// <summary>
        /// ResourceTableDef APTableDef
        /// </summary>
        public static APDBDef.ResourceTableDef TableDef {
            get {
                return APDBDef.Resource;
            }
        }
        
        /// <summary>
        /// ResourceTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Resource.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Resource data) {
            ResourceId = data.ResourceId;
            UserId = data.UserId;
            Projectid = data.Projectid;
            TaskId = data.TaskId;
            ResourceName = data.ResourceName;
            ResourceTypes = data.ResourceTypes;
            Description = data.Description;
            CreateDate = data.CreateDate;
            ModifyDate = data.ModifyDate;
            Status = data.Status;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Resource data) {
            if ((ResourceId != data.ResourceId)) {
                return false;
            }
            if ((UserId != data.UserId)) {
                return false;
            }
            if ((Projectid != data.Projectid)) {
                return false;
            }
            if ((TaskId != data.TaskId)) {
                return false;
            }
            if ((ResourceName != data.ResourceName)) {
                return false;
            }
            if ((ResourceTypes != data.ResourceTypes)) {
                return false;
            }
            if ((Description != data.Description)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            if ((Status != data.Status)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.ResourceBpl.Insert(((Resource)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.ResourceBpl.Update(((Resource)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid resourceId, Object metadata) {
            APBplDef.ResourceBpl.UpdatePartial(resourceId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid resourceId) {
            APBplDef.ResourceBpl.PrimaryDelete(resourceId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.ResourceBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.ResourceBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Resource PrimaryGet(System.Guid resourceId) {
            return APBplDef.ResourceBpl.PrimaryGet(resourceId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Resource> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.ResourceBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Resource> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.ResourceBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Resource> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.ResourceBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Resource> GetAll() {
            return APBplDef.ResourceBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 项目资源
    /// </summary>
    [Serializable()]
    public partial class Resource : ResourceBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Resource() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Resource(System.Guid resourceId, System.Guid userId, System.Guid projectid, System.Guid taskId, string resourceName, string resourceTypes, string description, System.DateTime createDate, System.DateTime modifyDate, System.Guid status) : 
                base(resourceId, userId, projectid, taskId, resourceName, resourceTypes, description, createDate, modifyDate, status) {
        }
    }
    
    /// <summary>
    /// 款项 Base
    /// </summary>
    [Serializable()]
    public abstract partial class PaymentsBase {
        
        /// <summary>
        /// 款项ID
        /// </summary>
        private System.Guid _payId;
        
        /// <summary>
        /// 款项名称
        /// </summary>
        private string _payName = string.Empty;
        
        /// <summary>
        /// 项目id
        /// </summary>
        private System.Guid _projectId;
        
        /// <summary>
        /// Money
        /// </summary>
        private double _money = 0;
        
        /// <summary>
        /// RateOfProgress
        /// </summary>
        private double _rateOfProgress = 0;
        
        /// <summary>
        /// InvoiceDate
        /// </summary>
        private System.DateTime _invoiceDate;
        
        /// <summary>
        /// PayDate
        /// </summary>
        private System.DateTime _payDate;
        
        /// <summary>
        /// PayType
        /// </summary>
        private System.Guid _payType;
        
        /// <summary>
        /// 冗余字段，备用
        /// </summary>
        private System.Guid _resourceId;
        
        /// <summary>
        /// 排序
        /// </summary>
        private double _sort;
        
        /// <summary>
        /// 是否最终确认
        /// </summary>
        private bool _isConfirm;
        
        /// <summary>
        /// 父级ID
        /// </summary>
        private System.Guid _parentId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public PaymentsBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public PaymentsBase(System.Guid payId, string payName, System.Guid projectId, double money, double rateOfProgress, System.DateTime invoiceDate, System.DateTime payDate, System.Guid payType, System.Guid resourceId, double sort, bool isConfirm, System.Guid parentId) {
            _payId = payId;
            _payName = payName;
            _projectId = projectId;
            _money = money;
            _rateOfProgress = rateOfProgress;
            _invoiceDate = invoiceDate;
            _payDate = payDate;
            _payType = payType;
            _resourceId = resourceId;
            _sort = sort;
            _isConfirm = isConfirm;
            _parentId = parentId;
        }
        
        /// <summary>
        /// 款项ID
        /// </summary>
        public virtual System.Guid PayId {
            get {
                return _payId;
            }
            set {
                _payId = value;
            }
        }
        
        /// <summary>
        /// 款项ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef PayIdDef {
            get {
                return APDBDef.Payments.PayId;
            }
        }
        
        /// <summary>
        /// 款项名称
        /// </summary>
        [Display(Name="款项名称")]
        [StringLength(100)]
        public virtual string PayName {
            get {
                return _payName;
            }
            set {
                _payName = value;
            }
        }
        
        /// <summary>
        /// 款项名称 APColumnDef
        /// </summary>
        public static StringAPColumnDef PayNameDef {
            get {
                return APDBDef.Payments.PayName;
            }
        }
        
        /// <summary>
        /// 项目id
        /// </summary>
        public virtual System.Guid ProjectId {
            get {
                return _projectId;
            }
            set {
                _projectId = value;
            }
        }
        
        /// <summary>
        /// 项目id APColumnDef
        /// </summary>
        public static GuidAPColumnDef ProjectIdDef {
            get {
                return APDBDef.Payments.ProjectId;
            }
        }
        
        /// <summary>
        /// Money
        /// </summary>
        [Display(Name="总金额")]
        public virtual double Money {
            get {
                return _money;
            }
            set {
                _money = value;
            }
        }
        
        /// <summary>
        /// Money APColumnDef
        /// </summary>
        public static DoubleAPColumnDef MoneyDef {
            get {
                return APDBDef.Payments.Money;
            }
        }
        
        /// <summary>
        /// RateOfProgress
        /// </summary>
        [Display(Name="付款进度")]
        public virtual double RateOfProgress {
            get {
                return _rateOfProgress;
            }
            set {
                _rateOfProgress = value;
            }
        }
        
        /// <summary>
        /// RateOfProgress APColumnDef
        /// </summary>
        public static DoubleAPColumnDef RateOfProgressDef {
            get {
                return APDBDef.Payments.RateOfProgress;
            }
        }
        
        /// <summary>
        /// InvoiceDate
        /// </summary>
        [Display(Name="开始时间")]
        public virtual System.DateTime InvoiceDate {
            get {
                return _invoiceDate;
            }
            set {
                _invoiceDate = value;
            }
        }
        
        /// <summary>
        /// InvoiceDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef InvoiceDateDef {
            get {
                return APDBDef.Payments.InvoiceDate;
            }
        }
        
        /// <summary>
        /// PayDate
        /// </summary>
        [Display(Name="结束时间")]
        public virtual System.DateTime PayDate {
            get {
                return _payDate;
            }
            set {
                _payDate = value;
            }
        }
        
        /// <summary>
        /// PayDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef PayDateDef {
            get {
                return APDBDef.Payments.PayDate;
            }
        }
        
        /// <summary>
        /// PayType
        /// </summary>
        [Display(Name="付款类型")]
        public virtual System.Guid PayType {
            get {
                return _payType;
            }
            set {
                _payType = value;
            }
        }
        
        /// <summary>
        /// PayType APColumnDef
        /// </summary>
        public static GuidAPColumnDef PayTypeDef {
            get {
                return APDBDef.Payments.PayType;
            }
        }
        
        /// <summary>
        /// 冗余字段，备用
        /// </summary>
        public virtual System.Guid ResourceId {
            get {
                return _resourceId;
            }
            set {
                _resourceId = value;
            }
        }
        
        /// <summary>
        /// 冗余字段，备用 APColumnDef
        /// </summary>
        public static GuidAPColumnDef ResourceIdDef {
            get {
                return APDBDef.Payments.ResourceId;
            }
        }
        
        /// <summary>
        /// 排序
        /// </summary>
        public virtual double Sort {
            get {
                return _sort;
            }
            set {
                _sort = value;
            }
        }
        
        /// <summary>
        /// 排序 APColumnDef
        /// </summary>
        public static DoubleAPColumnDef SortDef {
            get {
                return APDBDef.Payments.Sort;
            }
        }
        
        /// <summary>
        /// 是否最终确认
        /// </summary>
        public virtual bool IsConfirm {
            get {
                return _isConfirm;
            }
            set {
                _isConfirm = value;
            }
        }
        
        /// <summary>
        /// 是否最终确认 APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsConfirmDef {
            get {
                return APDBDef.Payments.IsConfirm;
            }
        }
        
        /// <summary>
        /// 父级ID
        /// </summary>
        public virtual System.Guid ParentId {
            get {
                return _parentId;
            }
            set {
                _parentId = value;
            }
        }
        
        /// <summary>
        /// 父级ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef ParentIdDef {
            get {
                return APDBDef.Payments.ParentId;
            }
        }
        
        /// <summary>
        /// PaymentsTableDef APTableDef
        /// </summary>
        public static APDBDef.PaymentsTableDef TableDef {
            get {
                return APDBDef.Payments;
            }
        }
        
        /// <summary>
        /// PaymentsTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Payments.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Payments data) {
            PayId = data.PayId;
            PayName = data.PayName;
            ProjectId = data.ProjectId;
            Money = data.Money;
            RateOfProgress = data.RateOfProgress;
            InvoiceDate = data.InvoiceDate;
            PayDate = data.PayDate;
            PayType = data.PayType;
            ResourceId = data.ResourceId;
            Sort = data.Sort;
            IsConfirm = data.IsConfirm;
            ParentId = data.ParentId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Payments data) {
            if ((PayId != data.PayId)) {
                return false;
            }
            if ((PayName != data.PayName)) {
                return false;
            }
            if ((ProjectId != data.ProjectId)) {
                return false;
            }
            if ((Money != data.Money)) {
                return false;
            }
            if ((RateOfProgress != data.RateOfProgress)) {
                return false;
            }
            if ((InvoiceDate != data.InvoiceDate)) {
                return false;
            }
            if ((PayDate != data.PayDate)) {
                return false;
            }
            if ((PayType != data.PayType)) {
                return false;
            }
            if ((ResourceId != data.ResourceId)) {
                return false;
            }
            if ((Sort != data.Sort)) {
                return false;
            }
            if ((IsConfirm != data.IsConfirm)) {
                return false;
            }
            if ((ParentId != data.ParentId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.PaymentsBpl.Insert(((Payments)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.PaymentsBpl.Update(((Payments)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid payId, Object metadata) {
            APBplDef.PaymentsBpl.UpdatePartial(payId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid payId) {
            APBplDef.PaymentsBpl.PrimaryDelete(payId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.PaymentsBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.PaymentsBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Payments PrimaryGet(System.Guid payId) {
            return APBplDef.PaymentsBpl.PrimaryGet(payId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Payments> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.PaymentsBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Payments> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.PaymentsBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Payments> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.PaymentsBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Payments> GetAll() {
            return APBplDef.PaymentsBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 款项
    /// </summary>
    [Serializable()]
    public partial class Payments : PaymentsBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Payments() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Payments(System.Guid payId, string payName, System.Guid projectId, double money, double rateOfProgress, System.DateTime invoiceDate, System.DateTime payDate, System.Guid payType, System.Guid resourceId, double sort, bool isConfirm, System.Guid parentId) : 
                base(payId, payName, projectId, money, rateOfProgress, invoiceDate, payDate, payType, resourceId, sort, isConfirm, parentId) {
        }
    }
    
    /// <summary>
    ///  Base
    /// </summary>
    [Serializable()]
    public abstract partial class MileStoneBase {
        
        /// <summary>
        /// 节点ID
        /// </summary>
        private System.Guid _stoneId;
        
        /// <summary>
        /// StoneName
        /// </summary>
        private string _stoneName = string.Empty;
        
        /// <summary>
        /// StoneStatus
        /// </summary>
        private System.Guid _stoneStatus;
        
        /// <summary>
        /// StoneType
        /// </summary>
        private System.Guid _stoneType;
        
        /// <summary>
        /// 排序
        /// </summary>
        private double _sort;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public MileStoneBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public MileStoneBase(System.Guid stoneId, string stoneName, System.Guid stoneStatus, System.Guid stoneType, double sort) {
            _stoneId = stoneId;
            _stoneName = stoneName;
            _stoneStatus = stoneStatus;
            _stoneType = stoneType;
            _sort = sort;
        }
        
        /// <summary>
        /// 节点ID
        /// </summary>
        public virtual System.Guid StoneId {
            get {
                return _stoneId;
            }
            set {
                _stoneId = value;
            }
        }
        
        /// <summary>
        /// 节点ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef StoneIdDef {
            get {
                return APDBDef.MileStone.StoneId;
            }
        }
        
        /// <summary>
        /// StoneName
        /// </summary>
        [Display(Name="节点名称")]
        [StringLength(100)]
        public virtual string StoneName {
            get {
                return _stoneName;
            }
            set {
                _stoneName = value;
            }
        }
        
        /// <summary>
        /// StoneName APColumnDef
        /// </summary>
        public static StringAPColumnDef StoneNameDef {
            get {
                return APDBDef.MileStone.StoneName;
            }
        }
        
        /// <summary>
        /// StoneStatus
        /// </summary>
        [Display(Name="节点状态")]
        public virtual System.Guid StoneStatus {
            get {
                return _stoneStatus;
            }
            set {
                _stoneStatus = value;
            }
        }
        
        /// <summary>
        /// StoneStatus APColumnDef
        /// </summary>
        public static GuidAPColumnDef StoneStatusDef {
            get {
                return APDBDef.MileStone.StoneStatus;
            }
        }
        
        /// <summary>
        /// StoneType
        /// </summary>
        [Display(Name="节点类型")]
        public virtual System.Guid StoneType {
            get {
                return _stoneType;
            }
            set {
                _stoneType = value;
            }
        }
        
        /// <summary>
        /// StoneType APColumnDef
        /// </summary>
        public static GuidAPColumnDef StoneTypeDef {
            get {
                return APDBDef.MileStone.StoneType;
            }
        }
        
        /// <summary>
        /// 排序
        /// </summary>
        public virtual double Sort {
            get {
                return _sort;
            }
            set {
                _sort = value;
            }
        }
        
        /// <summary>
        /// 排序 APColumnDef
        /// </summary>
        public static DoubleAPColumnDef SortDef {
            get {
                return APDBDef.MileStone.Sort;
            }
        }
        
        /// <summary>
        /// MileStoneTableDef APTableDef
        /// </summary>
        public static APDBDef.MileStoneTableDef TableDef {
            get {
                return APDBDef.MileStone;
            }
        }
        
        /// <summary>
        /// MileStoneTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.MileStone.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(MileStone data) {
            StoneId = data.StoneId;
            StoneName = data.StoneName;
            StoneStatus = data.StoneStatus;
            StoneType = data.StoneType;
            Sort = data.Sort;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(MileStone data) {
            if ((StoneId != data.StoneId)) {
                return false;
            }
            if ((StoneName != data.StoneName)) {
                return false;
            }
            if ((StoneStatus != data.StoneStatus)) {
                return false;
            }
            if ((StoneType != data.StoneType)) {
                return false;
            }
            if ((Sort != data.Sort)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.MileStoneBpl.Insert(((MileStone)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.MileStoneBpl.Update(((MileStone)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid stoneId, Object metadata) {
            APBplDef.MileStoneBpl.UpdatePartial(stoneId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid stoneId) {
            APBplDef.MileStoneBpl.PrimaryDelete(stoneId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.MileStoneBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.MileStoneBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static MileStone PrimaryGet(System.Guid stoneId) {
            return APBplDef.MileStoneBpl.PrimaryGet(stoneId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<MileStone> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.MileStoneBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<MileStone> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.MileStoneBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<MileStone> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.MileStoneBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<MileStone> GetAll() {
            return APBplDef.MileStoneBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 
    /// </summary>
    [Serializable()]
    public partial class MileStone : MileStoneBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public MileStone() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public MileStone(System.Guid stoneId, string stoneName, System.Guid stoneStatus, System.Guid stoneType, double sort) : 
                base(stoneId, stoneName, stoneStatus, stoneType, sort) {
        }
    }
    
    /// <summary>
    ///  Base
    /// </summary>
    [Serializable()]
    public abstract partial class ProjectMileStoneBase {
        
        /// <summary>
        /// 项目节点ID
        /// </summary>
        private System.Guid _pmsId;
        
        /// <summary>
        /// StoneId
        /// </summary>
        private System.Guid _stoneId;
        
        /// <summary>
        /// 项目ID
        /// </summary>
        private System.Guid _projectid;
        
        /// <summary>
        /// FolderId
        /// </summary>
        private System.Guid _folderId;
        
        /// <summary>
        /// Content
        /// </summary>
        private string _content;
        
        /// <summary>
        /// StartDate
        /// </summary>
        private System.DateTime _startDate = DateTime.Now;
        
        /// <summary>
        /// EndDate
        /// </summary>
        private System.DateTime _endDate;
        
        /// <summary>
        /// 冗余字段 TODO:20190103
        /// </summary>
        private System.Guid _status;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate = DateTime.Now;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ProjectMileStoneBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ProjectMileStoneBase(System.Guid pmsId, System.Guid stoneId, System.Guid projectid, System.Guid folderId, string content, System.DateTime startDate, System.DateTime endDate, System.Guid status, System.DateTime createDate) {
            _pmsId = pmsId;
            _stoneId = stoneId;
            _projectid = projectid;
            _folderId = folderId;
            _content = content;
            _startDate = startDate;
            _endDate = endDate;
            _status = status;
            _createDate = createDate;
        }
        
        /// <summary>
        /// 项目节点ID
        /// </summary>
        public virtual System.Guid PmsId {
            get {
                return _pmsId;
            }
            set {
                _pmsId = value;
            }
        }
        
        /// <summary>
        /// 项目节点ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef PmsIdDef {
            get {
                return APDBDef.ProjectMileStone.PmsId;
            }
        }
        
        /// <summary>
        /// StoneId
        /// </summary>
        [Display(Name="节点ID")]
        public virtual System.Guid StoneId {
            get {
                return _stoneId;
            }
            set {
                _stoneId = value;
            }
        }
        
        /// <summary>
        /// StoneId APColumnDef
        /// </summary>
        public static GuidAPColumnDef StoneIdDef {
            get {
                return APDBDef.ProjectMileStone.StoneId;
            }
        }
        
        /// <summary>
        /// 项目ID
        /// </summary>
        public virtual System.Guid Projectid {
            get {
                return _projectid;
            }
            set {
                _projectid = value;
            }
        }
        
        /// <summary>
        /// 项目ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef ProjectidDef {
            get {
                return APDBDef.ProjectMileStone.Projectid;
            }
        }
        
        /// <summary>
        /// FolderId
        /// </summary>
        public virtual System.Guid FolderId {
            get {
                return _folderId;
            }
            set {
                _folderId = value;
            }
        }
        
        /// <summary>
        /// FolderId APColumnDef
        /// </summary>
        public static GuidAPColumnDef FolderIdDef {
            get {
                return APDBDef.ProjectMileStone.FolderId;
            }
        }
        
        /// <summary>
        /// Content
        /// </summary>
        [Display(Name="内容")]
        [StringLength(2000)]
        public virtual string Content {
            get {
                return _content;
            }
            set {
                _content = value;
            }
        }
        
        /// <summary>
        /// Content APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentDef {
            get {
                return APDBDef.ProjectMileStone.Content;
            }
        }
        
        /// <summary>
        /// StartDate
        /// </summary>
        [Display(Name="开始时间")]
        public virtual System.DateTime StartDate {
            get {
                return _startDate;
            }
            set {
                _startDate = value;
            }
        }
        
        /// <summary>
        /// StartDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef StartDateDef {
            get {
                return APDBDef.ProjectMileStone.StartDate;
            }
        }
        
        /// <summary>
        /// EndDate
        /// </summary>
        [Display(Name="结束时间")]
        public virtual System.DateTime EndDate {
            get {
                return _endDate;
            }
            set {
                _endDate = value;
            }
        }
        
        /// <summary>
        /// EndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef EndDateDef {
            get {
                return APDBDef.ProjectMileStone.EndDate;
            }
        }
        
        /// <summary>
        /// 冗余字段 TODO:20190103
        /// </summary>
        [Display(Name="当前项目里程碑状态")]
        public virtual System.Guid Status {
            get {
                return _status;
            }
            set {
                _status = value;
            }
        }
        
        /// <summary>
        /// 冗余字段 TODO:20190103 APColumnDef
        /// </summary>
        public static GuidAPColumnDef StatusDef {
            get {
                return APDBDef.ProjectMileStone.Status;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.ProjectMileStone.CreateDate;
            }
        }
        
        /// <summary>
        /// ProjectMileStoneTableDef APTableDef
        /// </summary>
        public static APDBDef.ProjectMileStoneTableDef TableDef {
            get {
                return APDBDef.ProjectMileStone;
            }
        }
        
        /// <summary>
        /// ProjectMileStoneTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.ProjectMileStone.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(ProjectMileStone data) {
            PmsId = data.PmsId;
            StoneId = data.StoneId;
            Projectid = data.Projectid;
            FolderId = data.FolderId;
            Content = data.Content;
            StartDate = data.StartDate;
            EndDate = data.EndDate;
            Status = data.Status;
            CreateDate = data.CreateDate;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(ProjectMileStone data) {
            if ((PmsId != data.PmsId)) {
                return false;
            }
            if ((StoneId != data.StoneId)) {
                return false;
            }
            if ((Projectid != data.Projectid)) {
                return false;
            }
            if ((FolderId != data.FolderId)) {
                return false;
            }
            if ((Content != data.Content)) {
                return false;
            }
            if ((StartDate != data.StartDate)) {
                return false;
            }
            if ((EndDate != data.EndDate)) {
                return false;
            }
            if ((Status != data.Status)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.ProjectMileStoneBpl.Insert(((ProjectMileStone)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.ProjectMileStoneBpl.Update(((ProjectMileStone)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid pmsId, Object metadata) {
            APBplDef.ProjectMileStoneBpl.UpdatePartial(pmsId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid pmsId) {
            APBplDef.ProjectMileStoneBpl.PrimaryDelete(pmsId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.ProjectMileStoneBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.ProjectMileStoneBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static ProjectMileStone PrimaryGet(System.Guid pmsId) {
            return APBplDef.ProjectMileStoneBpl.PrimaryGet(pmsId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ProjectMileStone> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.ProjectMileStoneBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ProjectMileStone> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.ProjectMileStoneBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ProjectMileStone> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.ProjectMileStoneBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<ProjectMileStone> GetAll() {
            return APBplDef.ProjectMileStoneBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 
    /// </summary>
    [Serializable()]
    public partial class ProjectMileStone : ProjectMileStoneBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ProjectMileStone() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ProjectMileStone(System.Guid pmsId, System.Guid stoneId, System.Guid projectid, System.Guid folderId, string content, System.DateTime startDate, System.DateTime endDate, System.Guid status, System.DateTime createDate) : 
                base(pmsId, stoneId, projectid, folderId, content, startDate, endDate, status, createDate) {
        }
    }
    
    /// <summary>
    ///  Base
    /// </summary>
    [Serializable()]
    public abstract partial class ProjectStoneTaskBase {
        
        /// <summary>
        /// 节点任务ID
        /// </summary>
        private System.Guid _pstId;
        
        /// <summary>
        /// 项目节点ID
        /// </summary>
        private System.Guid _pmsId;
        
        /// <summary>
        /// 项目id 冗余针对没有pmsId的节点任务
        /// </summary>
        private System.Guid _projectId;
        
        /// <summary>
        /// TaskName
        /// </summary>
        private string _taskName = string.Empty;
        
        /// <summary>
        /// StartDate
        /// </summary>
        private System.DateTime _startDate = DateTime.Now;
        
        /// <summary>
        /// EndDate
        /// </summary>
        private System.DateTime _endDate;
        
        /// <summary>
        /// RealStartDate
        /// </summary>
        private System.DateTime _realStartDate;
        
        /// <summary>
        /// RealEndDate
        /// </summary>
        private System.DateTime _realEndDate;
        
        /// <summary>
        /// TaskStatus
        /// </summary>
        private System.Guid _taskStatus;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate = DateTime.Now;
        
        /// <summary>
        /// TaskType
        /// </summary>
        private System.Guid _taskType;
        
        /// <summary>
        /// ManagerId
        /// </summary>
        private System.Guid _managerId;
        
        /// <summary>
        /// ReviewerID
        /// </summary>
        private System.Guid _reviewerID;
        
        /// <summary>
        /// 排序Id
        /// </summary>
        private double _sortId;
        
        /// <summary>
        /// UpgradeEndDate
        /// </summary>
        private System.DateTime _upgradeEndDate;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ProjectStoneTaskBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ProjectStoneTaskBase(System.Guid pstId, System.Guid pmsId, System.Guid projectId, string taskName, System.DateTime startDate, System.DateTime endDate, System.DateTime realStartDate, System.DateTime realEndDate, System.Guid taskStatus, System.DateTime createDate, System.Guid taskType, System.Guid managerId, System.Guid reviewerID, double sortId, System.DateTime upgradeEndDate) {
            _pstId = pstId;
            _pmsId = pmsId;
            _projectId = projectId;
            _taskName = taskName;
            _startDate = startDate;
            _endDate = endDate;
            _realStartDate = realStartDate;
            _realEndDate = realEndDate;
            _taskStatus = taskStatus;
            _createDate = createDate;
            _taskType = taskType;
            _managerId = managerId;
            _reviewerID = reviewerID;
            _sortId = sortId;
            _upgradeEndDate = upgradeEndDate;
        }
        
        /// <summary>
        /// 节点任务ID
        /// </summary>
        public virtual System.Guid PstId {
            get {
                return _pstId;
            }
            set {
                _pstId = value;
            }
        }
        
        /// <summary>
        /// 节点任务ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef PstIdDef {
            get {
                return APDBDef.ProjectStoneTask.PstId;
            }
        }
        
        /// <summary>
        /// 项目节点ID
        /// </summary>
        public virtual System.Guid PmsId {
            get {
                return _pmsId;
            }
            set {
                _pmsId = value;
            }
        }
        
        /// <summary>
        /// 项目节点ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef PmsIdDef {
            get {
                return APDBDef.ProjectStoneTask.PmsId;
            }
        }
        
        /// <summary>
        /// 项目id 冗余针对没有pmsId的节点任务
        /// </summary>
        public virtual System.Guid ProjectId {
            get {
                return _projectId;
            }
            set {
                _projectId = value;
            }
        }
        
        /// <summary>
        /// 项目id 冗余针对没有pmsId的节点任务 APColumnDef
        /// </summary>
        public static GuidAPColumnDef ProjectIdDef {
            get {
                return APDBDef.ProjectStoneTask.ProjectId;
            }
        }
        
        /// <summary>
        /// TaskName
        /// </summary>
        [Display(Name="任务名称")]
        [Required()]
        [StringLength(200)]
        public virtual string TaskName {
            get {
                return _taskName;
            }
            set {
                _taskName = value;
            }
        }
        
        /// <summary>
        /// TaskName APColumnDef
        /// </summary>
        public static StringAPColumnDef TaskNameDef {
            get {
                return APDBDef.ProjectStoneTask.TaskName;
            }
        }
        
        /// <summary>
        /// StartDate
        /// </summary>
        [Display(Name="开始时间")]
        public virtual System.DateTime StartDate {
            get {
                return _startDate;
            }
            set {
                _startDate = value;
            }
        }
        
        /// <summary>
        /// StartDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef StartDateDef {
            get {
                return APDBDef.ProjectStoneTask.StartDate;
            }
        }
        
        /// <summary>
        /// EndDate
        /// </summary>
        [Display(Name="结束时间")]
        public virtual System.DateTime EndDate {
            get {
                return _endDate;
            }
            set {
                _endDate = value;
            }
        }
        
        /// <summary>
        /// EndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef EndDateDef {
            get {
                return APDBDef.ProjectStoneTask.EndDate;
            }
        }
        
        /// <summary>
        /// RealStartDate
        /// </summary>
        [Display(Name="实际开始时间")]
        public virtual System.DateTime RealStartDate {
            get {
                return _realStartDate;
            }
            set {
                _realStartDate = value;
            }
        }
        
        /// <summary>
        /// RealStartDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef RealStartDateDef {
            get {
                return APDBDef.ProjectStoneTask.RealStartDate;
            }
        }
        
        /// <summary>
        /// RealEndDate
        /// </summary>
        [Display(Name="实际结束时间")]
        public virtual System.DateTime RealEndDate {
            get {
                return _realEndDate;
            }
            set {
                _realEndDate = value;
            }
        }
        
        /// <summary>
        /// RealEndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef RealEndDateDef {
            get {
                return APDBDef.ProjectStoneTask.RealEndDate;
            }
        }
        
        /// <summary>
        /// TaskStatus
        /// </summary>
        [Display(Name="任务状态")]
        public virtual System.Guid TaskStatus {
            get {
                return _taskStatus;
            }
            set {
                _taskStatus = value;
            }
        }
        
        /// <summary>
        /// TaskStatus APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskStatusDef {
            get {
                return APDBDef.ProjectStoneTask.TaskStatus;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.ProjectStoneTask.CreateDate;
            }
        }
        
        /// <summary>
        /// TaskType
        /// </summary>
        [Display(Name="任务类型")]
        public virtual System.Guid TaskType {
            get {
                return _taskType;
            }
            set {
                _taskType = value;
            }
        }
        
        /// <summary>
        /// TaskType APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskTypeDef {
            get {
                return APDBDef.ProjectStoneTask.TaskType;
            }
        }
        
        /// <summary>
        /// ManagerId
        /// </summary>
        [Display(Name="任务负责人ID")]
        public virtual System.Guid ManagerId {
            get {
                return _managerId;
            }
            set {
                _managerId = value;
            }
        }
        
        /// <summary>
        /// ManagerId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ManagerIdDef {
            get {
                return APDBDef.ProjectStoneTask.ManagerId;
            }
        }
        
        /// <summary>
        /// ReviewerID
        /// </summary>
        [Display(Name="任务审核者ID")]
        public virtual System.Guid ReviewerID {
            get {
                return _reviewerID;
            }
            set {
                _reviewerID = value;
            }
        }
        
        /// <summary>
        /// ReviewerID APColumnDef
        /// </summary>
        public static GuidAPColumnDef ReviewerIDDef {
            get {
                return APDBDef.ProjectStoneTask.ReviewerID;
            }
        }
        
        /// <summary>
        /// 排序Id
        /// </summary>
        public virtual double SortId {
            get {
                return _sortId;
            }
            set {
                _sortId = value;
            }
        }
        
        /// <summary>
        /// 排序Id APColumnDef
        /// </summary>
        public static DoubleAPColumnDef SortIdDef {
            get {
                return APDBDef.ProjectStoneTask.SortId;
            }
        }
        
        /// <summary>
        /// UpgradeEndDate
        /// </summary>
        [Display(Name="变更结束时间")]
        public virtual System.DateTime UpgradeEndDate {
            get {
                return _upgradeEndDate;
            }
            set {
                _upgradeEndDate = value;
            }
        }
        
        /// <summary>
        /// UpgradeEndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef UpgradeEndDateDef {
            get {
                return APDBDef.ProjectStoneTask.UpgradeEndDate;
            }
        }
        
        /// <summary>
        /// ProjectStoneTaskTableDef APTableDef
        /// </summary>
        public static APDBDef.ProjectStoneTaskTableDef TableDef {
            get {
                return APDBDef.ProjectStoneTask;
            }
        }
        
        /// <summary>
        /// ProjectStoneTaskTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.ProjectStoneTask.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(ProjectStoneTask data) {
            PstId = data.PstId;
            PmsId = data.PmsId;
            ProjectId = data.ProjectId;
            TaskName = data.TaskName;
            StartDate = data.StartDate;
            EndDate = data.EndDate;
            RealStartDate = data.RealStartDate;
            RealEndDate = data.RealEndDate;
            TaskStatus = data.TaskStatus;
            CreateDate = data.CreateDate;
            TaskType = data.TaskType;
            ManagerId = data.ManagerId;
            ReviewerID = data.ReviewerID;
            SortId = data.SortId;
            UpgradeEndDate = data.UpgradeEndDate;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(ProjectStoneTask data) {
            if ((PstId != data.PstId)) {
                return false;
            }
            if ((PmsId != data.PmsId)) {
                return false;
            }
            if ((ProjectId != data.ProjectId)) {
                return false;
            }
            if ((TaskName != data.TaskName)) {
                return false;
            }
            if ((StartDate != data.StartDate)) {
                return false;
            }
            if ((EndDate != data.EndDate)) {
                return false;
            }
            if ((RealStartDate != data.RealStartDate)) {
                return false;
            }
            if ((RealEndDate != data.RealEndDate)) {
                return false;
            }
            if ((TaskStatus != data.TaskStatus)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((TaskType != data.TaskType)) {
                return false;
            }
            if ((ManagerId != data.ManagerId)) {
                return false;
            }
            if ((ReviewerID != data.ReviewerID)) {
                return false;
            }
            if ((SortId != data.SortId)) {
                return false;
            }
            if ((UpgradeEndDate != data.UpgradeEndDate)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.ProjectStoneTaskBpl.Insert(((ProjectStoneTask)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.ProjectStoneTaskBpl.Update(((ProjectStoneTask)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid pstId, Object metadata) {
            APBplDef.ProjectStoneTaskBpl.UpdatePartial(pstId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid pstId) {
            APBplDef.ProjectStoneTaskBpl.PrimaryDelete(pstId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.ProjectStoneTaskBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.ProjectStoneTaskBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static ProjectStoneTask PrimaryGet(System.Guid pstId) {
            return APBplDef.ProjectStoneTaskBpl.PrimaryGet(pstId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ProjectStoneTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.ProjectStoneTaskBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ProjectStoneTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.ProjectStoneTaskBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ProjectStoneTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.ProjectStoneTaskBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<ProjectStoneTask> GetAll() {
            return APBplDef.ProjectStoneTaskBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 
    /// </summary>
    [Serializable()]
    public partial class ProjectStoneTask : ProjectStoneTaskBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ProjectStoneTask() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ProjectStoneTask(System.Guid pstId, System.Guid pmsId, System.Guid projectId, string taskName, System.DateTime startDate, System.DateTime endDate, System.DateTime realStartDate, System.DateTime realEndDate, System.Guid taskStatus, System.DateTime createDate, System.Guid taskType, System.Guid managerId, System.Guid reviewerID, double sortId, System.DateTime upgradeEndDate) : 
                base(pstId, pmsId, projectId, taskName, startDate, endDate, realStartDate, realEndDate, taskStatus, createDate, taskType, managerId, reviewerID, sortId, upgradeEndDate) {
        }
    }
    
    /// <summary>
    /// 工作任务 Base
    /// </summary>
    [Serializable()]
    public abstract partial class WorkTaskBase {
        
        /// <summary>
        /// TaskId
        /// </summary>
        private System.Guid _taskId;
        
        /// <summary>
        /// Projectid
        /// </summary>
        private System.Guid _projectid;
        
        /// <summary>
        /// TaskName
        /// </summary>
        private string _taskName = string.Empty;
        
        /// <summary>
        /// Description
        /// </summary>
        private string _description;
        
        /// <summary>
        /// TaskType
        /// </summary>
        private System.Guid _taskType;
        
        /// <summary>
        /// TaskLevel
        /// </summary>
        private int _taskLevel = 1;
        
        /// <summary>
        /// TaskStatus
        /// </summary>
        private System.Guid _taskStatus;
        
        /// <summary>
        /// RateOfProgress
        /// </summary>
        private double _rateOfProgress = 0;
        
        /// <summary>
        /// ParentId
        /// </summary>
        private System.Guid _parentId;
        
        /// <summary>
        /// WorkHours
        /// </summary>
        private double _workHours;
        
        /// <summary>
        /// EstimateWorkHours
        /// </summary>
        private double _estimateWorkHours;
        
        /// <summary>
        /// ManagerId
        /// </summary>
        private System.Guid _managerId;
        
        /// <summary>
        /// CreatorId
        /// </summary>
        private System.Guid _creatorId;
        
        /// <summary>
        /// ReviewerID
        /// </summary>
        private System.Guid _reviewerID;
        
        /// <summary>
        /// StartDate
        /// </summary>
        private System.DateTime _startDate = DateTime.Now;
        
        /// <summary>
        /// EndDate
        /// </summary>
        private System.DateTime _endDate = DateTime.Now;
        
        /// <summary>
        /// RealStartDate
        /// </summary>
        private System.DateTime _realStartDate;
        
        /// <summary>
        /// RealEndDate
        /// </summary>
        private System.DateTime _realEndDate;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate = DateTime.Now;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.DateTime _modifyDate;
        
        /// <summary>
        /// 排序Id
        /// </summary>
        private int _sortId;
        
        /// <summary>
        /// 是否是父任务
        /// </summary>
        private bool _isParent;
        
        /// <summary>
        /// TaskFileType
        /// </summary>
        private System.Guid _taskFileType;
        
        /// <summary>
        /// （该字段只为运维任务创建）
        /// </summary>
        private int _serviceCount;
        
        /// <summary>
        /// 标准项ID
        /// </summary>
        private System.Guid _standardItemId;
        
        /// <summary>
        /// SubTypeId
        /// </summary>
        private System.Guid _subTypeId;
        
        /// <summary>
        /// SubTypeValue
        /// </summary>
        private double _subTypeValue = 0;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WorkTaskBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WorkTaskBase(
                    System.Guid taskId, 
                    System.Guid projectid, 
                    string taskName, 
                    string description, 
                    System.Guid taskType, 
                    int taskLevel, 
                    System.Guid taskStatus, 
                    double rateOfProgress, 
                    System.Guid parentId, 
                    double workHours, 
                    double estimateWorkHours, 
                    System.Guid managerId, 
                    System.Guid creatorId, 
                    System.Guid reviewerID, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    System.DateTime realStartDate, 
                    System.DateTime realEndDate, 
                    System.DateTime createDate, 
                    System.DateTime modifyDate, 
                    int sortId, 
                    bool isParent, 
                    System.Guid taskFileType, 
                    int serviceCount, 
                    System.Guid standardItemId, 
                    System.Guid subTypeId, 
                    double subTypeValue) {
            _taskId = taskId;
            _projectid = projectid;
            _taskName = taskName;
            _description = description;
            _taskType = taskType;
            _taskLevel = taskLevel;
            _taskStatus = taskStatus;
            _rateOfProgress = rateOfProgress;
            _parentId = parentId;
            _workHours = workHours;
            _estimateWorkHours = estimateWorkHours;
            _managerId = managerId;
            _creatorId = creatorId;
            _reviewerID = reviewerID;
            _startDate = startDate;
            _endDate = endDate;
            _realStartDate = realStartDate;
            _realEndDate = realEndDate;
            _createDate = createDate;
            _modifyDate = modifyDate;
            _sortId = sortId;
            _isParent = isParent;
            _taskFileType = taskFileType;
            _serviceCount = serviceCount;
            _standardItemId = standardItemId;
            _subTypeId = subTypeId;
            _subTypeValue = subTypeValue;
        }
        
        /// <summary>
        /// TaskId
        /// </summary>
        [Display(Name="任务ID")]
        public virtual System.Guid TaskId {
            get {
                return _taskId;
            }
            set {
                _taskId = value;
            }
        }
        
        /// <summary>
        /// TaskId APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskIdDef {
            get {
                return APDBDef.WorkTask.TaskId;
            }
        }
        
        /// <summary>
        /// Projectid
        /// </summary>
        [Display(Name="项目ID")]
        public virtual System.Guid Projectid {
            get {
                return _projectid;
            }
            set {
                _projectid = value;
            }
        }
        
        /// <summary>
        /// Projectid APColumnDef
        /// </summary>
        public static GuidAPColumnDef ProjectidDef {
            get {
                return APDBDef.WorkTask.Projectid;
            }
        }
        
        /// <summary>
        /// TaskName
        /// </summary>
        [Display(Name="任务名称")]
        [Required()]
        [StringLength(200)]
        public virtual string TaskName {
            get {
                return _taskName;
            }
            set {
                _taskName = value;
            }
        }
        
        /// <summary>
        /// TaskName APColumnDef
        /// </summary>
        public static StringAPColumnDef TaskNameDef {
            get {
                return APDBDef.WorkTask.TaskName;
            }
        }
        
        /// <summary>
        /// Description
        /// </summary>
        [Display(Name="任务描述")]
        [StringLength(1000)]
        public virtual string Description {
            get {
                return _description;
            }
            set {
                _description = value;
            }
        }
        
        /// <summary>
        /// Description APColumnDef
        /// </summary>
        public static StringAPColumnDef DescriptionDef {
            get {
                return APDBDef.WorkTask.Description;
            }
        }
        
        /// <summary>
        /// TaskType
        /// </summary>
        [Display(Name="任务类型")]
        public virtual System.Guid TaskType {
            get {
                return _taskType;
            }
            set {
                _taskType = value;
            }
        }
        
        /// <summary>
        /// TaskType APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskTypeDef {
            get {
                return APDBDef.WorkTask.TaskType;
            }
        }
        
        /// <summary>
        /// TaskLevel
        /// </summary>
        [Display(Name="任务级别")]
        public virtual int TaskLevel {
            get {
                return _taskLevel;
            }
            set {
                _taskLevel = value;
            }
        }
        
        /// <summary>
        /// TaskLevel APColumnDef
        /// </summary>
        public static Int32APColumnDef TaskLevelDef {
            get {
                return APDBDef.WorkTask.TaskLevel;
            }
        }
        
        /// <summary>
        /// TaskStatus
        /// </summary>
        [Display(Name="任务状态")]
        public virtual System.Guid TaskStatus {
            get {
                return _taskStatus;
            }
            set {
                _taskStatus = value;
            }
        }
        
        /// <summary>
        /// TaskStatus APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskStatusDef {
            get {
                return APDBDef.WorkTask.TaskStatus;
            }
        }
        
        /// <summary>
        /// RateOfProgress
        /// </summary>
        [Display(Name="任务进度")]
        public virtual double RateOfProgress {
            get {
                return _rateOfProgress;
            }
            set {
                _rateOfProgress = value;
            }
        }
        
        /// <summary>
        /// RateOfProgress APColumnDef
        /// </summary>
        public static DoubleAPColumnDef RateOfProgressDef {
            get {
                return APDBDef.WorkTask.RateOfProgress;
            }
        }
        
        /// <summary>
        /// ParentId
        /// </summary>
        [Display(Name="父任务ID")]
        public virtual System.Guid ParentId {
            get {
                return _parentId;
            }
            set {
                _parentId = value;
            }
        }
        
        /// <summary>
        /// ParentId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ParentIdDef {
            get {
                return APDBDef.WorkTask.ParentId;
            }
        }
        
        /// <summary>
        /// WorkHours
        /// </summary>
        [Display(Name="已用工时")]
        public virtual double WorkHours {
            get {
                return _workHours;
            }
            set {
                _workHours = value;
            }
        }
        
        /// <summary>
        /// WorkHours APColumnDef
        /// </summary>
        public static DoubleAPColumnDef WorkHoursDef {
            get {
                return APDBDef.WorkTask.WorkHours;
            }
        }
        
        /// <summary>
        /// EstimateWorkHours
        /// </summary>
        [Display(Name="预计工时")]
        public virtual double EstimateWorkHours {
            get {
                return _estimateWorkHours;
            }
            set {
                _estimateWorkHours = value;
            }
        }
        
        /// <summary>
        /// EstimateWorkHours APColumnDef
        /// </summary>
        public static DoubleAPColumnDef EstimateWorkHoursDef {
            get {
                return APDBDef.WorkTask.EstimateWorkHours;
            }
        }
        
        /// <summary>
        /// ManagerId
        /// </summary>
        [Display(Name="任务负责人ID")]
        public virtual System.Guid ManagerId {
            get {
                return _managerId;
            }
            set {
                _managerId = value;
            }
        }
        
        /// <summary>
        /// ManagerId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ManagerIdDef {
            get {
                return APDBDef.WorkTask.ManagerId;
            }
        }
        
        /// <summary>
        /// CreatorId
        /// </summary>
        [Display(Name="任务创建者ID")]
        public virtual System.Guid CreatorId {
            get {
                return _creatorId;
            }
            set {
                _creatorId = value;
            }
        }
        
        /// <summary>
        /// CreatorId APColumnDef
        /// </summary>
        public static GuidAPColumnDef CreatorIdDef {
            get {
                return APDBDef.WorkTask.CreatorId;
            }
        }
        
        /// <summary>
        /// ReviewerID
        /// </summary>
        [Display(Name="任务审核者ID")]
        public virtual System.Guid ReviewerID {
            get {
                return _reviewerID;
            }
            set {
                _reviewerID = value;
            }
        }
        
        /// <summary>
        /// ReviewerID APColumnDef
        /// </summary>
        public static GuidAPColumnDef ReviewerIDDef {
            get {
                return APDBDef.WorkTask.ReviewerID;
            }
        }
        
        /// <summary>
        /// StartDate
        /// </summary>
        [Display(Name="开始时间")]
        public virtual System.DateTime StartDate {
            get {
                return _startDate;
            }
            set {
                _startDate = value;
            }
        }
        
        /// <summary>
        /// StartDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef StartDateDef {
            get {
                return APDBDef.WorkTask.StartDate;
            }
        }
        
        /// <summary>
        /// EndDate
        /// </summary>
        [Display(Name="结束时间")]
        public virtual System.DateTime EndDate {
            get {
                return _endDate;
            }
            set {
                _endDate = value;
            }
        }
        
        /// <summary>
        /// EndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef EndDateDef {
            get {
                return APDBDef.WorkTask.EndDate;
            }
        }
        
        /// <summary>
        /// RealStartDate
        /// </summary>
        [Display(Name="实际开始时间")]
        public virtual System.DateTime RealStartDate {
            get {
                return _realStartDate;
            }
            set {
                _realStartDate = value;
            }
        }
        
        /// <summary>
        /// RealStartDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef RealStartDateDef {
            get {
                return APDBDef.WorkTask.RealStartDate;
            }
        }
        
        /// <summary>
        /// RealEndDate
        /// </summary>
        [Display(Name="实际结束时间")]
        public virtual System.DateTime RealEndDate {
            get {
                return _realEndDate;
            }
            set {
                _realEndDate = value;
            }
        }
        
        /// <summary>
        /// RealEndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef RealEndDateDef {
            get {
                return APDBDef.WorkTask.RealEndDate;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.WorkTask.CreateDate;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="最近修改时间")]
        public virtual System.DateTime ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.WorkTask.ModifyDate;
            }
        }
        
        /// <summary>
        /// 排序Id
        /// </summary>
        public virtual int SortId {
            get {
                return _sortId;
            }
            set {
                _sortId = value;
            }
        }
        
        /// <summary>
        /// 排序Id APColumnDef
        /// </summary>
        public static Int32APColumnDef SortIdDef {
            get {
                return APDBDef.WorkTask.SortId;
            }
        }
        
        /// <summary>
        /// 是否是父任务
        /// </summary>
        public virtual bool IsParent {
            get {
                return _isParent;
            }
            set {
                _isParent = value;
            }
        }
        
        /// <summary>
        /// 是否是父任务 APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsParentDef {
            get {
                return APDBDef.WorkTask.IsParent;
            }
        }
        
        /// <summary>
        /// TaskFileType
        /// </summary>
        [Display(Name="文档类型")]
        public virtual System.Guid TaskFileType {
            get {
                return _taskFileType;
            }
            set {
                _taskFileType = value;
            }
        }
        
        /// <summary>
        /// TaskFileType APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskFileTypeDef {
            get {
                return APDBDef.WorkTask.TaskFileType;
            }
        }
        
        /// <summary>
        /// （该字段只为运维任务创建）
        /// </summary>
        [Display(Name="运维数量")]
        public virtual int ServiceCount {
            get {
                return _serviceCount;
            }
            set {
                _serviceCount = value;
            }
        }
        
        /// <summary>
        /// （该字段只为运维任务创建） APColumnDef
        /// </summary>
        public static Int32APColumnDef ServiceCountDef {
            get {
                return APDBDef.WorkTask.ServiceCount;
            }
        }
        
        /// <summary>
        /// 标准项ID
        /// </summary>
        [Display(Name="标准复杂度")]
        public virtual System.Guid StandardItemId {
            get {
                return _standardItemId;
            }
            set {
                _standardItemId = value;
            }
        }
        
        /// <summary>
        /// 标准项ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef StandardItemIdDef {
            get {
                return APDBDef.WorkTask.StandardItemId;
            }
        }
        
        /// <summary>
        /// SubTypeId
        /// </summary>
        [Display(Name="子类型")]
        public virtual System.Guid SubTypeId {
            get {
                return _subTypeId;
            }
            set {
                _subTypeId = value;
            }
        }
        
        /// <summary>
        /// SubTypeId APColumnDef
        /// </summary>
        public static GuidAPColumnDef SubTypeIdDef {
            get {
                return APDBDef.WorkTask.SubTypeId;
            }
        }
        
        /// <summary>
        /// SubTypeValue
        /// </summary>
        [Display(Name="任务子类型值")]
        public virtual double SubTypeValue {
            get {
                return _subTypeValue;
            }
            set {
                _subTypeValue = value;
            }
        }
        
        /// <summary>
        /// SubTypeValue APColumnDef
        /// </summary>
        public static DoubleAPColumnDef SubTypeValueDef {
            get {
                return APDBDef.WorkTask.SubTypeValue;
            }
        }
        
        /// <summary>
        /// WorkTaskTableDef APTableDef
        /// </summary>
        public static APDBDef.WorkTaskTableDef TableDef {
            get {
                return APDBDef.WorkTask;
            }
        }
        
        /// <summary>
        /// WorkTaskTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.WorkTask.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(WorkTask data) {
            TaskId = data.TaskId;
            Projectid = data.Projectid;
            TaskName = data.TaskName;
            Description = data.Description;
            TaskType = data.TaskType;
            TaskLevel = data.TaskLevel;
            TaskStatus = data.TaskStatus;
            RateOfProgress = data.RateOfProgress;
            ParentId = data.ParentId;
            WorkHours = data.WorkHours;
            EstimateWorkHours = data.EstimateWorkHours;
            ManagerId = data.ManagerId;
            CreatorId = data.CreatorId;
            ReviewerID = data.ReviewerID;
            StartDate = data.StartDate;
            EndDate = data.EndDate;
            RealStartDate = data.RealStartDate;
            RealEndDate = data.RealEndDate;
            CreateDate = data.CreateDate;
            ModifyDate = data.ModifyDate;
            SortId = data.SortId;
            IsParent = data.IsParent;
            TaskFileType = data.TaskFileType;
            ServiceCount = data.ServiceCount;
            StandardItemId = data.StandardItemId;
            SubTypeId = data.SubTypeId;
            SubTypeValue = data.SubTypeValue;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(WorkTask data) {
            if ((TaskId != data.TaskId)) {
                return false;
            }
            if ((Projectid != data.Projectid)) {
                return false;
            }
            if ((TaskName != data.TaskName)) {
                return false;
            }
            if ((Description != data.Description)) {
                return false;
            }
            if ((TaskType != data.TaskType)) {
                return false;
            }
            if ((TaskLevel != data.TaskLevel)) {
                return false;
            }
            if ((TaskStatus != data.TaskStatus)) {
                return false;
            }
            if ((RateOfProgress != data.RateOfProgress)) {
                return false;
            }
            if ((ParentId != data.ParentId)) {
                return false;
            }
            if ((WorkHours != data.WorkHours)) {
                return false;
            }
            if ((EstimateWorkHours != data.EstimateWorkHours)) {
                return false;
            }
            if ((ManagerId != data.ManagerId)) {
                return false;
            }
            if ((CreatorId != data.CreatorId)) {
                return false;
            }
            if ((ReviewerID != data.ReviewerID)) {
                return false;
            }
            if ((StartDate != data.StartDate)) {
                return false;
            }
            if ((EndDate != data.EndDate)) {
                return false;
            }
            if ((RealStartDate != data.RealStartDate)) {
                return false;
            }
            if ((RealEndDate != data.RealEndDate)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            if ((SortId != data.SortId)) {
                return false;
            }
            if ((IsParent != data.IsParent)) {
                return false;
            }
            if ((TaskFileType != data.TaskFileType)) {
                return false;
            }
            if ((ServiceCount != data.ServiceCount)) {
                return false;
            }
            if ((StandardItemId != data.StandardItemId)) {
                return false;
            }
            if ((SubTypeId != data.SubTypeId)) {
                return false;
            }
            if ((SubTypeValue != data.SubTypeValue)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.WorkTaskBpl.Insert(((WorkTask)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.WorkTaskBpl.Update(((WorkTask)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid taskId, Object metadata) {
            APBplDef.WorkTaskBpl.UpdatePartial(taskId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid taskId) {
            APBplDef.WorkTaskBpl.PrimaryDelete(taskId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.WorkTaskBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.WorkTaskBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static WorkTask PrimaryGet(System.Guid taskId) {
            return APBplDef.WorkTaskBpl.PrimaryGet(taskId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WorkTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.WorkTaskBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WorkTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.WorkTaskBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WorkTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.WorkTaskBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<WorkTask> GetAll() {
            return APBplDef.WorkTaskBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 工作任务
    /// </summary>
    [Serializable()]
    public partial class WorkTask : WorkTaskBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WorkTask() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WorkTask(
                    System.Guid taskId, 
                    System.Guid projectid, 
                    string taskName, 
                    string description, 
                    System.Guid taskType, 
                    int taskLevel, 
                    System.Guid taskStatus, 
                    double rateOfProgress, 
                    System.Guid parentId, 
                    double workHours, 
                    double estimateWorkHours, 
                    System.Guid managerId, 
                    System.Guid creatorId, 
                    System.Guid reviewerID, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    System.DateTime realStartDate, 
                    System.DateTime realEndDate, 
                    System.DateTime createDate, 
                    System.DateTime modifyDate, 
                    int sortId, 
                    bool isParent, 
                    System.Guid taskFileType, 
                    int serviceCount, 
                    System.Guid standardItemId, 
                    System.Guid subTypeId, 
                    double subTypeValue) : 
                base(taskId, projectid, taskName, description, taskType, taskLevel, taskStatus, rateOfProgress, parentId, workHours, estimateWorkHours, managerId, creatorId, reviewerID, startDate, endDate, realStartDate, realEndDate, createDate, modifyDate, sortId, isParent, taskFileType, serviceCount, standardItemId, subTypeId, subTypeValue) {
        }
    }
    
    /// <summary>
    /// 任务记录 Base
    /// </summary>
    [Serializable()]
    public abstract partial class WorkTaskLogBase {
        
        /// <summary>
        /// LogID
        /// </summary>
        private System.Guid _logID;
        
        /// <summary>
        /// TaskManagerId
        /// </summary>
        private System.Guid _taskManagerId;
        
        /// <summary>
        /// ProjectId
        /// </summary>
        private System.Guid _projectId;
        
        /// <summary>
        /// TaskId
        /// </summary>
        private System.Guid _taskId;
        
        /// <summary>
        /// StartDate
        /// </summary>
        private System.DateTime _startDate;
        
        /// <summary>
        /// EndDate
        /// </summary>
        private System.DateTime _endDate;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate = DateTime.Now;
        
        /// <summary>
        /// EstimateWorkHours
        /// </summary>
        private double _estimateWorkHours;
        
        /// <summary>
        /// TaskType
        /// </summary>
        private System.Guid _taskType;
        
        /// <summary>
        /// TaskStatus
        /// </summary>
        private System.Guid _taskStatus;
        
        /// <summary>
        /// RateOfProgress
        /// </summary>
        private double _rateOfProgress = 0;
        
        /// <summary>
        /// ParentId
        /// </summary>
        private System.Guid _parentId;
        
        /// <summary>
        /// WorkHours
        /// </summary>
        private double _workHours;
        
        /// <summary>
        /// ReviewerID
        /// </summary>
        private System.Guid _reviewerID;
        
        /// <summary>
        /// OperatorId
        /// </summary>
        private System.Guid _operatorId;
        
        /// <summary>
        /// TaskName
        /// </summary>
        private string _taskName = string.Empty;
        
        /// <summary>
        /// （该字段只为运维任务创建）
        /// </summary>
        private int _serviceCount;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WorkTaskLogBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WorkTaskLogBase(
                    System.Guid logID, 
                    System.Guid taskManagerId, 
                    System.Guid projectId, 
                    System.Guid taskId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    System.DateTime createDate, 
                    double estimateWorkHours, 
                    System.Guid taskType, 
                    System.Guid taskStatus, 
                    double rateOfProgress, 
                    System.Guid parentId, 
                    double workHours, 
                    System.Guid reviewerID, 
                    System.Guid operatorId, 
                    string taskName, 
                    int serviceCount) {
            _logID = logID;
            _taskManagerId = taskManagerId;
            _projectId = projectId;
            _taskId = taskId;
            _startDate = startDate;
            _endDate = endDate;
            _createDate = createDate;
            _estimateWorkHours = estimateWorkHours;
            _taskType = taskType;
            _taskStatus = taskStatus;
            _rateOfProgress = rateOfProgress;
            _parentId = parentId;
            _workHours = workHours;
            _reviewerID = reviewerID;
            _operatorId = operatorId;
            _taskName = taskName;
            _serviceCount = serviceCount;
        }
        
        /// <summary>
        /// LogID
        /// </summary>
        [Display(Name="计划ID")]
        public virtual System.Guid LogID {
            get {
                return _logID;
            }
            set {
                _logID = value;
            }
        }
        
        /// <summary>
        /// LogID APColumnDef
        /// </summary>
        public static GuidAPColumnDef LogIDDef {
            get {
                return APDBDef.WorkTaskLog.LogID;
            }
        }
        
        /// <summary>
        /// TaskManagerId
        /// </summary>
        [Display(Name="任务负责人ID")]
        public virtual System.Guid TaskManagerId {
            get {
                return _taskManagerId;
            }
            set {
                _taskManagerId = value;
            }
        }
        
        /// <summary>
        /// TaskManagerId APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskManagerIdDef {
            get {
                return APDBDef.WorkTaskLog.TaskManagerId;
            }
        }
        
        /// <summary>
        /// ProjectId
        /// </summary>
        [Display(Name="项目ID")]
        public virtual System.Guid ProjectId {
            get {
                return _projectId;
            }
            set {
                _projectId = value;
            }
        }
        
        /// <summary>
        /// ProjectId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ProjectIdDef {
            get {
                return APDBDef.WorkTaskLog.ProjectId;
            }
        }
        
        /// <summary>
        /// TaskId
        /// </summary>
        [Display(Name="任务ID")]
        public virtual System.Guid TaskId {
            get {
                return _taskId;
            }
            set {
                _taskId = value;
            }
        }
        
        /// <summary>
        /// TaskId APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskIdDef {
            get {
                return APDBDef.WorkTaskLog.TaskId;
            }
        }
        
        /// <summary>
        /// StartDate
        /// </summary>
        [Display(Name="开始时间")]
        public virtual System.DateTime StartDate {
            get {
                return _startDate;
            }
            set {
                _startDate = value;
            }
        }
        
        /// <summary>
        /// StartDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef StartDateDef {
            get {
                return APDBDef.WorkTaskLog.StartDate;
            }
        }
        
        /// <summary>
        /// EndDate
        /// </summary>
        [Display(Name="结束时间")]
        public virtual System.DateTime EndDate {
            get {
                return _endDate;
            }
            set {
                _endDate = value;
            }
        }
        
        /// <summary>
        /// EndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef EndDateDef {
            get {
                return APDBDef.WorkTaskLog.EndDate;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.WorkTaskLog.CreateDate;
            }
        }
        
        /// <summary>
        /// EstimateWorkHours
        /// </summary>
        [Display(Name="计划工时")]
        public virtual double EstimateWorkHours {
            get {
                return _estimateWorkHours;
            }
            set {
                _estimateWorkHours = value;
            }
        }
        
        /// <summary>
        /// EstimateWorkHours APColumnDef
        /// </summary>
        public static DoubleAPColumnDef EstimateWorkHoursDef {
            get {
                return APDBDef.WorkTaskLog.EstimateWorkHours;
            }
        }
        
        /// <summary>
        /// TaskType
        /// </summary>
        [Display(Name="任务类型")]
        public virtual System.Guid TaskType {
            get {
                return _taskType;
            }
            set {
                _taskType = value;
            }
        }
        
        /// <summary>
        /// TaskType APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskTypeDef {
            get {
                return APDBDef.WorkTaskLog.TaskType;
            }
        }
        
        /// <summary>
        /// TaskStatus
        /// </summary>
        [Display(Name="任务状态")]
        public virtual System.Guid TaskStatus {
            get {
                return _taskStatus;
            }
            set {
                _taskStatus = value;
            }
        }
        
        /// <summary>
        /// TaskStatus APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskStatusDef {
            get {
                return APDBDef.WorkTaskLog.TaskStatus;
            }
        }
        
        /// <summary>
        /// RateOfProgress
        /// </summary>
        [Display(Name="任务进度")]
        public virtual double RateOfProgress {
            get {
                return _rateOfProgress;
            }
            set {
                _rateOfProgress = value;
            }
        }
        
        /// <summary>
        /// RateOfProgress APColumnDef
        /// </summary>
        public static DoubleAPColumnDef RateOfProgressDef {
            get {
                return APDBDef.WorkTaskLog.RateOfProgress;
            }
        }
        
        /// <summary>
        /// ParentId
        /// </summary>
        [Display(Name="父任务ID")]
        public virtual System.Guid ParentId {
            get {
                return _parentId;
            }
            set {
                _parentId = value;
            }
        }
        
        /// <summary>
        /// ParentId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ParentIdDef {
            get {
                return APDBDef.WorkTaskLog.ParentId;
            }
        }
        
        /// <summary>
        /// WorkHours
        /// </summary>
        [Display(Name="已用工时")]
        public virtual double WorkHours {
            get {
                return _workHours;
            }
            set {
                _workHours = value;
            }
        }
        
        /// <summary>
        /// WorkHours APColumnDef
        /// </summary>
        public static DoubleAPColumnDef WorkHoursDef {
            get {
                return APDBDef.WorkTaskLog.WorkHours;
            }
        }
        
        /// <summary>
        /// ReviewerID
        /// </summary>
        [Display(Name="任务审核者ID")]
        public virtual System.Guid ReviewerID {
            get {
                return _reviewerID;
            }
            set {
                _reviewerID = value;
            }
        }
        
        /// <summary>
        /// ReviewerID APColumnDef
        /// </summary>
        public static GuidAPColumnDef ReviewerIDDef {
            get {
                return APDBDef.WorkTaskLog.ReviewerID;
            }
        }
        
        /// <summary>
        /// OperatorId
        /// </summary>
        [Display(Name="操作者ID")]
        public virtual System.Guid OperatorId {
            get {
                return _operatorId;
            }
            set {
                _operatorId = value;
            }
        }
        
        /// <summary>
        /// OperatorId APColumnDef
        /// </summary>
        public static GuidAPColumnDef OperatorIdDef {
            get {
                return APDBDef.WorkTaskLog.OperatorId;
            }
        }
        
        /// <summary>
        /// TaskName
        /// </summary>
        [Display(Name="任务名称")]
        [StringLength(100)]
        public virtual string TaskName {
            get {
                return _taskName;
            }
            set {
                _taskName = value;
            }
        }
        
        /// <summary>
        /// TaskName APColumnDef
        /// </summary>
        public static StringAPColumnDef TaskNameDef {
            get {
                return APDBDef.WorkTaskLog.TaskName;
            }
        }
        
        /// <summary>
        /// （该字段只为运维任务创建）
        /// </summary>
        [Display(Name="运维数量")]
        public virtual int ServiceCount {
            get {
                return _serviceCount;
            }
            set {
                _serviceCount = value;
            }
        }
        
        /// <summary>
        /// （该字段只为运维任务创建） APColumnDef
        /// </summary>
        public static Int32APColumnDef ServiceCountDef {
            get {
                return APDBDef.WorkTaskLog.ServiceCount;
            }
        }
        
        /// <summary>
        /// WorkTaskLogTableDef APTableDef
        /// </summary>
        public static APDBDef.WorkTaskLogTableDef TableDef {
            get {
                return APDBDef.WorkTaskLog;
            }
        }
        
        /// <summary>
        /// WorkTaskLogTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.WorkTaskLog.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(WorkTaskLog data) {
            LogID = data.LogID;
            TaskManagerId = data.TaskManagerId;
            ProjectId = data.ProjectId;
            TaskId = data.TaskId;
            StartDate = data.StartDate;
            EndDate = data.EndDate;
            CreateDate = data.CreateDate;
            EstimateWorkHours = data.EstimateWorkHours;
            TaskType = data.TaskType;
            TaskStatus = data.TaskStatus;
            RateOfProgress = data.RateOfProgress;
            ParentId = data.ParentId;
            WorkHours = data.WorkHours;
            ReviewerID = data.ReviewerID;
            OperatorId = data.OperatorId;
            TaskName = data.TaskName;
            ServiceCount = data.ServiceCount;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(WorkTaskLog data) {
            if ((LogID != data.LogID)) {
                return false;
            }
            if ((TaskManagerId != data.TaskManagerId)) {
                return false;
            }
            if ((ProjectId != data.ProjectId)) {
                return false;
            }
            if ((TaskId != data.TaskId)) {
                return false;
            }
            if ((StartDate != data.StartDate)) {
                return false;
            }
            if ((EndDate != data.EndDate)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((EstimateWorkHours != data.EstimateWorkHours)) {
                return false;
            }
            if ((TaskType != data.TaskType)) {
                return false;
            }
            if ((TaskStatus != data.TaskStatus)) {
                return false;
            }
            if ((RateOfProgress != data.RateOfProgress)) {
                return false;
            }
            if ((ParentId != data.ParentId)) {
                return false;
            }
            if ((WorkHours != data.WorkHours)) {
                return false;
            }
            if ((ReviewerID != data.ReviewerID)) {
                return false;
            }
            if ((OperatorId != data.OperatorId)) {
                return false;
            }
            if ((TaskName != data.TaskName)) {
                return false;
            }
            if ((ServiceCount != data.ServiceCount)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.WorkTaskLogBpl.Insert(((WorkTaskLog)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.WorkTaskLogBpl.Update(((WorkTaskLog)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid logID, Object metadata) {
            APBplDef.WorkTaskLogBpl.UpdatePartial(logID, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid logID) {
            APBplDef.WorkTaskLogBpl.PrimaryDelete(logID);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.WorkTaskLogBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.WorkTaskLogBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static WorkTaskLog PrimaryGet(System.Guid logID) {
            return APBplDef.WorkTaskLogBpl.PrimaryGet(logID);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WorkTaskLog> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.WorkTaskLogBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WorkTaskLog> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.WorkTaskLogBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WorkTaskLog> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.WorkTaskLogBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<WorkTaskLog> GetAll() {
            return APBplDef.WorkTaskLogBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 任务记录
    /// </summary>
    [Serializable()]
    public partial class WorkTaskLog : WorkTaskLogBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WorkTaskLog() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WorkTaskLog(
                    System.Guid logID, 
                    System.Guid taskManagerId, 
                    System.Guid projectId, 
                    System.Guid taskId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    System.DateTime createDate, 
                    double estimateWorkHours, 
                    System.Guid taskType, 
                    System.Guid taskStatus, 
                    double rateOfProgress, 
                    System.Guid parentId, 
                    double workHours, 
                    System.Guid reviewerID, 
                    System.Guid operatorId, 
                    string taskName, 
                    int serviceCount) : 
                base(logID, taskManagerId, projectId, taskId, startDate, endDate, createDate, estimateWorkHours, taskType, taskStatus, rateOfProgress, parentId, workHours, reviewerID, operatorId, taskName, serviceCount) {
        }
    }
    
    /// <summary>
    /// 任务复杂度 Base
    /// </summary>
    [Serializable()]
    public abstract partial class WorkTaskComplextiyBase {
        
        /// <summary>
        /// ComplextiyId
        /// </summary>
        private System.Guid _complextiyId;
        
        /// <summary>
        /// TaskId
        /// </summary>
        private System.Guid _taskId;
        
        /// <summary>
        /// Complexity
        /// </summary>
        private double _complexity;
        
        /// <summary>
        /// CreatorId
        /// </summary>
        private System.Guid _creatorId;
        
        /// <summary>
        /// CreatorRoleId
        /// </summary>
        private System.Guid _creatorRoleId;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate = DateTime.Now;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.DateTime _modifyDate;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WorkTaskComplextiyBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WorkTaskComplextiyBase(System.Guid complextiyId, System.Guid taskId, double complexity, System.Guid creatorId, System.Guid creatorRoleId, System.DateTime createDate, System.DateTime modifyDate) {
            _complextiyId = complextiyId;
            _taskId = taskId;
            _complexity = complexity;
            _creatorId = creatorId;
            _creatorRoleId = creatorRoleId;
            _createDate = createDate;
            _modifyDate = modifyDate;
        }
        
        /// <summary>
        /// ComplextiyId
        /// </summary>
        [Display(Name="任务复杂度ID")]
        public virtual System.Guid ComplextiyId {
            get {
                return _complextiyId;
            }
            set {
                _complextiyId = value;
            }
        }
        
        /// <summary>
        /// ComplextiyId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ComplextiyIdDef {
            get {
                return APDBDef.WorkTaskComplextiy.ComplextiyId;
            }
        }
        
        /// <summary>
        /// TaskId
        /// </summary>
        [Display(Name="任务ID")]
        public virtual System.Guid TaskId {
            get {
                return _taskId;
            }
            set {
                _taskId = value;
            }
        }
        
        /// <summary>
        /// TaskId APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskIdDef {
            get {
                return APDBDef.WorkTaskComplextiy.TaskId;
            }
        }
        
        /// <summary>
        /// Complexity
        /// </summary>
        [Display(Name="任务复杂度")]
        public virtual double Complexity {
            get {
                return _complexity;
            }
            set {
                _complexity = value;
            }
        }
        
        /// <summary>
        /// Complexity APColumnDef
        /// </summary>
        public static DoubleAPColumnDef ComplexityDef {
            get {
                return APDBDef.WorkTaskComplextiy.Complexity;
            }
        }
        
        /// <summary>
        /// CreatorId
        /// </summary>
        [Display(Name="复杂度设定者ID")]
        public virtual System.Guid CreatorId {
            get {
                return _creatorId;
            }
            set {
                _creatorId = value;
            }
        }
        
        /// <summary>
        /// CreatorId APColumnDef
        /// </summary>
        public static GuidAPColumnDef CreatorIdDef {
            get {
                return APDBDef.WorkTaskComplextiy.CreatorId;
            }
        }
        
        /// <summary>
        /// CreatorRoleId
        /// </summary>
        [Display(Name="复杂度设定者角色ID")]
        public virtual System.Guid CreatorRoleId {
            get {
                return _creatorRoleId;
            }
            set {
                _creatorRoleId = value;
            }
        }
        
        /// <summary>
        /// CreatorRoleId APColumnDef
        /// </summary>
        public static GuidAPColumnDef CreatorRoleIdDef {
            get {
                return APDBDef.WorkTaskComplextiy.CreatorRoleId;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.WorkTaskComplextiy.CreateDate;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="最近修改时间")]
        public virtual System.DateTime ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.WorkTaskComplextiy.ModifyDate;
            }
        }
        
        /// <summary>
        /// WorkTaskComplextiyTableDef APTableDef
        /// </summary>
        public static APDBDef.WorkTaskComplextiyTableDef TableDef {
            get {
                return APDBDef.WorkTaskComplextiy;
            }
        }
        
        /// <summary>
        /// WorkTaskComplextiyTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.WorkTaskComplextiy.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(WorkTaskComplextiy data) {
            ComplextiyId = data.ComplextiyId;
            TaskId = data.TaskId;
            Complexity = data.Complexity;
            CreatorId = data.CreatorId;
            CreatorRoleId = data.CreatorRoleId;
            CreateDate = data.CreateDate;
            ModifyDate = data.ModifyDate;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(WorkTaskComplextiy data) {
            if ((ComplextiyId != data.ComplextiyId)) {
                return false;
            }
            if ((TaskId != data.TaskId)) {
                return false;
            }
            if ((Complexity != data.Complexity)) {
                return false;
            }
            if ((CreatorId != data.CreatorId)) {
                return false;
            }
            if ((CreatorRoleId != data.CreatorRoleId)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.WorkTaskComplextiyBpl.Insert(((WorkTaskComplextiy)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.WorkTaskComplextiyBpl.Update(((WorkTaskComplextiy)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid complextiyId, Object metadata) {
            APBplDef.WorkTaskComplextiyBpl.UpdatePartial(complextiyId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid complextiyId) {
            APBplDef.WorkTaskComplextiyBpl.PrimaryDelete(complextiyId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.WorkTaskComplextiyBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.WorkTaskComplextiyBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static WorkTaskComplextiy PrimaryGet(System.Guid complextiyId) {
            return APBplDef.WorkTaskComplextiyBpl.PrimaryGet(complextiyId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WorkTaskComplextiy> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.WorkTaskComplextiyBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WorkTaskComplextiy> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.WorkTaskComplextiyBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WorkTaskComplextiy> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.WorkTaskComplextiyBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<WorkTaskComplextiy> GetAll() {
            return APBplDef.WorkTaskComplextiyBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 任务复杂度
    /// </summary>
    [Serializable()]
    public partial class WorkTaskComplextiy : WorkTaskComplextiyBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WorkTaskComplextiy() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WorkTaskComplextiy(System.Guid complextiyId, System.Guid taskId, double complexity, System.Guid creatorId, System.Guid creatorRoleId, System.DateTime createDate, System.DateTime modifyDate) : 
                base(complextiyId, taskId, complexity, creatorId, creatorRoleId, createDate, modifyDate) {
        }
    }
    
    /// <summary>
    /// 任务问题 Base
    /// </summary>
    [Serializable()]
    public abstract partial class WorkTaskIssueBase {
        
        /// <summary>
        /// TaskIssueId
        /// </summary>
        private System.Guid _taskIssueId;
        
        /// <summary>
        /// TaskId
        /// </summary>
        private System.Guid _taskId;
        
        /// <summary>
        /// IssueId
        /// </summary>
        private System.Guid _issueId;
        
        /// <summary>
        /// Description
        /// </summary>
        private string _description = string.Empty;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate = DateTime.Now;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.DateTime _modifyDate;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WorkTaskIssueBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WorkTaskIssueBase(System.Guid taskIssueId, System.Guid taskId, System.Guid issueId, string description, System.DateTime createDate, System.DateTime modifyDate) {
            _taskIssueId = taskIssueId;
            _taskId = taskId;
            _issueId = issueId;
            _description = description;
            _createDate = createDate;
            _modifyDate = modifyDate;
        }
        
        /// <summary>
        /// TaskIssueId
        /// </summary>
        [Display(Name="任务质量ID")]
        public virtual System.Guid TaskIssueId {
            get {
                return _taskIssueId;
            }
            set {
                _taskIssueId = value;
            }
        }
        
        /// <summary>
        /// TaskIssueId APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskIssueIdDef {
            get {
                return APDBDef.WorkTaskIssue.TaskIssueId;
            }
        }
        
        /// <summary>
        /// TaskId
        /// </summary>
        [Display(Name="任务ID")]
        public virtual System.Guid TaskId {
            get {
                return _taskId;
            }
            set {
                _taskId = value;
            }
        }
        
        /// <summary>
        /// TaskId APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskIdDef {
            get {
                return APDBDef.WorkTaskIssue.TaskId;
            }
        }
        
        /// <summary>
        /// IssueId
        /// </summary>
        [Display(Name="问题类型")]
        public virtual System.Guid IssueId {
            get {
                return _issueId;
            }
            set {
                _issueId = value;
            }
        }
        
        /// <summary>
        /// IssueId APColumnDef
        /// </summary>
        public static GuidAPColumnDef IssueIdDef {
            get {
                return APDBDef.WorkTaskIssue.IssueId;
            }
        }
        
        /// <summary>
        /// Description
        /// </summary>
        [Display(Name="任务质量描述")]
        [StringLength(1000)]
        public virtual string Description {
            get {
                return _description;
            }
            set {
                _description = value;
            }
        }
        
        /// <summary>
        /// Description APColumnDef
        /// </summary>
        public static StringAPColumnDef DescriptionDef {
            get {
                return APDBDef.WorkTaskIssue.Description;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.WorkTaskIssue.CreateDate;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="最近修改时间")]
        public virtual System.DateTime ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.WorkTaskIssue.ModifyDate;
            }
        }
        
        /// <summary>
        /// WorkTaskIssueTableDef APTableDef
        /// </summary>
        public static APDBDef.WorkTaskIssueTableDef TableDef {
            get {
                return APDBDef.WorkTaskIssue;
            }
        }
        
        /// <summary>
        /// WorkTaskIssueTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.WorkTaskIssue.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(WorkTaskIssue data) {
            TaskIssueId = data.TaskIssueId;
            TaskId = data.TaskId;
            IssueId = data.IssueId;
            Description = data.Description;
            CreateDate = data.CreateDate;
            ModifyDate = data.ModifyDate;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(WorkTaskIssue data) {
            if ((TaskIssueId != data.TaskIssueId)) {
                return false;
            }
            if ((TaskId != data.TaskId)) {
                return false;
            }
            if ((IssueId != data.IssueId)) {
                return false;
            }
            if ((Description != data.Description)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.WorkTaskIssueBpl.Insert(((WorkTaskIssue)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.WorkTaskIssueBpl.Update(((WorkTaskIssue)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid taskIssueId, Object metadata) {
            APBplDef.WorkTaskIssueBpl.UpdatePartial(taskIssueId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid taskIssueId) {
            APBplDef.WorkTaskIssueBpl.PrimaryDelete(taskIssueId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.WorkTaskIssueBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.WorkTaskIssueBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static WorkTaskIssue PrimaryGet(System.Guid taskIssueId) {
            return APBplDef.WorkTaskIssueBpl.PrimaryGet(taskIssueId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WorkTaskIssue> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.WorkTaskIssueBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WorkTaskIssue> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.WorkTaskIssueBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WorkTaskIssue> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.WorkTaskIssueBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<WorkTaskIssue> GetAll() {
            return APBplDef.WorkTaskIssueBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 任务问题
    /// </summary>
    [Serializable()]
    public partial class WorkTaskIssue : WorkTaskIssueBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WorkTaskIssue() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WorkTaskIssue(System.Guid taskIssueId, System.Guid taskId, System.Guid issueId, string description, System.DateTime createDate, System.DateTime modifyDate) : 
                base(taskIssueId, taskId, issueId, description, createDate, modifyDate) {
        }
    }
    
    /// <summary>
    /// 任务复杂度调整角色权重，(例如项目经理-调整某个复杂度为50%的占比，所有角色占比和为100%)，注意如果是标准复杂度，角色为空 Base
    /// </summary>
    [Serializable()]
    public abstract partial class TaskCompelxtiyRoleBase {
        
        /// <summary>
        /// CompelxtiyRoleId
        /// </summary>
        private System.Guid _compelxtiyRoleId;
        
        /// <summary>
        /// RoleId
        /// </summary>
        private System.Guid _roleId;
        
        /// <summary>
        /// Propertion
        /// </summary>
        private double _propertion;
        
        /// <summary>
        /// IsStandard
        /// </summary>
        private bool _isStandard;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public TaskCompelxtiyRoleBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public TaskCompelxtiyRoleBase(System.Guid compelxtiyRoleId, System.Guid roleId, double propertion, bool isStandard) {
            _compelxtiyRoleId = compelxtiyRoleId;
            _roleId = roleId;
            _propertion = propertion;
            _isStandard = isStandard;
        }
        
        /// <summary>
        /// CompelxtiyRoleId
        /// </summary>
        public virtual System.Guid CompelxtiyRoleId {
            get {
                return _compelxtiyRoleId;
            }
            set {
                _compelxtiyRoleId = value;
            }
        }
        
        /// <summary>
        /// CompelxtiyRoleId APColumnDef
        /// </summary>
        public static GuidAPColumnDef CompelxtiyRoleIdDef {
            get {
                return APDBDef.TaskCompelxtiyRole.CompelxtiyRoleId;
            }
        }
        
        /// <summary>
        /// RoleId
        /// </summary>
        public virtual System.Guid RoleId {
            get {
                return _roleId;
            }
            set {
                _roleId = value;
            }
        }
        
        /// <summary>
        /// RoleId APColumnDef
        /// </summary>
        public static GuidAPColumnDef RoleIdDef {
            get {
                return APDBDef.TaskCompelxtiyRole.RoleId;
            }
        }
        
        /// <summary>
        /// Propertion
        /// </summary>
        [Display(Name="复杂度权重")]
        public virtual double Propertion {
            get {
                return _propertion;
            }
            set {
                _propertion = value;
            }
        }
        
        /// <summary>
        /// Propertion APColumnDef
        /// </summary>
        public static DoubleAPColumnDef PropertionDef {
            get {
                return APDBDef.TaskCompelxtiyRole.Propertion;
            }
        }
        
        /// <summary>
        /// IsStandard
        /// </summary>
        [Display(Name="是否是标准复杂度")]
        public virtual bool IsStandard {
            get {
                return _isStandard;
            }
            set {
                _isStandard = value;
            }
        }
        
        /// <summary>
        /// IsStandard APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsStandardDef {
            get {
                return APDBDef.TaskCompelxtiyRole.IsStandard;
            }
        }
        
        /// <summary>
        /// TaskCompelxtiyRoleTableDef APTableDef
        /// </summary>
        public static APDBDef.TaskCompelxtiyRoleTableDef TableDef {
            get {
                return APDBDef.TaskCompelxtiyRole;
            }
        }
        
        /// <summary>
        /// TaskCompelxtiyRoleTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.TaskCompelxtiyRole.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(TaskCompelxtiyRole data) {
            CompelxtiyRoleId = data.CompelxtiyRoleId;
            RoleId = data.RoleId;
            Propertion = data.Propertion;
            IsStandard = data.IsStandard;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(TaskCompelxtiyRole data) {
            if ((CompelxtiyRoleId != data.CompelxtiyRoleId)) {
                return false;
            }
            if ((RoleId != data.RoleId)) {
                return false;
            }
            if ((Propertion != data.Propertion)) {
                return false;
            }
            if ((IsStandard != data.IsStandard)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.TaskCompelxtiyRoleBpl.Insert(((TaskCompelxtiyRole)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.TaskCompelxtiyRoleBpl.Update(((TaskCompelxtiyRole)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid compelxtiyRoleId, Object metadata) {
            APBplDef.TaskCompelxtiyRoleBpl.UpdatePartial(compelxtiyRoleId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid compelxtiyRoleId) {
            APBplDef.TaskCompelxtiyRoleBpl.PrimaryDelete(compelxtiyRoleId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.TaskCompelxtiyRoleBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.TaskCompelxtiyRoleBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static TaskCompelxtiyRole PrimaryGet(System.Guid compelxtiyRoleId) {
            return APBplDef.TaskCompelxtiyRoleBpl.PrimaryGet(compelxtiyRoleId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TaskCompelxtiyRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.TaskCompelxtiyRoleBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TaskCompelxtiyRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.TaskCompelxtiyRoleBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TaskCompelxtiyRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.TaskCompelxtiyRoleBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<TaskCompelxtiyRole> GetAll() {
            return APBplDef.TaskCompelxtiyRoleBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 任务复杂度调整角色权重，(例如项目经理-调整某个复杂度为50%的占比，所有角色占比和为100%)，注意如果是标准复杂度，角色为空
    /// </summary>
    [Serializable()]
    public partial class TaskCompelxtiyRole : TaskCompelxtiyRoleBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public TaskCompelxtiyRole() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public TaskCompelxtiyRole(System.Guid compelxtiyRoleId, System.Guid roleId, double propertion, bool isStandard) : 
                base(compelxtiyRoleId, roleId, propertion, isStandard) {
        }
    }
    
    /// <summary>
    /// 任务标准项（包含标准复杂度和标准工时） Base
    /// </summary>
    [Serializable()]
    public abstract partial class TaskStandardItemBase {
        
        /// <summary>
        /// ItemId
        /// </summary>
        private System.Guid _itemId;
        
        /// <summary>
        /// ItemName
        /// </summary>
        private string _itemName = string.Empty;
        
        /// <summary>
        /// ItemDescription
        /// </summary>
        private string _itemDescription = string.Empty;
        
        /// <summary>
        /// 标准复杂度
        /// </summary>
        private int _standardComplextiy;
        
        /// <summary>
        /// 标准工时
        /// </summary>
        private double _standardWorkhours;
        
        /// <summary>
        /// SortId
        /// </summary>
        private int _sortId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public TaskStandardItemBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public TaskStandardItemBase(System.Guid itemId, string itemName, string itemDescription, int standardComplextiy, double standardWorkhours, int sortId) {
            _itemId = itemId;
            _itemName = itemName;
            _itemDescription = itemDescription;
            _standardComplextiy = standardComplextiy;
            _standardWorkhours = standardWorkhours;
            _sortId = sortId;
        }
        
        /// <summary>
        /// ItemId
        /// </summary>
        [Display(Name="标准项ID")]
        public virtual System.Guid ItemId {
            get {
                return _itemId;
            }
            set {
                _itemId = value;
            }
        }
        
        /// <summary>
        /// ItemId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ItemIdDef {
            get {
                return APDBDef.TaskStandardItem.ItemId;
            }
        }
        
        /// <summary>
        /// ItemName
        /// </summary>
        [Display(Name="标准项名称")]
        [StringLength(100)]
        public virtual string ItemName {
            get {
                return _itemName;
            }
            set {
                _itemName = value;
            }
        }
        
        /// <summary>
        /// ItemName APColumnDef
        /// </summary>
        public static StringAPColumnDef ItemNameDef {
            get {
                return APDBDef.TaskStandardItem.ItemName;
            }
        }
        
        /// <summary>
        /// ItemDescription
        /// </summary>
        [Display(Name="标准项描述")]
        [StringLength(1000)]
        public virtual string ItemDescription {
            get {
                return _itemDescription;
            }
            set {
                _itemDescription = value;
            }
        }
        
        /// <summary>
        /// ItemDescription APColumnDef
        /// </summary>
        public static StringAPColumnDef ItemDescriptionDef {
            get {
                return APDBDef.TaskStandardItem.ItemDescription;
            }
        }
        
        /// <summary>
        /// 标准复杂度
        /// </summary>
        [Display(Name="标准复杂度")]
        public virtual int StandardComplextiy {
            get {
                return _standardComplextiy;
            }
            set {
                _standardComplextiy = value;
            }
        }
        
        /// <summary>
        /// 标准复杂度 APColumnDef
        /// </summary>
        public static Int32APColumnDef StandardComplextiyDef {
            get {
                return APDBDef.TaskStandardItem.StandardComplextiy;
            }
        }
        
        /// <summary>
        /// 标准工时
        /// </summary>
        [Display(Name="标准工时")]
        public virtual double StandardWorkhours {
            get {
                return _standardWorkhours;
            }
            set {
                _standardWorkhours = value;
            }
        }
        
        /// <summary>
        /// 标准工时 APColumnDef
        /// </summary>
        public static DoubleAPColumnDef StandardWorkhoursDef {
            get {
                return APDBDef.TaskStandardItem.StandardWorkhours;
            }
        }
        
        /// <summary>
        /// SortId
        /// </summary>
        [Display(Name="排序字段")]
        public virtual int SortId {
            get {
                return _sortId;
            }
            set {
                _sortId = value;
            }
        }
        
        /// <summary>
        /// SortId APColumnDef
        /// </summary>
        public static Int32APColumnDef SortIdDef {
            get {
                return APDBDef.TaskStandardItem.SortId;
            }
        }
        
        /// <summary>
        /// TaskStandardItemTableDef APTableDef
        /// </summary>
        public static APDBDef.TaskStandardItemTableDef TableDef {
            get {
                return APDBDef.TaskStandardItem;
            }
        }
        
        /// <summary>
        /// TaskStandardItemTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.TaskStandardItem.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(TaskStandardItem data) {
            ItemId = data.ItemId;
            ItemName = data.ItemName;
            ItemDescription = data.ItemDescription;
            StandardComplextiy = data.StandardComplextiy;
            StandardWorkhours = data.StandardWorkhours;
            SortId = data.SortId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(TaskStandardItem data) {
            if ((ItemId != data.ItemId)) {
                return false;
            }
            if ((ItemName != data.ItemName)) {
                return false;
            }
            if ((ItemDescription != data.ItemDescription)) {
                return false;
            }
            if ((StandardComplextiy != data.StandardComplextiy)) {
                return false;
            }
            if ((StandardWorkhours != data.StandardWorkhours)) {
                return false;
            }
            if ((SortId != data.SortId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.TaskStandardItemBpl.Insert(((TaskStandardItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.TaskStandardItemBpl.Update(((TaskStandardItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid itemId, Object metadata) {
            APBplDef.TaskStandardItemBpl.UpdatePartial(itemId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid itemId) {
            APBplDef.TaskStandardItemBpl.PrimaryDelete(itemId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.TaskStandardItemBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.TaskStandardItemBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static TaskStandardItem PrimaryGet(System.Guid itemId) {
            return APBplDef.TaskStandardItemBpl.PrimaryGet(itemId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TaskStandardItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.TaskStandardItemBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TaskStandardItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.TaskStandardItemBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TaskStandardItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.TaskStandardItemBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<TaskStandardItem> GetAll() {
            return APBplDef.TaskStandardItemBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 任务标准项（包含标准复杂度和标准工时）
    /// </summary>
    [Serializable()]
    public partial class TaskStandardItem : TaskStandardItemBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public TaskStandardItem() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public TaskStandardItem(System.Guid itemId, string itemName, string itemDescription, int standardComplextiy, double standardWorkhours, int sortId) : 
                base(itemId, itemName, itemDescription, standardComplextiy, standardWorkhours, sortId) {
        }
    }
    
    /// <summary>
    /// 问题项 Base
    /// </summary>
    [Serializable()]
    public abstract partial class IssueItemBase {
        
        /// <summary>
        /// ItemId
        /// </summary>
        private System.Guid _itemId;
        
        /// <summary>
        /// ItemName
        /// </summary>
        private string _itemName = string.Empty;
        
        /// <summary>
        /// Issuelevel
        /// </summary>
        private int _issuelevel = 0;
        
        /// <summary>
        /// IssueDescription
        /// </summary>
        private string _issueDescription = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public IssueItemBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public IssueItemBase(System.Guid itemId, string itemName, int issuelevel, string issueDescription) {
            _itemId = itemId;
            _itemName = itemName;
            _issuelevel = issuelevel;
            _issueDescription = issueDescription;
        }
        
        /// <summary>
        /// ItemId
        /// </summary>
        [Display(Name="问题项ID")]
        public virtual System.Guid ItemId {
            get {
                return _itemId;
            }
            set {
                _itemId = value;
            }
        }
        
        /// <summary>
        /// ItemId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ItemIdDef {
            get {
                return APDBDef.IssueItem.ItemId;
            }
        }
        
        /// <summary>
        /// ItemName
        /// </summary>
        [Display(Name="问题项名称")]
        [StringLength(100)]
        public virtual string ItemName {
            get {
                return _itemName;
            }
            set {
                _itemName = value;
            }
        }
        
        /// <summary>
        /// ItemName APColumnDef
        /// </summary>
        public static StringAPColumnDef ItemNameDef {
            get {
                return APDBDef.IssueItem.ItemName;
            }
        }
        
        /// <summary>
        /// Issuelevel
        /// </summary>
        [Display(Name="问题级别")]
        public virtual int Issuelevel {
            get {
                return _issuelevel;
            }
            set {
                _issuelevel = value;
            }
        }
        
        /// <summary>
        /// Issuelevel APColumnDef
        /// </summary>
        public static Int32APColumnDef IssuelevelDef {
            get {
                return APDBDef.IssueItem.Issuelevel;
            }
        }
        
        /// <summary>
        /// IssueDescription
        /// </summary>
        [Display(Name="问题项描述")]
        [StringLength(1000)]
        public virtual string IssueDescription {
            get {
                return _issueDescription;
            }
            set {
                _issueDescription = value;
            }
        }
        
        /// <summary>
        /// IssueDescription APColumnDef
        /// </summary>
        public static StringAPColumnDef IssueDescriptionDef {
            get {
                return APDBDef.IssueItem.IssueDescription;
            }
        }
        
        /// <summary>
        /// IssueItemTableDef APTableDef
        /// </summary>
        public static APDBDef.IssueItemTableDef TableDef {
            get {
                return APDBDef.IssueItem;
            }
        }
        
        /// <summary>
        /// IssueItemTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.IssueItem.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(IssueItem data) {
            ItemId = data.ItemId;
            ItemName = data.ItemName;
            Issuelevel = data.Issuelevel;
            IssueDescription = data.IssueDescription;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(IssueItem data) {
            if ((ItemId != data.ItemId)) {
                return false;
            }
            if ((ItemName != data.ItemName)) {
                return false;
            }
            if ((Issuelevel != data.Issuelevel)) {
                return false;
            }
            if ((IssueDescription != data.IssueDescription)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.IssueItemBpl.Insert(((IssueItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.IssueItemBpl.Update(((IssueItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid itemId, Object metadata) {
            APBplDef.IssueItemBpl.UpdatePartial(itemId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid itemId) {
            APBplDef.IssueItemBpl.PrimaryDelete(itemId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.IssueItemBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.IssueItemBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static IssueItem PrimaryGet(System.Guid itemId) {
            return APBplDef.IssueItemBpl.PrimaryGet(itemId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<IssueItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.IssueItemBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<IssueItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.IssueItemBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<IssueItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.IssueItemBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<IssueItem> GetAll() {
            return APBplDef.IssueItemBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 问题项
    /// </summary>
    [Serializable()]
    public partial class IssueItem : IssueItemBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public IssueItem() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public IssueItem(System.Guid itemId, string itemName, int issuelevel, string issueDescription) : 
                base(itemId, itemName, issuelevel, issueDescription) {
        }
    }
    
    /// <summary>
    /// 工作日志 Base
    /// </summary>
    [Serializable()]
    public abstract partial class WorkJournalBase {
        
        /// <summary>
        /// 工作日志ID
        /// </summary>
        private System.Guid _journalId;
        
        /// <summary>
        /// 人员ID
        /// </summary>
        private System.Guid _userId;
        
        /// <summary>
        /// 项目ID
        /// </summary>
        private System.Guid _projectid;
        
        /// <summary>
        /// 任务ID
        /// </summary>
        private System.Guid _taskId;
        
        /// <summary>
        /// Progress
        /// </summary>
        private double _progress = 0;
        
        /// <summary>
        /// WorkHours
        /// </summary>
        private double _workHours = 0;
        
        /// <summary>
        /// RecordDate
        /// </summary>
        private System.DateTime _recordDate;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.DateTime _modifyDate;
        
        /// <summary>
        /// Comment
        /// </summary>
        private string _comment;
        
        /// <summary>
        /// Status
        /// </summary>
        private System.Guid _status;
        
        /// <summary>
        /// AttachmentId
        /// </summary>
        private System.Guid _attachmentId;
        
        /// <summary>
        /// RecordType
        /// </summary>
        private System.Guid _recordType;
        
        /// <summary>
        /// TaskEstimateWorkHours
        /// </summary>
        private double _taskEstimateWorkHours;
        
        /// <summary>
        /// （该字段只为运维任务创建）
        /// </summary>
        private int _serviceCount;
        
        /// <summary>
        /// TaskType
        /// </summary>
        private System.Guid _taskType;
        
        /// <summary>
        /// TaskStatus
        /// </summary>
        private System.Guid _taskStatus;
        
        /// <summary>
        /// TaskSubType
        /// </summary>
        private System.Guid _taskSubType;
        
        /// <summary>
        /// TaskSubTypeValue
        /// </summary>
        private double _taskSubTypeValue;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WorkJournalBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WorkJournalBase(
                    System.Guid journalId, 
                    System.Guid userId, 
                    System.Guid projectid, 
                    System.Guid taskId, 
                    double progress, 
                    double workHours, 
                    System.DateTime recordDate, 
                    System.DateTime createDate, 
                    System.DateTime modifyDate, 
                    string comment, 
                    System.Guid status, 
                    System.Guid attachmentId, 
                    System.Guid recordType, 
                    double taskEstimateWorkHours, 
                    int serviceCount, 
                    System.Guid taskType, 
                    System.Guid taskStatus, 
                    System.Guid taskSubType, 
                    double taskSubTypeValue) {
            _journalId = journalId;
            _userId = userId;
            _projectid = projectid;
            _taskId = taskId;
            _progress = progress;
            _workHours = workHours;
            _recordDate = recordDate;
            _createDate = createDate;
            _modifyDate = modifyDate;
            _comment = comment;
            _status = status;
            _attachmentId = attachmentId;
            _recordType = recordType;
            _taskEstimateWorkHours = taskEstimateWorkHours;
            _serviceCount = serviceCount;
            _taskType = taskType;
            _taskStatus = taskStatus;
            _taskSubType = taskSubType;
            _taskSubTypeValue = taskSubTypeValue;
        }
        
        /// <summary>
        /// 工作日志ID
        /// </summary>
        public virtual System.Guid JournalId {
            get {
                return _journalId;
            }
            set {
                _journalId = value;
            }
        }
        
        /// <summary>
        /// 工作日志ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef JournalIdDef {
            get {
                return APDBDef.WorkJournal.JournalId;
            }
        }
        
        /// <summary>
        /// 人员ID
        /// </summary>
        public virtual System.Guid UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// 人员ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef UserIdDef {
            get {
                return APDBDef.WorkJournal.UserId;
            }
        }
        
        /// <summary>
        /// 项目ID
        /// </summary>
        public virtual System.Guid Projectid {
            get {
                return _projectid;
            }
            set {
                _projectid = value;
            }
        }
        
        /// <summary>
        /// 项目ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef ProjectidDef {
            get {
                return APDBDef.WorkJournal.Projectid;
            }
        }
        
        /// <summary>
        /// 任务ID
        /// </summary>
        [Required()]
        public virtual System.Guid TaskId {
            get {
                return _taskId;
            }
            set {
                _taskId = value;
            }
        }
        
        /// <summary>
        /// 任务ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskIdDef {
            get {
                return APDBDef.WorkJournal.TaskId;
            }
        }
        
        /// <summary>
        /// Progress
        /// </summary>
        [Display(Name="任务进度")]
        public virtual double Progress {
            get {
                return _progress;
            }
            set {
                _progress = value;
            }
        }
        
        /// <summary>
        /// Progress APColumnDef
        /// </summary>
        public static DoubleAPColumnDef ProgressDef {
            get {
                return APDBDef.WorkJournal.Progress;
            }
        }
        
        /// <summary>
        /// WorkHours
        /// </summary>
        [Display(Name="今日工时")]
        public virtual double WorkHours {
            get {
                return _workHours;
            }
            set {
                _workHours = value;
            }
        }
        
        /// <summary>
        /// WorkHours APColumnDef
        /// </summary>
        public static DoubleAPColumnDef WorkHoursDef {
            get {
                return APDBDef.WorkJournal.WorkHours;
            }
        }
        
        /// <summary>
        /// RecordDate
        /// </summary>
        [Display(Name="记录时间")]
        public virtual System.DateTime RecordDate {
            get {
                return _recordDate;
            }
            set {
                _recordDate = value;
            }
        }
        
        /// <summary>
        /// RecordDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef RecordDateDef {
            get {
                return APDBDef.WorkJournal.RecordDate;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.WorkJournal.CreateDate;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="最近修改时间")]
        public virtual System.DateTime ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.WorkJournal.ModifyDate;
            }
        }
        
        /// <summary>
        /// Comment
        /// </summary>
        [Display(Name="日志描述")]
        [StringLength(1000)]
        public virtual string Comment {
            get {
                return _comment;
            }
            set {
                _comment = value;
            }
        }
        
        /// <summary>
        /// Comment APColumnDef
        /// </summary>
        public static StringAPColumnDef CommentDef {
            get {
                return APDBDef.WorkJournal.Comment;
            }
        }
        
        /// <summary>
        /// Status
        /// </summary>
        [Display(Name="日志状态（已记录，未记录）")]
        public virtual System.Guid Status {
            get {
                return _status;
            }
            set {
                _status = value;
            }
        }
        
        /// <summary>
        /// Status APColumnDef
        /// </summary>
        public static GuidAPColumnDef StatusDef {
            get {
                return APDBDef.WorkJournal.Status;
            }
        }
        
        /// <summary>
        /// AttachmentId
        /// </summary>
        public virtual System.Guid AttachmentId {
            get {
                return _attachmentId;
            }
            set {
                _attachmentId = value;
            }
        }
        
        /// <summary>
        /// AttachmentId APColumnDef
        /// </summary>
        public static GuidAPColumnDef AttachmentIdDef {
            get {
                return APDBDef.WorkJournal.AttachmentId;
            }
        }
        
        /// <summary>
        /// RecordType
        /// </summary>
        [Display(Name="日志记录方式（自动，手动）")]
        public virtual System.Guid RecordType {
            get {
                return _recordType;
            }
            set {
                _recordType = value;
            }
        }
        
        /// <summary>
        /// RecordType APColumnDef
        /// </summary>
        public static GuidAPColumnDef RecordTypeDef {
            get {
                return APDBDef.WorkJournal.RecordType;
            }
        }
        
        /// <summary>
        /// TaskEstimateWorkHours
        /// </summary>
        [Display(Name="预估工时")]
        public virtual double TaskEstimateWorkHours {
            get {
                return _taskEstimateWorkHours;
            }
            set {
                _taskEstimateWorkHours = value;
            }
        }
        
        /// <summary>
        /// TaskEstimateWorkHours APColumnDef
        /// </summary>
        public static DoubleAPColumnDef TaskEstimateWorkHoursDef {
            get {
                return APDBDef.WorkJournal.TaskEstimateWorkHours;
            }
        }
        
        /// <summary>
        /// （该字段只为运维任务创建）
        /// </summary>
        [Display(Name="当日运维数量")]
        public virtual int ServiceCount {
            get {
                return _serviceCount;
            }
            set {
                _serviceCount = value;
            }
        }
        
        /// <summary>
        /// （该字段只为运维任务创建） APColumnDef
        /// </summary>
        public static Int32APColumnDef ServiceCountDef {
            get {
                return APDBDef.WorkJournal.ServiceCount;
            }
        }
        
        /// <summary>
        /// TaskType
        /// </summary>
        [Display(Name="任务类型")]
        public virtual System.Guid TaskType {
            get {
                return _taskType;
            }
            set {
                _taskType = value;
            }
        }
        
        /// <summary>
        /// TaskType APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskTypeDef {
            get {
                return APDBDef.WorkJournal.TaskType;
            }
        }
        
        /// <summary>
        /// TaskStatus
        /// </summary>
        [Display(Name="任务状态")]
        public virtual System.Guid TaskStatus {
            get {
                return _taskStatus;
            }
            set {
                _taskStatus = value;
            }
        }
        
        /// <summary>
        /// TaskStatus APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskStatusDef {
            get {
                return APDBDef.WorkJournal.TaskStatus;
            }
        }
        
        /// <summary>
        /// TaskSubType
        /// </summary>
        [Display(Name="子类型")]
        public virtual System.Guid TaskSubType {
            get {
                return _taskSubType;
            }
            set {
                _taskSubType = value;
            }
        }
        
        /// <summary>
        /// TaskSubType APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskSubTypeDef {
            get {
                return APDBDef.WorkJournal.TaskSubType;
            }
        }
        
        /// <summary>
        /// TaskSubTypeValue
        /// </summary>
        public virtual double TaskSubTypeValue {
            get {
                return _taskSubTypeValue;
            }
            set {
                _taskSubTypeValue = value;
            }
        }
        
        /// <summary>
        /// TaskSubTypeValue APColumnDef
        /// </summary>
        public static DoubleAPColumnDef TaskSubTypeValueDef {
            get {
                return APDBDef.WorkJournal.TaskSubTypeValue;
            }
        }
        
        /// <summary>
        /// WorkJournalTableDef APTableDef
        /// </summary>
        public static APDBDef.WorkJournalTableDef TableDef {
            get {
                return APDBDef.WorkJournal;
            }
        }
        
        /// <summary>
        /// WorkJournalTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.WorkJournal.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(WorkJournal data) {
            JournalId = data.JournalId;
            UserId = data.UserId;
            Projectid = data.Projectid;
            TaskId = data.TaskId;
            Progress = data.Progress;
            WorkHours = data.WorkHours;
            RecordDate = data.RecordDate;
            CreateDate = data.CreateDate;
            ModifyDate = data.ModifyDate;
            Comment = data.Comment;
            Status = data.Status;
            AttachmentId = data.AttachmentId;
            RecordType = data.RecordType;
            TaskEstimateWorkHours = data.TaskEstimateWorkHours;
            ServiceCount = data.ServiceCount;
            TaskType = data.TaskType;
            TaskStatus = data.TaskStatus;
            TaskSubType = data.TaskSubType;
            TaskSubTypeValue = data.TaskSubTypeValue;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(WorkJournal data) {
            if ((JournalId != data.JournalId)) {
                return false;
            }
            if ((UserId != data.UserId)) {
                return false;
            }
            if ((Projectid != data.Projectid)) {
                return false;
            }
            if ((TaskId != data.TaskId)) {
                return false;
            }
            if ((Progress != data.Progress)) {
                return false;
            }
            if ((WorkHours != data.WorkHours)) {
                return false;
            }
            if ((RecordDate != data.RecordDate)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            if ((Comment != data.Comment)) {
                return false;
            }
            if ((Status != data.Status)) {
                return false;
            }
            if ((AttachmentId != data.AttachmentId)) {
                return false;
            }
            if ((RecordType != data.RecordType)) {
                return false;
            }
            if ((TaskEstimateWorkHours != data.TaskEstimateWorkHours)) {
                return false;
            }
            if ((ServiceCount != data.ServiceCount)) {
                return false;
            }
            if ((TaskType != data.TaskType)) {
                return false;
            }
            if ((TaskStatus != data.TaskStatus)) {
                return false;
            }
            if ((TaskSubType != data.TaskSubType)) {
                return false;
            }
            if ((TaskSubTypeValue != data.TaskSubTypeValue)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.WorkJournalBpl.Insert(((WorkJournal)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.WorkJournalBpl.Update(((WorkJournal)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid journalId, Object metadata) {
            APBplDef.WorkJournalBpl.UpdatePartial(journalId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid journalId) {
            APBplDef.WorkJournalBpl.PrimaryDelete(journalId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.WorkJournalBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.WorkJournalBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static WorkJournal PrimaryGet(System.Guid journalId) {
            return APBplDef.WorkJournalBpl.PrimaryGet(journalId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WorkJournal> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.WorkJournalBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WorkJournal> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.WorkJournalBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WorkJournal> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.WorkJournalBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<WorkJournal> GetAll() {
            return APBplDef.WorkJournalBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 工作日志
    /// </summary>
    [Serializable()]
    public partial class WorkJournal : WorkJournalBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WorkJournal() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WorkJournal(
                    System.Guid journalId, 
                    System.Guid userId, 
                    System.Guid projectid, 
                    System.Guid taskId, 
                    double progress, 
                    double workHours, 
                    System.DateTime recordDate, 
                    System.DateTime createDate, 
                    System.DateTime modifyDate, 
                    string comment, 
                    System.Guid status, 
                    System.Guid attachmentId, 
                    System.Guid recordType, 
                    double taskEstimateWorkHours, 
                    int serviceCount, 
                    System.Guid taskType, 
                    System.Guid taskStatus, 
                    System.Guid taskSubType, 
                    double taskSubTypeValue) : 
                base(journalId, userId, projectid, taskId, progress, workHours, recordDate, createDate, modifyDate, comment, status, attachmentId, recordType, taskEstimateWorkHours, serviceCount, taskType, taskStatus, taskSubType, taskSubTypeValue) {
        }
    }
    
    /// <summary>
    /// 文件 Base
    /// </summary>
    [Serializable()]
    public abstract partial class AttachmentBase {
        
        /// <summary>
        /// 附件ID
        /// </summary>
        private System.Guid _attachmentId;
        
        /// <summary>
        /// 项目ID
        /// </summary>
        private System.Guid _projectid;
        
        /// <summary>
        /// 任务ID
        /// </summary>
        private System.Guid _taskId;
        
        /// <summary>
        /// 文件种类ID
        /// </summary>
        private System.Guid _categoryId;
        
        /// <summary>
        /// RealName
        /// </summary>
        private string _realName = string.Empty;
        
        /// <summary>
        /// Url
        /// </summary>
        private string _url = string.Empty;
        
        /// <summary>
        /// FileExtName
        /// </summary>
        private string _fileExtName = string.Empty;
        
        /// <summary>
        /// UploadDate
        /// </summary>
        private System.DateTime _uploadDate;
        
        /// <summary>
        /// PublishUserId
        /// </summary>
        private System.Guid _publishUserId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public AttachmentBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public AttachmentBase(System.Guid attachmentId, System.Guid projectid, System.Guid taskId, System.Guid categoryId, string realName, string url, string fileExtName, System.DateTime uploadDate, System.Guid publishUserId) {
            _attachmentId = attachmentId;
            _projectid = projectid;
            _taskId = taskId;
            _categoryId = categoryId;
            _realName = realName;
            _url = url;
            _fileExtName = fileExtName;
            _uploadDate = uploadDate;
            _publishUserId = publishUserId;
        }
        
        /// <summary>
        /// 附件ID
        /// </summary>
        public virtual System.Guid AttachmentId {
            get {
                return _attachmentId;
            }
            set {
                _attachmentId = value;
            }
        }
        
        /// <summary>
        /// 附件ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef AttachmentIdDef {
            get {
                return APDBDef.Attachment.AttachmentId;
            }
        }
        
        /// <summary>
        /// 项目ID
        /// </summary>
        public virtual System.Guid Projectid {
            get {
                return _projectid;
            }
            set {
                _projectid = value;
            }
        }
        
        /// <summary>
        /// 项目ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef ProjectidDef {
            get {
                return APDBDef.Attachment.Projectid;
            }
        }
        
        /// <summary>
        /// 任务ID
        /// </summary>
        [Required()]
        public virtual System.Guid TaskId {
            get {
                return _taskId;
            }
            set {
                _taskId = value;
            }
        }
        
        /// <summary>
        /// 任务ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskIdDef {
            get {
                return APDBDef.Attachment.TaskId;
            }
        }
        
        /// <summary>
        /// 文件种类ID
        /// </summary>
        [Required()]
        public virtual System.Guid CategoryId {
            get {
                return _categoryId;
            }
            set {
                _categoryId = value;
            }
        }
        
        /// <summary>
        /// 文件种类ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef CategoryIdDef {
            get {
                return APDBDef.Attachment.CategoryId;
            }
        }
        
        /// <summary>
        /// RealName
        /// </summary>
        [Display(Name="真实姓名")]
        [Required()]
        [StringLength(40)]
        public virtual string RealName {
            get {
                return _realName;
            }
            set {
                _realName = value;
            }
        }
        
        /// <summary>
        /// RealName APColumnDef
        /// </summary>
        public static StringAPColumnDef RealNameDef {
            get {
                return APDBDef.Attachment.RealName;
            }
        }
        
        /// <summary>
        /// Url
        /// </summary>
        [Display(Name="文件上传地址路径")]
        [StringLength(255)]
        public virtual string Url {
            get {
                return _url;
            }
            set {
                _url = value;
            }
        }
        
        /// <summary>
        /// Url APColumnDef
        /// </summary>
        public static StringAPColumnDef UrlDef {
            get {
                return APDBDef.Attachment.Url;
            }
        }
        
        /// <summary>
        /// FileExtName
        /// </summary>
        [Display(Name="附件后缀名")]
        [StringLength(10)]
        public virtual string FileExtName {
            get {
                return _fileExtName;
            }
            set {
                _fileExtName = value;
            }
        }
        
        /// <summary>
        /// FileExtName APColumnDef
        /// </summary>
        public static StringAPColumnDef FileExtNameDef {
            get {
                return APDBDef.Attachment.FileExtName;
            }
        }
        
        /// <summary>
        /// UploadDate
        /// </summary>
        [Display(Name="文件上传时间")]
        public virtual System.DateTime UploadDate {
            get {
                return _uploadDate;
            }
            set {
                _uploadDate = value;
            }
        }
        
        /// <summary>
        /// UploadDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef UploadDateDef {
            get {
                return APDBDef.Attachment.UploadDate;
            }
        }
        
        /// <summary>
        /// PublishUserId
        /// </summary>
        [Display(Name="上传者Id")]
        public virtual System.Guid PublishUserId {
            get {
                return _publishUserId;
            }
            set {
                _publishUserId = value;
            }
        }
        
        /// <summary>
        /// PublishUserId APColumnDef
        /// </summary>
        public static GuidAPColumnDef PublishUserIdDef {
            get {
                return APDBDef.Attachment.PublishUserId;
            }
        }
        
        /// <summary>
        /// AttachmentTableDef APTableDef
        /// </summary>
        public static APDBDef.AttachmentTableDef TableDef {
            get {
                return APDBDef.Attachment;
            }
        }
        
        /// <summary>
        /// AttachmentTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Attachment.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Attachment data) {
            AttachmentId = data.AttachmentId;
            Projectid = data.Projectid;
            TaskId = data.TaskId;
            CategoryId = data.CategoryId;
            RealName = data.RealName;
            Url = data.Url;
            FileExtName = data.FileExtName;
            UploadDate = data.UploadDate;
            PublishUserId = data.PublishUserId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Attachment data) {
            if ((AttachmentId != data.AttachmentId)) {
                return false;
            }
            if ((Projectid != data.Projectid)) {
                return false;
            }
            if ((TaskId != data.TaskId)) {
                return false;
            }
            if ((CategoryId != data.CategoryId)) {
                return false;
            }
            if ((RealName != data.RealName)) {
                return false;
            }
            if ((Url != data.Url)) {
                return false;
            }
            if ((FileExtName != data.FileExtName)) {
                return false;
            }
            if ((UploadDate != data.UploadDate)) {
                return false;
            }
            if ((PublishUserId != data.PublishUserId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.AttachmentBpl.Insert(((Attachment)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.AttachmentBpl.Update(((Attachment)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid attachmentId, Object metadata) {
            APBplDef.AttachmentBpl.UpdatePartial(attachmentId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid attachmentId) {
            APBplDef.AttachmentBpl.PrimaryDelete(attachmentId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.AttachmentBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.AttachmentBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Attachment PrimaryGet(System.Guid attachmentId) {
            return APBplDef.AttachmentBpl.PrimaryGet(attachmentId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Attachment> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.AttachmentBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Attachment> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.AttachmentBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Attachment> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.AttachmentBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Attachment> GetAll() {
            return APBplDef.AttachmentBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 文件
    /// </summary>
    [Serializable()]
    public partial class Attachment : AttachmentBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Attachment() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Attachment(System.Guid attachmentId, System.Guid projectid, System.Guid taskId, System.Guid categoryId, string realName, string url, string fileExtName, System.DateTime uploadDate, System.Guid publishUserId) : 
                base(attachmentId, projectid, taskId, categoryId, realName, url, fileExtName, uploadDate, publishUserId) {
        }
    }
    
    /// <summary>
    /// 字典 Base
    /// </summary>
    [Serializable()]
    public abstract partial class DictionaryBase {
        
        /// <summary>
        /// ID
        /// </summary>
        private System.Guid _iD;
        
        /// <summary>
        /// ParentID
        /// </summary>
        private System.Guid _parentID;
        
        /// <summary>
        /// Title
        /// </summary>
        private string _title;
        
        /// <summary>
        /// Code
        /// </summary>
        private string _code;
        
        /// <summary>
        /// Value
        /// </summary>
        private string _value;
        
        /// <summary>
        /// Note
        /// </summary>
        private string _note;
        
        /// <summary>
        /// Other
        /// </summary>
        private string _other;
        
        /// <summary>
        /// Sort
        /// </summary>
        private int _sort;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DictionaryBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DictionaryBase(System.Guid iD, System.Guid parentID, string title, string code, string value, string note, string other, int sort) {
            _iD = iD;
            _parentID = parentID;
            _title = title;
            _code = code;
            _value = value;
            _note = note;
            _other = other;
            _sort = sort;
        }
        
        /// <summary>
        /// ID
        /// </summary>
        public virtual System.Guid ID {
            get {
                return _iD;
            }
            set {
                _iD = value;
            }
        }
        
        /// <summary>
        /// ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef IDDef {
            get {
                return APDBDef.Dictionary.ID;
            }
        }
        
        /// <summary>
        /// ParentID
        /// </summary>
        public virtual System.Guid ParentID {
            get {
                return _parentID;
            }
            set {
                _parentID = value;
            }
        }
        
        /// <summary>
        /// ParentID APColumnDef
        /// </summary>
        public static GuidAPColumnDef ParentIDDef {
            get {
                return APDBDef.Dictionary.ParentID;
            }
        }
        
        /// <summary>
        /// Title
        /// </summary>
        [StringLength(100)]
        public virtual string Title {
            get {
                return _title;
            }
            set {
                _title = value;
            }
        }
        
        /// <summary>
        /// Title APColumnDef
        /// </summary>
        public static StringAPColumnDef TitleDef {
            get {
                return APDBDef.Dictionary.Title;
            }
        }
        
        /// <summary>
        /// Code
        /// </summary>
        [StringLength(100)]
        public virtual string Code {
            get {
                return _code;
            }
            set {
                _code = value;
            }
        }
        
        /// <summary>
        /// Code APColumnDef
        /// </summary>
        public static StringAPColumnDef CodeDef {
            get {
                return APDBDef.Dictionary.Code;
            }
        }
        
        /// <summary>
        /// Value
        /// </summary>
        [StringLength(100)]
        public virtual string Value {
            get {
                return _value;
            }
            set {
                _value = value;
            }
        }
        
        /// <summary>
        /// Value APColumnDef
        /// </summary>
        public static StringAPColumnDef ValueDef {
            get {
                return APDBDef.Dictionary.Value;
            }
        }
        
        /// <summary>
        /// Note
        /// </summary>
        [StringLength(100)]
        public virtual string Note {
            get {
                return _note;
            }
            set {
                _note = value;
            }
        }
        
        /// <summary>
        /// Note APColumnDef
        /// </summary>
        public static StringAPColumnDef NoteDef {
            get {
                return APDBDef.Dictionary.Note;
            }
        }
        
        /// <summary>
        /// Other
        /// </summary>
        [StringLength(100)]
        public virtual string Other {
            get {
                return _other;
            }
            set {
                _other = value;
            }
        }
        
        /// <summary>
        /// Other APColumnDef
        /// </summary>
        public static StringAPColumnDef OtherDef {
            get {
                return APDBDef.Dictionary.Other;
            }
        }
        
        /// <summary>
        /// Sort
        /// </summary>
        public virtual int Sort {
            get {
                return _sort;
            }
            set {
                _sort = value;
            }
        }
        
        /// <summary>
        /// Sort APColumnDef
        /// </summary>
        public static Int32APColumnDef SortDef {
            get {
                return APDBDef.Dictionary.Sort;
            }
        }
        
        /// <summary>
        /// DictionaryTableDef APTableDef
        /// </summary>
        public static APDBDef.DictionaryTableDef TableDef {
            get {
                return APDBDef.Dictionary;
            }
        }
        
        /// <summary>
        /// DictionaryTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Dictionary.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Dictionary data) {
            ID = data.ID;
            ParentID = data.ParentID;
            Title = data.Title;
            Code = data.Code;
            Value = data.Value;
            Note = data.Note;
            Other = data.Other;
            Sort = data.Sort;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Dictionary data) {
            if ((ID != data.ID)) {
                return false;
            }
            if ((ParentID != data.ParentID)) {
                return false;
            }
            if ((Title != data.Title)) {
                return false;
            }
            if ((Code != data.Code)) {
                return false;
            }
            if ((Value != data.Value)) {
                return false;
            }
            if ((Note != data.Note)) {
                return false;
            }
            if ((Other != data.Other)) {
                return false;
            }
            if ((Sort != data.Sort)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.DictionaryBpl.Insert(((Dictionary)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.DictionaryBpl.Update(((Dictionary)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid iD, Object metadata) {
            APBplDef.DictionaryBpl.UpdatePartial(iD, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid iD) {
            APBplDef.DictionaryBpl.PrimaryDelete(iD);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.DictionaryBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.DictionaryBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Dictionary PrimaryGet(System.Guid iD) {
            return APBplDef.DictionaryBpl.PrimaryGet(iD);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Dictionary> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.DictionaryBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Dictionary> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.DictionaryBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Dictionary> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.DictionaryBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Dictionary> GetAll() {
            return APBplDef.DictionaryBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 字典
    /// </summary>
    [Serializable()]
    public partial class Dictionary : DictionaryBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Dictionary() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Dictionary(System.Guid iD, System.Guid parentID, string title, string code, string value, string note, string other, int sort) : 
                base(iD, parentID, title, code, value, note, other, sort) {
        }
    }
    
    /// <summary>
    ///  Base
    /// </summary>
    [Serializable()]
    public abstract partial class ReviewBase {
        
        /// <summary>
        /// ReviewId
        /// </summary>
        private System.Guid _reviewId;
        
        /// <summary>
        /// SenderID
        /// </summary>
        private System.Guid _senderID;
        
        /// <summary>
        /// ReceiverID
        /// </summary>
        private System.Guid _receiverID;
        
        /// <summary>
        /// TaskId
        /// </summary>
        private System.Guid _taskId;
        
        /// <summary>
        /// ProjectId
        /// </summary>
        private System.Guid _projectId;
        
        /// <summary>
        /// ReviewType
        /// </summary>
        private System.Guid _reviewType;
        
        /// <summary>
        /// Result
        /// </summary>
        private System.Guid _result;
        
        /// <summary>
        /// SendDate
        /// </summary>
        private System.DateTime _sendDate = DateTime.Now;
        
        /// <summary>
        /// ReviewDate
        /// </summary>
        private System.DateTime _reviewDate = DateTime.Now;
        
        /// <summary>
        /// AttachmentUrl
        /// </summary>
        private string _attachmentUrl;
        
        /// <summary>
        /// Comment
        /// </summary>
        private string _comment = string.Empty;
        
        /// <summary>
        /// Title
        /// </summary>
        private string _title;
        
        /// <summary>
        /// ReviewComment
        /// </summary>
        private string _reviewComment;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ReviewBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ReviewBase(System.Guid reviewId, System.Guid senderID, System.Guid receiverID, System.Guid taskId, System.Guid projectId, System.Guid reviewType, System.Guid result, System.DateTime sendDate, System.DateTime reviewDate, string attachmentUrl, string comment, string title, string reviewComment) {
            _reviewId = reviewId;
            _senderID = senderID;
            _receiverID = receiverID;
            _taskId = taskId;
            _projectId = projectId;
            _reviewType = reviewType;
            _result = result;
            _sendDate = sendDate;
            _reviewDate = reviewDate;
            _attachmentUrl = attachmentUrl;
            _comment = comment;
            _title = title;
            _reviewComment = reviewComment;
        }
        
        /// <summary>
        /// ReviewId
        /// </summary>
        public virtual System.Guid ReviewId {
            get {
                return _reviewId;
            }
            set {
                _reviewId = value;
            }
        }
        
        /// <summary>
        /// ReviewId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ReviewIdDef {
            get {
                return APDBDef.Review.ReviewId;
            }
        }
        
        /// <summary>
        /// SenderID
        /// </summary>
        public virtual System.Guid SenderID {
            get {
                return _senderID;
            }
            set {
                _senderID = value;
            }
        }
        
        /// <summary>
        /// SenderID APColumnDef
        /// </summary>
        public static GuidAPColumnDef SenderIDDef {
            get {
                return APDBDef.Review.SenderID;
            }
        }
        
        /// <summary>
        /// ReceiverID
        /// </summary>
        public virtual System.Guid ReceiverID {
            get {
                return _receiverID;
            }
            set {
                _receiverID = value;
            }
        }
        
        /// <summary>
        /// ReceiverID APColumnDef
        /// </summary>
        public static GuidAPColumnDef ReceiverIDDef {
            get {
                return APDBDef.Review.ReceiverID;
            }
        }
        
        /// <summary>
        /// TaskId
        /// </summary>
        public virtual System.Guid TaskId {
            get {
                return _taskId;
            }
            set {
                _taskId = value;
            }
        }
        
        /// <summary>
        /// TaskId APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskIdDef {
            get {
                return APDBDef.Review.TaskId;
            }
        }
        
        /// <summary>
        /// ProjectId
        /// </summary>
        public virtual System.Guid ProjectId {
            get {
                return _projectId;
            }
            set {
                _projectId = value;
            }
        }
        
        /// <summary>
        /// ProjectId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ProjectIdDef {
            get {
                return APDBDef.Review.ProjectId;
            }
        }
        
        /// <summary>
        /// ReviewType
        /// </summary>
        public virtual System.Guid ReviewType {
            get {
                return _reviewType;
            }
            set {
                _reviewType = value;
            }
        }
        
        /// <summary>
        /// ReviewType APColumnDef
        /// </summary>
        public static GuidAPColumnDef ReviewTypeDef {
            get {
                return APDBDef.Review.ReviewType;
            }
        }
        
        /// <summary>
        /// Result
        /// </summary>
        public virtual System.Guid Result {
            get {
                return _result;
            }
            set {
                _result = value;
            }
        }
        
        /// <summary>
        /// Result APColumnDef
        /// </summary>
        public static GuidAPColumnDef ResultDef {
            get {
                return APDBDef.Review.Result;
            }
        }
        
        /// <summary>
        /// SendDate
        /// </summary>
        public virtual System.DateTime SendDate {
            get {
                return _sendDate;
            }
            set {
                _sendDate = value;
            }
        }
        
        /// <summary>
        /// SendDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef SendDateDef {
            get {
                return APDBDef.Review.SendDate;
            }
        }
        
        /// <summary>
        /// ReviewDate
        /// </summary>
        public virtual System.DateTime ReviewDate {
            get {
                return _reviewDate;
            }
            set {
                _reviewDate = value;
            }
        }
        
        /// <summary>
        /// ReviewDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ReviewDateDef {
            get {
                return APDBDef.Review.ReviewDate;
            }
        }
        
        /// <summary>
        /// AttachmentUrl
        /// </summary>
        [StringLength(1000)]
        public virtual string AttachmentUrl {
            get {
                return _attachmentUrl;
            }
            set {
                _attachmentUrl = value;
            }
        }
        
        /// <summary>
        /// AttachmentUrl APColumnDef
        /// </summary>
        public static StringAPColumnDef AttachmentUrlDef {
            get {
                return APDBDef.Review.AttachmentUrl;
            }
        }
        
        /// <summary>
        /// Comment
        /// </summary>
        [Display(Name="填写说明")]
        [StringLength(1000)]
        public virtual string Comment {
            get {
                return _comment;
            }
            set {
                _comment = value;
            }
        }
        
        /// <summary>
        /// Comment APColumnDef
        /// </summary>
        public static StringAPColumnDef CommentDef {
            get {
                return APDBDef.Review.Comment;
            }
        }
        
        /// <summary>
        /// Title
        /// </summary>
        [StringLength(50)]
        public virtual string Title {
            get {
                return _title;
            }
            set {
                _title = value;
            }
        }
        
        /// <summary>
        /// Title APColumnDef
        /// </summary>
        public static StringAPColumnDef TitleDef {
            get {
                return APDBDef.Review.Title;
            }
        }
        
        /// <summary>
        /// ReviewComment
        /// </summary>
        [Display(Name="审核意见")]
        [StringLength(1000)]
        public virtual string ReviewComment {
            get {
                return _reviewComment;
            }
            set {
                _reviewComment = value;
            }
        }
        
        /// <summary>
        /// ReviewComment APColumnDef
        /// </summary>
        public static StringAPColumnDef ReviewCommentDef {
            get {
                return APDBDef.Review.ReviewComment;
            }
        }
        
        /// <summary>
        /// ReviewTableDef APTableDef
        /// </summary>
        public static APDBDef.ReviewTableDef TableDef {
            get {
                return APDBDef.Review;
            }
        }
        
        /// <summary>
        /// ReviewTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Review.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Review data) {
            ReviewId = data.ReviewId;
            SenderID = data.SenderID;
            ReceiverID = data.ReceiverID;
            TaskId = data.TaskId;
            ProjectId = data.ProjectId;
            ReviewType = data.ReviewType;
            Result = data.Result;
            SendDate = data.SendDate;
            ReviewDate = data.ReviewDate;
            AttachmentUrl = data.AttachmentUrl;
            Comment = data.Comment;
            Title = data.Title;
            ReviewComment = data.ReviewComment;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Review data) {
            if ((ReviewId != data.ReviewId)) {
                return false;
            }
            if ((SenderID != data.SenderID)) {
                return false;
            }
            if ((ReceiverID != data.ReceiverID)) {
                return false;
            }
            if ((TaskId != data.TaskId)) {
                return false;
            }
            if ((ProjectId != data.ProjectId)) {
                return false;
            }
            if ((ReviewType != data.ReviewType)) {
                return false;
            }
            if ((Result != data.Result)) {
                return false;
            }
            if ((SendDate != data.SendDate)) {
                return false;
            }
            if ((ReviewDate != data.ReviewDate)) {
                return false;
            }
            if ((AttachmentUrl != data.AttachmentUrl)) {
                return false;
            }
            if ((Comment != data.Comment)) {
                return false;
            }
            if ((Title != data.Title)) {
                return false;
            }
            if ((ReviewComment != data.ReviewComment)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.ReviewBpl.Insert(((Review)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.ReviewBpl.Update(((Review)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid reviewId, Object metadata) {
            APBplDef.ReviewBpl.UpdatePartial(reviewId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid reviewId) {
            APBplDef.ReviewBpl.PrimaryDelete(reviewId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.ReviewBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.ReviewBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Review PrimaryGet(System.Guid reviewId) {
            return APBplDef.ReviewBpl.PrimaryGet(reviewId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Review> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.ReviewBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Review> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.ReviewBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Review> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.ReviewBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Review> GetAll() {
            return APBplDef.ReviewBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 
    /// </summary>
    [Serializable()]
    public partial class Review : ReviewBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Review() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Review(System.Guid reviewId, System.Guid senderID, System.Guid receiverID, System.Guid taskId, System.Guid projectId, System.Guid reviewType, System.Guid result, System.DateTime sendDate, System.DateTime reviewDate, string attachmentUrl, string comment, string title, string reviewComment) : 
                base(reviewId, senderID, receiverID, taskId, projectId, reviewType, result, sendDate, reviewDate, attachmentUrl, comment, title, reviewComment) {
        }
    }
    
    /// <summary>
    /// 流程任务（专属于第三方工作流） Base
    /// </summary>
    [Serializable()]
    public abstract partial class WorkflowTaskBase {
        
        /// <summary>
        /// TaskId
        /// </summary>
        private System.Guid _taskId;
        
        /// <summary>
        /// PrevID
        /// </summary>
        private System.Guid _prevID;
        
        /// <summary>
        /// PrevStepID
        /// </summary>
        private System.Guid _prevStepID;
        
        /// <summary>
        /// FlowId
        /// </summary>
        private System.Guid _flowId;
        
        /// <summary>
        /// StepID
        /// </summary>
        private System.Guid _stepID;
        
        /// <summary>
        /// StepName
        /// </summary>
        private string _stepName;
        
        /// <summary>
        /// SenderName
        /// </summary>
        private string _senderName;
        
        /// <summary>
        /// ReceiveName
        /// </summary>
        private string _receiveName;
        
        /// <summary>
        /// InstanceID
        /// </summary>
        private string _instanceID;
        
        /// <summary>
        /// GroupID
        /// </summary>
        private System.Guid _groupID;
        
        /// <summary>
        /// Type
        /// </summary>
        private int _type;
        
        /// <summary>
        /// Title
        /// </summary>
        private string _title;
        
        /// <summary>
        /// SenderID
        /// </summary>
        private System.Guid _senderID;
        
        /// <summary>
        /// ReceiveID
        /// </summary>
        private System.Guid _receiveID;
        
        /// <summary>
        /// SenderTime
        /// </summary>
        private System.DateTime _senderTime;
        
        /// <summary>
        /// ReceiveTime
        /// </summary>
        private System.DateTime _receiveTime;
        
        /// <summary>
        /// OpenTime
        /// </summary>
        private System.DateTime _openTime;
        
        /// <summary>
        /// CompletedTime
        /// </summary>
        private System.DateTime _completedTime;
        
        /// <summary>
        /// CompletedTime1
        /// </summary>
        private System.DateTime _completedTime1;
        
        /// <summary>
        /// Comment
        /// </summary>
        private string _comment;
        
        /// <summary>
        /// IsSign
        /// </summary>
        private int _isSign;
        
        /// <summary>
        /// Status
        /// </summary>
        private int _status;
        
        /// <summary>
        /// Note
        /// </summary>
        private string _note;
        
        /// <summary>
        /// Sort
        /// </summary>
        private int _sort;
        
        /// <summary>
        /// SubFlowGroupID
        /// </summary>
        private System.Guid _subFlowGroupID;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WorkflowTaskBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WorkflowTaskBase(
                    System.Guid taskId, 
                    System.Guid prevID, 
                    System.Guid prevStepID, 
                    System.Guid flowId, 
                    System.Guid stepID, 
                    string stepName, 
                    string senderName, 
                    string receiveName, 
                    string instanceID, 
                    System.Guid groupID, 
                    int type, 
                    string title, 
                    System.Guid senderID, 
                    System.Guid receiveID, 
                    System.DateTime senderTime, 
                    System.DateTime receiveTime, 
                    System.DateTime openTime, 
                    System.DateTime completedTime, 
                    System.DateTime completedTime1, 
                    string comment, 
                    int isSign, 
                    int status, 
                    string note, 
                    int sort, 
                    System.Guid subFlowGroupID) {
            _taskId = taskId;
            _prevID = prevID;
            _prevStepID = prevStepID;
            _flowId = flowId;
            _stepID = stepID;
            _stepName = stepName;
            _senderName = senderName;
            _receiveName = receiveName;
            _instanceID = instanceID;
            _groupID = groupID;
            _type = type;
            _title = title;
            _senderID = senderID;
            _receiveID = receiveID;
            _senderTime = senderTime;
            _receiveTime = receiveTime;
            _openTime = openTime;
            _completedTime = completedTime;
            _completedTime1 = completedTime1;
            _comment = comment;
            _isSign = isSign;
            _status = status;
            _note = note;
            _sort = sort;
            _subFlowGroupID = subFlowGroupID;
        }
        
        /// <summary>
        /// TaskId
        /// </summary>
        public virtual System.Guid TaskId {
            get {
                return _taskId;
            }
            set {
                _taskId = value;
            }
        }
        
        /// <summary>
        /// TaskId APColumnDef
        /// </summary>
        public static GuidAPColumnDef TaskIdDef {
            get {
                return APDBDef.WorkflowTask.TaskId;
            }
        }
        
        /// <summary>
        /// PrevID
        /// </summary>
        public virtual System.Guid PrevID {
            get {
                return _prevID;
            }
            set {
                _prevID = value;
            }
        }
        
        /// <summary>
        /// PrevID APColumnDef
        /// </summary>
        public static GuidAPColumnDef PrevIDDef {
            get {
                return APDBDef.WorkflowTask.PrevID;
            }
        }
        
        /// <summary>
        /// PrevStepID
        /// </summary>
        public virtual System.Guid PrevStepID {
            get {
                return _prevStepID;
            }
            set {
                _prevStepID = value;
            }
        }
        
        /// <summary>
        /// PrevStepID APColumnDef
        /// </summary>
        public static GuidAPColumnDef PrevStepIDDef {
            get {
                return APDBDef.WorkflowTask.PrevStepID;
            }
        }
        
        /// <summary>
        /// FlowId
        /// </summary>
        public virtual System.Guid FlowId {
            get {
                return _flowId;
            }
            set {
                _flowId = value;
            }
        }
        
        /// <summary>
        /// FlowId APColumnDef
        /// </summary>
        public static GuidAPColumnDef FlowIdDef {
            get {
                return APDBDef.WorkflowTask.FlowId;
            }
        }
        
        /// <summary>
        /// StepID
        /// </summary>
        public virtual System.Guid StepID {
            get {
                return _stepID;
            }
            set {
                _stepID = value;
            }
        }
        
        /// <summary>
        /// StepID APColumnDef
        /// </summary>
        public static GuidAPColumnDef StepIDDef {
            get {
                return APDBDef.WorkflowTask.StepID;
            }
        }
        
        /// <summary>
        /// StepName
        /// </summary>
        [StringLength(500)]
        public virtual string StepName {
            get {
                return _stepName;
            }
            set {
                _stepName = value;
            }
        }
        
        /// <summary>
        /// StepName APColumnDef
        /// </summary>
        public static StringAPColumnDef StepNameDef {
            get {
                return APDBDef.WorkflowTask.StepName;
            }
        }
        
        /// <summary>
        /// SenderName
        /// </summary>
        [StringLength(50)]
        public virtual string SenderName {
            get {
                return _senderName;
            }
            set {
                _senderName = value;
            }
        }
        
        /// <summary>
        /// SenderName APColumnDef
        /// </summary>
        public static StringAPColumnDef SenderNameDef {
            get {
                return APDBDef.WorkflowTask.SenderName;
            }
        }
        
        /// <summary>
        /// ReceiveName
        /// </summary>
        [StringLength(50)]
        public virtual string ReceiveName {
            get {
                return _receiveName;
            }
            set {
                _receiveName = value;
            }
        }
        
        /// <summary>
        /// ReceiveName APColumnDef
        /// </summary>
        public static StringAPColumnDef ReceiveNameDef {
            get {
                return APDBDef.WorkflowTask.ReceiveName;
            }
        }
        
        /// <summary>
        /// InstanceID
        /// </summary>
        [StringLength(50)]
        public virtual string InstanceID {
            get {
                return _instanceID;
            }
            set {
                _instanceID = value;
            }
        }
        
        /// <summary>
        /// InstanceID APColumnDef
        /// </summary>
        public static StringAPColumnDef InstanceIDDef {
            get {
                return APDBDef.WorkflowTask.InstanceID;
            }
        }
        
        /// <summary>
        /// GroupID
        /// </summary>
        public virtual System.Guid GroupID {
            get {
                return _groupID;
            }
            set {
                _groupID = value;
            }
        }
        
        /// <summary>
        /// GroupID APColumnDef
        /// </summary>
        public static GuidAPColumnDef GroupIDDef {
            get {
                return APDBDef.WorkflowTask.GroupID;
            }
        }
        
        /// <summary>
        /// Type
        /// </summary>
        public virtual int Type {
            get {
                return _type;
            }
            set {
                _type = value;
            }
        }
        
        /// <summary>
        /// Type APColumnDef
        /// </summary>
        public static Int32APColumnDef TypeDef {
            get {
                return APDBDef.WorkflowTask.Type;
            }
        }
        
        /// <summary>
        /// Title
        /// </summary>
        [StringLength(200)]
        public virtual string Title {
            get {
                return _title;
            }
            set {
                _title = value;
            }
        }
        
        /// <summary>
        /// Title APColumnDef
        /// </summary>
        public static StringAPColumnDef TitleDef {
            get {
                return APDBDef.WorkflowTask.Title;
            }
        }
        
        /// <summary>
        /// SenderID
        /// </summary>
        public virtual System.Guid SenderID {
            get {
                return _senderID;
            }
            set {
                _senderID = value;
            }
        }
        
        /// <summary>
        /// SenderID APColumnDef
        /// </summary>
        public static GuidAPColumnDef SenderIDDef {
            get {
                return APDBDef.WorkflowTask.SenderID;
            }
        }
        
        /// <summary>
        /// ReceiveID
        /// </summary>
        public virtual System.Guid ReceiveID {
            get {
                return _receiveID;
            }
            set {
                _receiveID = value;
            }
        }
        
        /// <summary>
        /// ReceiveID APColumnDef
        /// </summary>
        public static GuidAPColumnDef ReceiveIDDef {
            get {
                return APDBDef.WorkflowTask.ReceiveID;
            }
        }
        
        /// <summary>
        /// SenderTime
        /// </summary>
        public virtual System.DateTime SenderTime {
            get {
                return _senderTime;
            }
            set {
                _senderTime = value;
            }
        }
        
        /// <summary>
        /// SenderTime APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef SenderTimeDef {
            get {
                return APDBDef.WorkflowTask.SenderTime;
            }
        }
        
        /// <summary>
        /// ReceiveTime
        /// </summary>
        public virtual System.DateTime ReceiveTime {
            get {
                return _receiveTime;
            }
            set {
                _receiveTime = value;
            }
        }
        
        /// <summary>
        /// ReceiveTime APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ReceiveTimeDef {
            get {
                return APDBDef.WorkflowTask.ReceiveTime;
            }
        }
        
        /// <summary>
        /// OpenTime
        /// </summary>
        public virtual System.DateTime OpenTime {
            get {
                return _openTime;
            }
            set {
                _openTime = value;
            }
        }
        
        /// <summary>
        /// OpenTime APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef OpenTimeDef {
            get {
                return APDBDef.WorkflowTask.OpenTime;
            }
        }
        
        /// <summary>
        /// CompletedTime
        /// </summary>
        public virtual System.DateTime CompletedTime {
            get {
                return _completedTime;
            }
            set {
                _completedTime = value;
            }
        }
        
        /// <summary>
        /// CompletedTime APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CompletedTimeDef {
            get {
                return APDBDef.WorkflowTask.CompletedTime;
            }
        }
        
        /// <summary>
        /// CompletedTime1
        /// </summary>
        public virtual System.DateTime CompletedTime1 {
            get {
                return _completedTime1;
            }
            set {
                _completedTime1 = value;
            }
        }
        
        /// <summary>
        /// CompletedTime1 APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CompletedTime1Def {
            get {
                return APDBDef.WorkflowTask.CompletedTime1;
            }
        }
        
        /// <summary>
        /// Comment
        /// </summary>
        [StringLength(1000)]
        public virtual string Comment {
            get {
                return _comment;
            }
            set {
                _comment = value;
            }
        }
        
        /// <summary>
        /// Comment APColumnDef
        /// </summary>
        public static StringAPColumnDef CommentDef {
            get {
                return APDBDef.WorkflowTask.Comment;
            }
        }
        
        /// <summary>
        /// IsSign
        /// </summary>
        public virtual int IsSign {
            get {
                return _isSign;
            }
            set {
                _isSign = value;
            }
        }
        
        /// <summary>
        /// IsSign APColumnDef
        /// </summary>
        public static Int32APColumnDef IsSignDef {
            get {
                return APDBDef.WorkflowTask.IsSign;
            }
        }
        
        /// <summary>
        /// Status
        /// </summary>
        public virtual int Status {
            get {
                return _status;
            }
            set {
                _status = value;
            }
        }
        
        /// <summary>
        /// Status APColumnDef
        /// </summary>
        public static Int32APColumnDef StatusDef {
            get {
                return APDBDef.WorkflowTask.Status;
            }
        }
        
        /// <summary>
        /// Note
        /// </summary>
        [StringLength(1000)]
        public virtual string Note {
            get {
                return _note;
            }
            set {
                _note = value;
            }
        }
        
        /// <summary>
        /// Note APColumnDef
        /// </summary>
        public static StringAPColumnDef NoteDef {
            get {
                return APDBDef.WorkflowTask.Note;
            }
        }
        
        /// <summary>
        /// Sort
        /// </summary>
        public virtual int Sort {
            get {
                return _sort;
            }
            set {
                _sort = value;
            }
        }
        
        /// <summary>
        /// Sort APColumnDef
        /// </summary>
        public static Int32APColumnDef SortDef {
            get {
                return APDBDef.WorkflowTask.Sort;
            }
        }
        
        /// <summary>
        /// SubFlowGroupID
        /// </summary>
        public virtual System.Guid SubFlowGroupID {
            get {
                return _subFlowGroupID;
            }
            set {
                _subFlowGroupID = value;
            }
        }
        
        /// <summary>
        /// SubFlowGroupID APColumnDef
        /// </summary>
        public static GuidAPColumnDef SubFlowGroupIDDef {
            get {
                return APDBDef.WorkflowTask.SubFlowGroupID;
            }
        }
        
        /// <summary>
        /// WorkflowTaskTableDef APTableDef
        /// </summary>
        public static APDBDef.WorkflowTaskTableDef TableDef {
            get {
                return APDBDef.WorkflowTask;
            }
        }
        
        /// <summary>
        /// WorkflowTaskTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.WorkflowTask.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(WorkflowTask data) {
            TaskId = data.TaskId;
            PrevID = data.PrevID;
            PrevStepID = data.PrevStepID;
            FlowId = data.FlowId;
            StepID = data.StepID;
            StepName = data.StepName;
            SenderName = data.SenderName;
            ReceiveName = data.ReceiveName;
            InstanceID = data.InstanceID;
            GroupID = data.GroupID;
            Type = data.Type;
            Title = data.Title;
            SenderID = data.SenderID;
            ReceiveID = data.ReceiveID;
            SenderTime = data.SenderTime;
            ReceiveTime = data.ReceiveTime;
            OpenTime = data.OpenTime;
            CompletedTime = data.CompletedTime;
            CompletedTime1 = data.CompletedTime1;
            Comment = data.Comment;
            IsSign = data.IsSign;
            Status = data.Status;
            Note = data.Note;
            Sort = data.Sort;
            SubFlowGroupID = data.SubFlowGroupID;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(WorkflowTask data) {
            if ((TaskId != data.TaskId)) {
                return false;
            }
            if ((PrevID != data.PrevID)) {
                return false;
            }
            if ((PrevStepID != data.PrevStepID)) {
                return false;
            }
            if ((FlowId != data.FlowId)) {
                return false;
            }
            if ((StepID != data.StepID)) {
                return false;
            }
            if ((StepName != data.StepName)) {
                return false;
            }
            if ((SenderName != data.SenderName)) {
                return false;
            }
            if ((ReceiveName != data.ReceiveName)) {
                return false;
            }
            if ((InstanceID != data.InstanceID)) {
                return false;
            }
            if ((GroupID != data.GroupID)) {
                return false;
            }
            if ((Type != data.Type)) {
                return false;
            }
            if ((Title != data.Title)) {
                return false;
            }
            if ((SenderID != data.SenderID)) {
                return false;
            }
            if ((ReceiveID != data.ReceiveID)) {
                return false;
            }
            if ((SenderTime != data.SenderTime)) {
                return false;
            }
            if ((ReceiveTime != data.ReceiveTime)) {
                return false;
            }
            if ((OpenTime != data.OpenTime)) {
                return false;
            }
            if ((CompletedTime != data.CompletedTime)) {
                return false;
            }
            if ((CompletedTime1 != data.CompletedTime1)) {
                return false;
            }
            if ((Comment != data.Comment)) {
                return false;
            }
            if ((IsSign != data.IsSign)) {
                return false;
            }
            if ((Status != data.Status)) {
                return false;
            }
            if ((Note != data.Note)) {
                return false;
            }
            if ((Sort != data.Sort)) {
                return false;
            }
            if ((SubFlowGroupID != data.SubFlowGroupID)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.WorkflowTaskBpl.Insert(((WorkflowTask)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.WorkflowTaskBpl.Update(((WorkflowTask)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid taskId, Object metadata) {
            APBplDef.WorkflowTaskBpl.UpdatePartial(taskId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid taskId) {
            APBplDef.WorkflowTaskBpl.PrimaryDelete(taskId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.WorkflowTaskBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.WorkflowTaskBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static WorkflowTask PrimaryGet(System.Guid taskId) {
            return APBplDef.WorkflowTaskBpl.PrimaryGet(taskId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WorkflowTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.WorkflowTaskBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WorkflowTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.WorkflowTaskBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<WorkflowTask> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.WorkflowTaskBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<WorkflowTask> GetAll() {
            return APBplDef.WorkflowTaskBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 流程任务（专属于第三方工作流）
    /// </summary>
    [Serializable()]
    public partial class WorkflowTask : WorkflowTaskBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public WorkflowTask() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public WorkflowTask(
                    System.Guid taskId, 
                    System.Guid prevID, 
                    System.Guid prevStepID, 
                    System.Guid flowId, 
                    System.Guid stepID, 
                    string stepName, 
                    string senderName, 
                    string receiveName, 
                    string instanceID, 
                    System.Guid groupID, 
                    int type, 
                    string title, 
                    System.Guid senderID, 
                    System.Guid receiveID, 
                    System.DateTime senderTime, 
                    System.DateTime receiveTime, 
                    System.DateTime openTime, 
                    System.DateTime completedTime, 
                    System.DateTime completedTime1, 
                    string comment, 
                    int isSign, 
                    int status, 
                    string note, 
                    int sort, 
                    System.Guid subFlowGroupID) : 
                base(taskId, prevID, prevStepID, flowId, stepID, stepName, senderName, receiveName, instanceID, groupID, type, title, senderID, receiveID, senderTime, receiveTime, openTime, completedTime, completedTime1, comment, isSign, status, note, sort, subFlowGroupID) {
        }
    }
    
    /// <summary>
    /// 指标 Base
    /// </summary>
    [Serializable()]
    public abstract partial class IndicationBase {
        
        /// <summary>
        /// IndicationId
        /// </summary>
        private System.Guid _indicationId;
        
        /// <summary>
        /// IndicationName
        /// </summary>
        private string _indicationName = string.Empty;
        
        /// <summary>
        /// Description
        /// </summary>
        private string _description;
        
        /// <summary>
        /// CreaterId
        /// </summary>
        private System.Guid _createrId;
        
        /// <summary>
        /// IndicationType
        /// </summary>
        private System.Guid _indicationType;
        
        /// <summary>
        /// IndicationStatus
        /// </summary>
        private System.Guid _indicationStatus;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate = DateTime.Now;
        
        /// <summary>
        /// UseCount
        /// </summary>
        private int _useCount;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public IndicationBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public IndicationBase(System.Guid indicationId, string indicationName, string description, System.Guid createrId, System.Guid indicationType, System.Guid indicationStatus, System.DateTime createDate, int useCount) {
            _indicationId = indicationId;
            _indicationName = indicationName;
            _description = description;
            _createrId = createrId;
            _indicationType = indicationType;
            _indicationStatus = indicationStatus;
            _createDate = createDate;
            _useCount = useCount;
        }
        
        /// <summary>
        /// IndicationId
        /// </summary>
        public virtual System.Guid IndicationId {
            get {
                return _indicationId;
            }
            set {
                _indicationId = value;
            }
        }
        
        /// <summary>
        /// IndicationId APColumnDef
        /// </summary>
        public static GuidAPColumnDef IndicationIdDef {
            get {
                return APDBDef.Indication.IndicationId;
            }
        }
        
        /// <summary>
        /// IndicationName
        /// </summary>
        [Display(Name="指标名称")]
        [Required()]
        [StringLength(200)]
        public virtual string IndicationName {
            get {
                return _indicationName;
            }
            set {
                _indicationName = value;
            }
        }
        
        /// <summary>
        /// IndicationName APColumnDef
        /// </summary>
        public static StringAPColumnDef IndicationNameDef {
            get {
                return APDBDef.Indication.IndicationName;
            }
        }
        
        /// <summary>
        /// Description
        /// </summary>
        [Display(Name="指标描述")]
        [StringLength(1000)]
        public virtual string Description {
            get {
                return _description;
            }
            set {
                _description = value;
            }
        }
        
        /// <summary>
        /// Description APColumnDef
        /// </summary>
        public static StringAPColumnDef DescriptionDef {
            get {
                return APDBDef.Indication.Description;
            }
        }
        
        /// <summary>
        /// CreaterId
        /// </summary>
        public virtual System.Guid CreaterId {
            get {
                return _createrId;
            }
            set {
                _createrId = value;
            }
        }
        
        /// <summary>
        /// CreaterId APColumnDef
        /// </summary>
        public static GuidAPColumnDef CreaterIdDef {
            get {
                return APDBDef.Indication.CreaterId;
            }
        }
        
        /// <summary>
        /// IndicationType
        /// </summary>
        public virtual System.Guid IndicationType {
            get {
                return _indicationType;
            }
            set {
                _indicationType = value;
            }
        }
        
        /// <summary>
        /// IndicationType APColumnDef
        /// </summary>
        public static GuidAPColumnDef IndicationTypeDef {
            get {
                return APDBDef.Indication.IndicationType;
            }
        }
        
        /// <summary>
        /// IndicationStatus
        /// </summary>
        public virtual System.Guid IndicationStatus {
            get {
                return _indicationStatus;
            }
            set {
                _indicationStatus = value;
            }
        }
        
        /// <summary>
        /// IndicationStatus APColumnDef
        /// </summary>
        public static GuidAPColumnDef IndicationStatusDef {
            get {
                return APDBDef.Indication.IndicationStatus;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.Indication.CreateDate;
            }
        }
        
        /// <summary>
        /// UseCount
        /// </summary>
        [Display(Name="使用次数")]
        public virtual int UseCount {
            get {
                return _useCount;
            }
            set {
                _useCount = value;
            }
        }
        
        /// <summary>
        /// UseCount APColumnDef
        /// </summary>
        public static Int32APColumnDef UseCountDef {
            get {
                return APDBDef.Indication.UseCount;
            }
        }
        
        /// <summary>
        /// IndicationTableDef APTableDef
        /// </summary>
        public static APDBDef.IndicationTableDef TableDef {
            get {
                return APDBDef.Indication;
            }
        }
        
        /// <summary>
        /// IndicationTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Indication.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Indication data) {
            IndicationId = data.IndicationId;
            IndicationName = data.IndicationName;
            Description = data.Description;
            CreaterId = data.CreaterId;
            IndicationType = data.IndicationType;
            IndicationStatus = data.IndicationStatus;
            CreateDate = data.CreateDate;
            UseCount = data.UseCount;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Indication data) {
            if ((IndicationId != data.IndicationId)) {
                return false;
            }
            if ((IndicationName != data.IndicationName)) {
                return false;
            }
            if ((Description != data.Description)) {
                return false;
            }
            if ((CreaterId != data.CreaterId)) {
                return false;
            }
            if ((IndicationType != data.IndicationType)) {
                return false;
            }
            if ((IndicationStatus != data.IndicationStatus)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((UseCount != data.UseCount)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.IndicationBpl.Insert(((Indication)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.IndicationBpl.Update(((Indication)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid indicationId, Object metadata) {
            APBplDef.IndicationBpl.UpdatePartial(indicationId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid indicationId) {
            APBplDef.IndicationBpl.PrimaryDelete(indicationId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.IndicationBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.IndicationBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Indication PrimaryGet(System.Guid indicationId) {
            return APBplDef.IndicationBpl.PrimaryGet(indicationId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Indication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.IndicationBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Indication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.IndicationBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Indication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.IndicationBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Indication> GetAll() {
            return APBplDef.IndicationBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 指标
    /// </summary>
    [Serializable()]
    public partial class Indication : IndicationBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Indication() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Indication(System.Guid indicationId, string indicationName, string description, System.Guid createrId, System.Guid indicationType, System.Guid indicationStatus, System.DateTime createDate, int useCount) : 
                base(indicationId, indicationName, description, createrId, indicationType, indicationStatus, createDate, useCount) {
        }
    }
    
    /// <summary>
    /// 考核表-指标-关联 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalIndicationBase {
        
        /// <summary>
        /// Id
        /// </summary>
        private System.Guid _id;
        
        /// <summary>
        /// IndicationId
        /// </summary>
        private System.Guid _indicationId;
        
        /// <summary>
        /// TableId
        /// </summary>
        private System.Guid _tableId;
        
        /// <summary>
        /// FullScore
        /// </summary>
        private double _fullScore;
        
        /// <summary>
        /// EvalType
        /// </summary>
        private System.Guid _evalType;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalIndicationBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalIndicationBase(System.Guid id, System.Guid indicationId, System.Guid tableId, double fullScore, System.Guid evalType) {
            _id = id;
            _indicationId = indicationId;
            _tableId = tableId;
            _fullScore = fullScore;
            _evalType = evalType;
        }
        
        /// <summary>
        /// Id
        /// </summary>
        public virtual System.Guid Id {
            get {
                return _id;
            }
            set {
                _id = value;
            }
        }
        
        /// <summary>
        /// Id APColumnDef
        /// </summary>
        public static GuidAPColumnDef IdDef {
            get {
                return APDBDef.EvalIndication.Id;
            }
        }
        
        /// <summary>
        /// IndicationId
        /// </summary>
        public virtual System.Guid IndicationId {
            get {
                return _indicationId;
            }
            set {
                _indicationId = value;
            }
        }
        
        /// <summary>
        /// IndicationId APColumnDef
        /// </summary>
        public static GuidAPColumnDef IndicationIdDef {
            get {
                return APDBDef.EvalIndication.IndicationId;
            }
        }
        
        /// <summary>
        /// TableId
        /// </summary>
        public virtual System.Guid TableId {
            get {
                return _tableId;
            }
            set {
                _tableId = value;
            }
        }
        
        /// <summary>
        /// TableId APColumnDef
        /// </summary>
        public static GuidAPColumnDef TableIdDef {
            get {
                return APDBDef.EvalIndication.TableId;
            }
        }
        
        /// <summary>
        /// FullScore
        /// </summary>
        [Display(Name="指标满分")]
        public virtual double FullScore {
            get {
                return _fullScore;
            }
            set {
                _fullScore = value;
            }
        }
        
        /// <summary>
        /// FullScore APColumnDef
        /// </summary>
        public static DoubleAPColumnDef FullScoreDef {
            get {
                return APDBDef.EvalIndication.FullScore;
            }
        }
        
        /// <summary>
        /// EvalType
        /// </summary>
        [Display(Name="考核类型")]
        public virtual System.Guid EvalType {
            get {
                return _evalType;
            }
            set {
                _evalType = value;
            }
        }
        
        /// <summary>
        /// EvalType APColumnDef
        /// </summary>
        public static GuidAPColumnDef EvalTypeDef {
            get {
                return APDBDef.EvalIndication.EvalType;
            }
        }
        
        /// <summary>
        /// EvalIndicationTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalIndicationTableDef TableDef {
            get {
                return APDBDef.EvalIndication;
            }
        }
        
        /// <summary>
        /// EvalIndicationTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalIndication.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalIndication data) {
            Id = data.Id;
            IndicationId = data.IndicationId;
            TableId = data.TableId;
            FullScore = data.FullScore;
            EvalType = data.EvalType;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalIndication data) {
            if ((Id != data.Id)) {
                return false;
            }
            if ((IndicationId != data.IndicationId)) {
                return false;
            }
            if ((TableId != data.TableId)) {
                return false;
            }
            if ((FullScore != data.FullScore)) {
                return false;
            }
            if ((EvalType != data.EvalType)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalIndicationBpl.Insert(((EvalIndication)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalIndicationBpl.Update(((EvalIndication)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid id, Object metadata) {
            APBplDef.EvalIndicationBpl.UpdatePartial(id, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid id) {
            APBplDef.EvalIndicationBpl.PrimaryDelete(id);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalIndicationBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalIndicationBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalIndication PrimaryGet(System.Guid id) {
            return APBplDef.EvalIndicationBpl.PrimaryGet(id);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalIndication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalIndicationBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalIndication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalIndicationBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalIndication> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalIndicationBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalIndication> GetAll() {
            return APBplDef.EvalIndicationBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 考核表-指标-关联
    /// </summary>
    [Serializable()]
    public partial class EvalIndication : EvalIndicationBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalIndication() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalIndication(System.Guid id, System.Guid indicationId, System.Guid tableId, double fullScore, System.Guid evalType) : 
                base(id, indicationId, tableId, fullScore, evalType) {
        }
    }
    
    /// <summary>
    /// 考核-指标-指标项 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalIndicationItemBase {
        
        /// <summary>
        /// ItemId
        /// </summary>
        private System.Guid _itemId;
        
        /// <summary>
        /// EvalIndicationId
        /// </summary>
        private System.Guid _evalIndicationId;
        
        /// <summary>
        /// ItemName
        /// </summary>
        private string _itemName = string.Empty;
        
        /// <summary>
        /// ItemScore
        /// </summary>
        private double _itemScore;
        
        /// <summary>
        /// ItemValue
        /// </summary>
        private string _itemValue = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalIndicationItemBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalIndicationItemBase(System.Guid itemId, System.Guid evalIndicationId, string itemName, double itemScore, string itemValue) {
            _itemId = itemId;
            _evalIndicationId = evalIndicationId;
            _itemName = itemName;
            _itemScore = itemScore;
            _itemValue = itemValue;
        }
        
        /// <summary>
        /// ItemId
        /// </summary>
        public virtual System.Guid ItemId {
            get {
                return _itemId;
            }
            set {
                _itemId = value;
            }
        }
        
        /// <summary>
        /// ItemId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ItemIdDef {
            get {
                return APDBDef.EvalIndicationItem.ItemId;
            }
        }
        
        /// <summary>
        /// EvalIndicationId
        /// </summary>
        public virtual System.Guid EvalIndicationId {
            get {
                return _evalIndicationId;
            }
            set {
                _evalIndicationId = value;
            }
        }
        
        /// <summary>
        /// EvalIndicationId APColumnDef
        /// </summary>
        public static GuidAPColumnDef EvalIndicationIdDef {
            get {
                return APDBDef.EvalIndicationItem.EvalIndicationId;
            }
        }
        
        /// <summary>
        /// ItemName
        /// </summary>
        [Display(Name="指标项名称")]
        [Required()]
        [StringLength(200)]
        public virtual string ItemName {
            get {
                return _itemName;
            }
            set {
                _itemName = value;
            }
        }
        
        /// <summary>
        /// ItemName APColumnDef
        /// </summary>
        public static StringAPColumnDef ItemNameDef {
            get {
                return APDBDef.EvalIndicationItem.ItemName;
            }
        }
        
        /// <summary>
        /// ItemScore
        /// </summary>
        [Display(Name="指标项分数")]
        public virtual double ItemScore {
            get {
                return _itemScore;
            }
            set {
                _itemScore = value;
            }
        }
        
        /// <summary>
        /// ItemScore APColumnDef
        /// </summary>
        public static DoubleAPColumnDef ItemScoreDef {
            get {
                return APDBDef.EvalIndicationItem.ItemScore;
            }
        }
        
        /// <summary>
        /// ItemValue
        /// </summary>
        [Display(Name="指标项值")]
        [Required()]
        [StringLength(200)]
        public virtual string ItemValue {
            get {
                return _itemValue;
            }
            set {
                _itemValue = value;
            }
        }
        
        /// <summary>
        /// ItemValue APColumnDef
        /// </summary>
        public static StringAPColumnDef ItemValueDef {
            get {
                return APDBDef.EvalIndicationItem.ItemValue;
            }
        }
        
        /// <summary>
        /// EvalIndicationItemTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalIndicationItemTableDef TableDef {
            get {
                return APDBDef.EvalIndicationItem;
            }
        }
        
        /// <summary>
        /// EvalIndicationItemTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalIndicationItem.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalIndicationItem data) {
            ItemId = data.ItemId;
            EvalIndicationId = data.EvalIndicationId;
            ItemName = data.ItemName;
            ItemScore = data.ItemScore;
            ItemValue = data.ItemValue;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalIndicationItem data) {
            if ((ItemId != data.ItemId)) {
                return false;
            }
            if ((EvalIndicationId != data.EvalIndicationId)) {
                return false;
            }
            if ((ItemName != data.ItemName)) {
                return false;
            }
            if ((ItemScore != data.ItemScore)) {
                return false;
            }
            if ((ItemValue != data.ItemValue)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalIndicationItemBpl.Insert(((EvalIndicationItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalIndicationItemBpl.Update(((EvalIndicationItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid itemId, Object metadata) {
            APBplDef.EvalIndicationItemBpl.UpdatePartial(itemId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid itemId) {
            APBplDef.EvalIndicationItemBpl.PrimaryDelete(itemId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalIndicationItemBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalIndicationItemBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalIndicationItem PrimaryGet(System.Guid itemId) {
            return APBplDef.EvalIndicationItemBpl.PrimaryGet(itemId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalIndicationItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalIndicationItemBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalIndicationItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalIndicationItemBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalIndicationItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalIndicationItemBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalIndicationItem> GetAll() {
            return APBplDef.EvalIndicationItemBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 考核-指标-指标项
    /// </summary>
    [Serializable()]
    public partial class EvalIndicationItem : EvalIndicationItemBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalIndicationItem() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalIndicationItem(System.Guid itemId, System.Guid evalIndicationId, string itemName, double itemScore, string itemValue) : 
                base(itemId, evalIndicationId, itemName, itemScore, itemValue) {
        }
    }
    
    /// <summary>
    /// 考核表 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalTableBase {
        
        /// <summary>
        /// TableId
        /// </summary>
        private System.Guid _tableId;
        
        /// <summary>
        /// TableName
        /// </summary>
        private string _tableName = string.Empty;
        
        /// <summary>
        /// 需要手动改成nvarcharMax
        /// </summary>
        private string _description;
        
        /// <summary>
        /// TableType
        /// </summary>
        private System.Guid _tableType;
        
        /// <summary>
        /// TableStatus
        /// </summary>
        private System.Guid _tableStatus;
        
        /// <summary>
        /// FullScore
        /// </summary>
        private double _fullScore;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate = DateTime.Now;
        
        /// <summary>
        /// CreaterId
        /// </summary>
        private System.Guid _createrId;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.DateTime _modifyDate;
        
        /// <summary>
        /// ModifierId
        /// </summary>
        private System.Guid _modifierId;
        
        /// <summary>
        /// UseCount
        /// </summary>
        private System.Guid _useCount;
        
        /// <summary>
        /// 用于状态还原
        /// </summary>
        private System.Guid _perviouslyTableStatus;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalTableBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalTableBase(System.Guid tableId, string tableName, string description, System.Guid tableType, System.Guid tableStatus, double fullScore, System.DateTime createDate, System.Guid createrId, System.DateTime modifyDate, System.Guid modifierId, System.Guid useCount, System.Guid perviouslyTableStatus) {
            _tableId = tableId;
            _tableName = tableName;
            _description = description;
            _tableType = tableType;
            _tableStatus = tableStatus;
            _fullScore = fullScore;
            _createDate = createDate;
            _createrId = createrId;
            _modifyDate = modifyDate;
            _modifierId = modifierId;
            _useCount = useCount;
            _perviouslyTableStatus = perviouslyTableStatus;
        }
        
        /// <summary>
        /// TableId
        /// </summary>
        public virtual System.Guid TableId {
            get {
                return _tableId;
            }
            set {
                _tableId = value;
            }
        }
        
        /// <summary>
        /// TableId APColumnDef
        /// </summary>
        public static GuidAPColumnDef TableIdDef {
            get {
                return APDBDef.EvalTable.TableId;
            }
        }
        
        /// <summary>
        /// TableName
        /// </summary>
        [Display(Name="考核表名称")]
        [Required()]
        [StringLength(200)]
        public virtual string TableName {
            get {
                return _tableName;
            }
            set {
                _tableName = value;
            }
        }
        
        /// <summary>
        /// TableName APColumnDef
        /// </summary>
        public static StringAPColumnDef TableNameDef {
            get {
                return APDBDef.EvalTable.TableName;
            }
        }
        
        /// <summary>
        /// 需要手动改成nvarcharMax
        /// </summary>
        [Display(Name="描述")]
        [StringLength(1000)]
        public virtual string Description {
            get {
                return _description;
            }
            set {
                _description = value;
            }
        }
        
        /// <summary>
        /// 需要手动改成nvarcharMax APColumnDef
        /// </summary>
        public static StringAPColumnDef DescriptionDef {
            get {
                return APDBDef.EvalTable.Description;
            }
        }
        
        /// <summary>
        /// TableType
        /// </summary>
        [Display(Name="考核表类型")]
        public virtual System.Guid TableType {
            get {
                return _tableType;
            }
            set {
                _tableType = value;
            }
        }
        
        /// <summary>
        /// TableType APColumnDef
        /// </summary>
        public static GuidAPColumnDef TableTypeDef {
            get {
                return APDBDef.EvalTable.TableType;
            }
        }
        
        /// <summary>
        /// TableStatus
        /// </summary>
        [Display(Name="考核表状态")]
        public virtual System.Guid TableStatus {
            get {
                return _tableStatus;
            }
            set {
                _tableStatus = value;
            }
        }
        
        /// <summary>
        /// TableStatus APColumnDef
        /// </summary>
        public static GuidAPColumnDef TableStatusDef {
            get {
                return APDBDef.EvalTable.TableStatus;
            }
        }
        
        /// <summary>
        /// FullScore
        /// </summary>
        [Display(Name="考核表总分")]
        public virtual double FullScore {
            get {
                return _fullScore;
            }
            set {
                _fullScore = value;
            }
        }
        
        /// <summary>
        /// FullScore APColumnDef
        /// </summary>
        public static DoubleAPColumnDef FullScoreDef {
            get {
                return APDBDef.EvalTable.FullScore;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.EvalTable.CreateDate;
            }
        }
        
        /// <summary>
        /// CreaterId
        /// </summary>
        [Display(Name="创建人")]
        public virtual System.Guid CreaterId {
            get {
                return _createrId;
            }
            set {
                _createrId = value;
            }
        }
        
        /// <summary>
        /// CreaterId APColumnDef
        /// </summary>
        public static GuidAPColumnDef CreaterIdDef {
            get {
                return APDBDef.EvalTable.CreaterId;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="最近修改时间")]
        public virtual System.DateTime ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.EvalTable.ModifyDate;
            }
        }
        
        /// <summary>
        /// ModifierId
        /// </summary>
        [Display(Name="修改人")]
        public virtual System.Guid ModifierId {
            get {
                return _modifierId;
            }
            set {
                _modifierId = value;
            }
        }
        
        /// <summary>
        /// ModifierId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ModifierIdDef {
            get {
                return APDBDef.EvalTable.ModifierId;
            }
        }
        
        /// <summary>
        /// UseCount
        /// </summary>
        [Display(Name="使用次数")]
        public virtual System.Guid UseCount {
            get {
                return _useCount;
            }
            set {
                _useCount = value;
            }
        }
        
        /// <summary>
        /// UseCount APColumnDef
        /// </summary>
        public static GuidAPColumnDef UseCountDef {
            get {
                return APDBDef.EvalTable.UseCount;
            }
        }
        
        /// <summary>
        /// 用于状态还原
        /// </summary>
        [Display(Name="考核表先前状态")]
        public virtual System.Guid PerviouslyTableStatus {
            get {
                return _perviouslyTableStatus;
            }
            set {
                _perviouslyTableStatus = value;
            }
        }
        
        /// <summary>
        /// 用于状态还原 APColumnDef
        /// </summary>
        public static GuidAPColumnDef PerviouslyTableStatusDef {
            get {
                return APDBDef.EvalTable.PerviouslyTableStatus;
            }
        }
        
        /// <summary>
        /// EvalTableTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalTableTableDef TableDef {
            get {
                return APDBDef.EvalTable;
            }
        }
        
        /// <summary>
        /// EvalTableTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalTable.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalTable data) {
            TableId = data.TableId;
            TableName = data.TableName;
            Description = data.Description;
            TableType = data.TableType;
            TableStatus = data.TableStatus;
            FullScore = data.FullScore;
            CreateDate = data.CreateDate;
            CreaterId = data.CreaterId;
            ModifyDate = data.ModifyDate;
            ModifierId = data.ModifierId;
            UseCount = data.UseCount;
            PerviouslyTableStatus = data.PerviouslyTableStatus;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalTable data) {
            if ((TableId != data.TableId)) {
                return false;
            }
            if ((TableName != data.TableName)) {
                return false;
            }
            if ((Description != data.Description)) {
                return false;
            }
            if ((TableType != data.TableType)) {
                return false;
            }
            if ((TableStatus != data.TableStatus)) {
                return false;
            }
            if ((FullScore != data.FullScore)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((CreaterId != data.CreaterId)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            if ((ModifierId != data.ModifierId)) {
                return false;
            }
            if ((UseCount != data.UseCount)) {
                return false;
            }
            if ((PerviouslyTableStatus != data.PerviouslyTableStatus)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalTableBpl.Insert(((EvalTable)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalTableBpl.Update(((EvalTable)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid tableId, Object metadata) {
            APBplDef.EvalTableBpl.UpdatePartial(tableId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid tableId) {
            APBplDef.EvalTableBpl.PrimaryDelete(tableId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalTableBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalTableBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalTable PrimaryGet(System.Guid tableId) {
            return APBplDef.EvalTableBpl.PrimaryGet(tableId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalTable> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalTableBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalTable> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalTableBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalTable> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalTableBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalTable> GetAll() {
            return APBplDef.EvalTableBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 考核表
    /// </summary>
    [Serializable()]
    public partial class EvalTable : EvalTableBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalTable() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalTable(System.Guid tableId, string tableName, string description, System.Guid tableType, System.Guid tableStatus, double fullScore, System.DateTime createDate, System.Guid createrId, System.DateTime modifyDate, System.Guid modifierId, System.Guid useCount, System.Guid perviouslyTableStatus) : 
                base(tableId, tableName, description, tableType, tableStatus, fullScore, createDate, createrId, modifyDate, modifierId, useCount, perviouslyTableStatus) {
        }
    }
    
    /// <summary>
    /// 评价-周期 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalPeriodBase {
        
        /// <summary>
        /// PeriodId
        /// </summary>
        private System.Guid _periodId;
        
        /// <summary>
        /// Name
        /// </summary>
        private string _name = string.Empty;
        
        /// <summary>
        /// BeginDate
        /// </summary>
        private System.DateTime _beginDate;
        
        /// <summary>
        /// EndDate
        /// </summary>
        private System.DateTime _endDate;
        
        /// <summary>
        /// AccessBeginDate
        /// </summary>
        private System.DateTime _accessBeginDate;
        
        /// <summary>
        /// AccessEndDate
        /// </summary>
        private System.DateTime _accessEndDate;
        
        /// <summary>
        /// AnalysisName
        /// </summary>
        private string _analysisName = string.Empty;
        
        /// <summary>
        /// AnalysisType
        /// </summary>
        private string _analysisType = string.Empty;
        
        /// <summary>
        /// IsCurrent
        /// </summary>
        private bool _isCurrent;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate = DateTime.Now;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalPeriodBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalPeriodBase(System.Guid periodId, string name, System.DateTime beginDate, System.DateTime endDate, System.DateTime accessBeginDate, System.DateTime accessEndDate, string analysisName, string analysisType, bool isCurrent, System.DateTime createDate) {
            _periodId = periodId;
            _name = name;
            _beginDate = beginDate;
            _endDate = endDate;
            _accessBeginDate = accessBeginDate;
            _accessEndDate = accessEndDate;
            _analysisName = analysisName;
            _analysisType = analysisType;
            _isCurrent = isCurrent;
            _createDate = createDate;
        }
        
        /// <summary>
        /// PeriodId
        /// </summary>
        [Display(Name="周期ID")]
        public virtual System.Guid PeriodId {
            get {
                return _periodId;
            }
            set {
                _periodId = value;
            }
        }
        
        /// <summary>
        /// PeriodId APColumnDef
        /// </summary>
        public static GuidAPColumnDef PeriodIdDef {
            get {
                return APDBDef.EvalPeriod.PeriodId;
            }
        }
        
        /// <summary>
        /// Name
        /// </summary>
        [Display(Name="周期名称")]
        [StringLength(100)]
        public virtual string Name {
            get {
                return _name;
            }
            set {
                _name = value;
            }
        }
        
        /// <summary>
        /// Name APColumnDef
        /// </summary>
        public static StringAPColumnDef NameDef {
            get {
                return APDBDef.EvalPeriod.Name;
            }
        }
        
        /// <summary>
        /// BeginDate
        /// </summary>
        [Display(Name="开始时间（考核区间）")]
        public virtual System.DateTime BeginDate {
            get {
                return _beginDate;
            }
            set {
                _beginDate = value;
            }
        }
        
        /// <summary>
        /// BeginDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef BeginDateDef {
            get {
                return APDBDef.EvalPeriod.BeginDate;
            }
        }
        
        /// <summary>
        /// EndDate
        /// </summary>
        [Display(Name="结束时间（考核区间）")]
        public virtual System.DateTime EndDate {
            get {
                return _endDate;
            }
            set {
                _endDate = value;
            }
        }
        
        /// <summary>
        /// EndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef EndDateDef {
            get {
                return APDBDef.EvalPeriod.EndDate;
            }
        }
        
        /// <summary>
        /// AccessBeginDate
        /// </summary>
        [Display(Name="开始时间（操作区间）")]
        public virtual System.DateTime AccessBeginDate {
            get {
                return _accessBeginDate;
            }
            set {
                _accessBeginDate = value;
            }
        }
        
        /// <summary>
        /// AccessBeginDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef AccessBeginDateDef {
            get {
                return APDBDef.EvalPeriod.AccessBeginDate;
            }
        }
        
        /// <summary>
        /// AccessEndDate
        /// </summary>
        [Display(Name="结束时间（操作区间）")]
        public virtual System.DateTime AccessEndDate {
            get {
                return _accessEndDate;
            }
            set {
                _accessEndDate = value;
            }
        }
        
        /// <summary>
        /// AccessEndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef AccessEndDateDef {
            get {
                return APDBDef.EvalPeriod.AccessEndDate;
            }
        }
        
        /// <summary>
        /// AnalysisName
        /// </summary>
        [Display(Name="算法模型名称")]
        [StringLength(100)]
        public virtual string AnalysisName {
            get {
                return _analysisName;
            }
            set {
                _analysisName = value;
            }
        }
        
        /// <summary>
        /// AnalysisName APColumnDef
        /// </summary>
        public static StringAPColumnDef AnalysisNameDef {
            get {
                return APDBDef.EvalPeriod.AnalysisName;
            }
        }
        
        /// <summary>
        /// AnalysisType
        /// </summary>
        [Display(Name="算法模型类型")]
        [StringLength(100)]
        public virtual string AnalysisType {
            get {
                return _analysisType;
            }
            set {
                _analysisType = value;
            }
        }
        
        /// <summary>
        /// AnalysisType APColumnDef
        /// </summary>
        public static StringAPColumnDef AnalysisTypeDef {
            get {
                return APDBDef.EvalPeriod.AnalysisType;
            }
        }
        
        /// <summary>
        /// IsCurrent
        /// </summary>
        [Display(Name="是否当前考核期")]
        public virtual bool IsCurrent {
            get {
                return _isCurrent;
            }
            set {
                _isCurrent = value;
            }
        }
        
        /// <summary>
        /// IsCurrent APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsCurrentDef {
            get {
                return APDBDef.EvalPeriod.IsCurrent;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.EvalPeriod.CreateDate;
            }
        }
        
        /// <summary>
        /// EvalPeriodTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalPeriodTableDef TableDef {
            get {
                return APDBDef.EvalPeriod;
            }
        }
        
        /// <summary>
        /// EvalPeriodTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalPeriod.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalPeriod data) {
            PeriodId = data.PeriodId;
            Name = data.Name;
            BeginDate = data.BeginDate;
            EndDate = data.EndDate;
            AccessBeginDate = data.AccessBeginDate;
            AccessEndDate = data.AccessEndDate;
            AnalysisName = data.AnalysisName;
            AnalysisType = data.AnalysisType;
            IsCurrent = data.IsCurrent;
            CreateDate = data.CreateDate;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalPeriod data) {
            if ((PeriodId != data.PeriodId)) {
                return false;
            }
            if ((Name != data.Name)) {
                return false;
            }
            if ((BeginDate != data.BeginDate)) {
                return false;
            }
            if ((EndDate != data.EndDate)) {
                return false;
            }
            if ((AccessBeginDate != data.AccessBeginDate)) {
                return false;
            }
            if ((AccessEndDate != data.AccessEndDate)) {
                return false;
            }
            if ((AnalysisName != data.AnalysisName)) {
                return false;
            }
            if ((AnalysisType != data.AnalysisType)) {
                return false;
            }
            if ((IsCurrent != data.IsCurrent)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalPeriodBpl.Insert(((EvalPeriod)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalPeriodBpl.Update(((EvalPeriod)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid periodId, Object metadata) {
            APBplDef.EvalPeriodBpl.UpdatePartial(periodId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid periodId) {
            APBplDef.EvalPeriodBpl.PrimaryDelete(periodId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalPeriodBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalPeriodBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalPeriod PrimaryGet(System.Guid periodId) {
            return APBplDef.EvalPeriodBpl.PrimaryGet(periodId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalPeriodBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalPeriodBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalPeriodBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalPeriod> GetAll() {
            return APBplDef.EvalPeriodBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 评价-周期
    /// </summary>
    [Serializable()]
    public partial class EvalPeriod : EvalPeriodBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalPeriod() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalPeriod(System.Guid periodId, string name, System.DateTime beginDate, System.DateTime endDate, System.DateTime accessBeginDate, System.DateTime accessEndDate, string analysisName, string analysisType, bool isCurrent, System.DateTime createDate) : 
                base(periodId, name, beginDate, endDate, accessBeginDate, accessEndDate, analysisName, analysisType, isCurrent, createDate) {
        }
    }
    
    /// <summary>
    /// 考核表-比重 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalTargetTablePropertionBase {
        
        /// <summary>
        /// PropertionID
        /// </summary>
        private System.Guid _propertionID;
        
        /// <summary>
        /// TableId
        /// </summary>
        private System.Guid _tableId;
        
        /// <summary>
        /// 评审对象ID
        /// </summary>
        private System.Guid _targetId;
        
        /// <summary>
        /// Propertion
        /// </summary>
        private double _propertion;
        
        /// <summary>
        /// PeriodId
        /// </summary>
        private System.Guid _periodId;
        
        /// <summary>
        /// 考核组ID
        /// </summary>
        private System.Guid _groupId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalTargetTablePropertionBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalTargetTablePropertionBase(System.Guid propertionID, System.Guid tableId, System.Guid targetId, double propertion, System.Guid periodId, System.Guid groupId) {
            _propertionID = propertionID;
            _tableId = tableId;
            _targetId = targetId;
            _propertion = propertion;
            _periodId = periodId;
            _groupId = groupId;
        }
        
        /// <summary>
        /// PropertionID
        /// </summary>
        public virtual System.Guid PropertionID {
            get {
                return _propertionID;
            }
            set {
                _propertionID = value;
            }
        }
        
        /// <summary>
        /// PropertionID APColumnDef
        /// </summary>
        public static GuidAPColumnDef PropertionIDDef {
            get {
                return APDBDef.EvalTargetTablePropertion.PropertionID;
            }
        }
        
        /// <summary>
        /// TableId
        /// </summary>
        public virtual System.Guid TableId {
            get {
                return _tableId;
            }
            set {
                _tableId = value;
            }
        }
        
        /// <summary>
        /// TableId APColumnDef
        /// </summary>
        public static GuidAPColumnDef TableIdDef {
            get {
                return APDBDef.EvalTargetTablePropertion.TableId;
            }
        }
        
        /// <summary>
        /// 评审对象ID
        /// </summary>
        public virtual System.Guid TargetId {
            get {
                return _targetId;
            }
            set {
                _targetId = value;
            }
        }
        
        /// <summary>
        /// 评审对象ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef TargetIdDef {
            get {
                return APDBDef.EvalTargetTablePropertion.TargetId;
            }
        }
        
        /// <summary>
        /// Propertion
        /// </summary>
        [Display(Name="分值权重")]
        public virtual double Propertion {
            get {
                return _propertion;
            }
            set {
                _propertion = value;
            }
        }
        
        /// <summary>
        /// Propertion APColumnDef
        /// </summary>
        public static DoubleAPColumnDef PropertionDef {
            get {
                return APDBDef.EvalTargetTablePropertion.Propertion;
            }
        }
        
        /// <summary>
        /// PeriodId
        /// </summary>
        [Display(Name="周期ID")]
        public virtual System.Guid PeriodId {
            get {
                return _periodId;
            }
            set {
                _periodId = value;
            }
        }
        
        /// <summary>
        /// PeriodId APColumnDef
        /// </summary>
        public static GuidAPColumnDef PeriodIdDef {
            get {
                return APDBDef.EvalTargetTablePropertion.PeriodId;
            }
        }
        
        /// <summary>
        /// 考核组ID
        /// </summary>
        [Display(Name="考核组ID")]
        public virtual System.Guid GroupId {
            get {
                return _groupId;
            }
            set {
                _groupId = value;
            }
        }
        
        /// <summary>
        /// 考核组ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef GroupIdDef {
            get {
                return APDBDef.EvalTargetTablePropertion.GroupId;
            }
        }
        
        /// <summary>
        /// EvalTargetTablePropertionTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalTargetTablePropertionTableDef TableDef {
            get {
                return APDBDef.EvalTargetTablePropertion;
            }
        }
        
        /// <summary>
        /// EvalTargetTablePropertionTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalTargetTablePropertion.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalTargetTablePropertion data) {
            PropertionID = data.PropertionID;
            TableId = data.TableId;
            TargetId = data.TargetId;
            Propertion = data.Propertion;
            PeriodId = data.PeriodId;
            GroupId = data.GroupId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalTargetTablePropertion data) {
            if ((PropertionID != data.PropertionID)) {
                return false;
            }
            if ((TableId != data.TableId)) {
                return false;
            }
            if ((TargetId != data.TargetId)) {
                return false;
            }
            if ((Propertion != data.Propertion)) {
                return false;
            }
            if ((PeriodId != data.PeriodId)) {
                return false;
            }
            if ((GroupId != data.GroupId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalTargetTablePropertionBpl.Insert(((EvalTargetTablePropertion)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalTargetTablePropertionBpl.Update(((EvalTargetTablePropertion)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid propertionID, Object metadata) {
            APBplDef.EvalTargetTablePropertionBpl.UpdatePartial(propertionID, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid propertionID) {
            APBplDef.EvalTargetTablePropertionBpl.PrimaryDelete(propertionID);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalTargetTablePropertionBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalTargetTablePropertionBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalTargetTablePropertion PrimaryGet(System.Guid propertionID) {
            return APBplDef.EvalTargetTablePropertionBpl.PrimaryGet(propertionID);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalTargetTablePropertion> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalTargetTablePropertionBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalTargetTablePropertion> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalTargetTablePropertionBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalTargetTablePropertion> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalTargetTablePropertionBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalTargetTablePropertion> GetAll() {
            return APBplDef.EvalTargetTablePropertionBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 考核表-比重
    /// </summary>
    [Serializable()]
    public partial class EvalTargetTablePropertion : EvalTargetTablePropertionBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalTargetTablePropertion() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalTargetTablePropertion(System.Guid propertionID, System.Guid tableId, System.Guid targetId, double propertion, System.Guid periodId, System.Guid groupId) : 
                base(propertionID, tableId, targetId, propertion, periodId, groupId) {
        }
    }
    
    /// <summary>
    /// 考核组 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalGroupBase {
        
        /// <summary>
        /// GroupId
        /// </summary>
        private System.Guid _groupId;
        
        /// <summary>
        /// GroupName
        /// </summary>
        private string _groupName = string.Empty;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate = DateTime.Now;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalGroupBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalGroupBase(System.Guid groupId, string groupName, System.DateTime createDate) {
            _groupId = groupId;
            _groupName = groupName;
            _createDate = createDate;
        }
        
        /// <summary>
        /// GroupId
        /// </summary>
        public virtual System.Guid GroupId {
            get {
                return _groupId;
            }
            set {
                _groupId = value;
            }
        }
        
        /// <summary>
        /// GroupId APColumnDef
        /// </summary>
        public static GuidAPColumnDef GroupIdDef {
            get {
                return APDBDef.EvalGroup.GroupId;
            }
        }
        
        /// <summary>
        /// GroupName
        /// </summary>
        [Display(Name="组名称")]
        [StringLength(100)]
        public virtual string GroupName {
            get {
                return _groupName;
            }
            set {
                _groupName = value;
            }
        }
        
        /// <summary>
        /// GroupName APColumnDef
        /// </summary>
        public static StringAPColumnDef GroupNameDef {
            get {
                return APDBDef.EvalGroup.GroupName;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.EvalGroup.CreateDate;
            }
        }
        
        /// <summary>
        /// EvalGroupTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalGroupTableDef TableDef {
            get {
                return APDBDef.EvalGroup;
            }
        }
        
        /// <summary>
        /// EvalGroupTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalGroup.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalGroup data) {
            GroupId = data.GroupId;
            GroupName = data.GroupName;
            CreateDate = data.CreateDate;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalGroup data) {
            if ((GroupId != data.GroupId)) {
                return false;
            }
            if ((GroupName != data.GroupName)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalGroupBpl.Insert(((EvalGroup)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalGroupBpl.Update(((EvalGroup)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid groupId, Object metadata) {
            APBplDef.EvalGroupBpl.UpdatePartial(groupId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid groupId) {
            APBplDef.EvalGroupBpl.PrimaryDelete(groupId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalGroupBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalGroupBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalGroup PrimaryGet(System.Guid groupId) {
            return APBplDef.EvalGroupBpl.PrimaryGet(groupId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalGroupBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalGroupBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalGroupBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalGroup> GetAll() {
            return APBplDef.EvalGroupBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 考核组
    /// </summary>
    [Serializable()]
    public partial class EvalGroup : EvalGroupBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalGroup() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalGroup(System.Guid groupId, string groupName, System.DateTime createDate) : 
                base(groupId, groupName, createDate) {
        }
    }
    
    /// <summary>
    /// 考核组-成员 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalGroupMemberBase {
        
        /// <summary>
        /// GroupMemberId
        /// </summary>
        private System.Guid _groupMemberId;
        
        /// <summary>
        /// GroupId
        /// </summary>
        private System.Guid _groupId;
        
        /// <summary>
        /// MemberId
        /// </summary>
        private System.Guid _memberId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalGroupMemberBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalGroupMemberBase(System.Guid groupMemberId, System.Guid groupId, System.Guid memberId) {
            _groupMemberId = groupMemberId;
            _groupId = groupId;
            _memberId = memberId;
        }
        
        /// <summary>
        /// GroupMemberId
        /// </summary>
        public virtual System.Guid GroupMemberId {
            get {
                return _groupMemberId;
            }
            set {
                _groupMemberId = value;
            }
        }
        
        /// <summary>
        /// GroupMemberId APColumnDef
        /// </summary>
        public static GuidAPColumnDef GroupMemberIdDef {
            get {
                return APDBDef.EvalGroupMember.GroupMemberId;
            }
        }
        
        /// <summary>
        /// GroupId
        /// </summary>
        public virtual System.Guid GroupId {
            get {
                return _groupId;
            }
            set {
                _groupId = value;
            }
        }
        
        /// <summary>
        /// GroupId APColumnDef
        /// </summary>
        public static GuidAPColumnDef GroupIdDef {
            get {
                return APDBDef.EvalGroupMember.GroupId;
            }
        }
        
        /// <summary>
        /// MemberId
        /// </summary>
        public virtual System.Guid MemberId {
            get {
                return _memberId;
            }
            set {
                _memberId = value;
            }
        }
        
        /// <summary>
        /// MemberId APColumnDef
        /// </summary>
        public static GuidAPColumnDef MemberIdDef {
            get {
                return APDBDef.EvalGroupMember.MemberId;
            }
        }
        
        /// <summary>
        /// EvalGroupMemberTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalGroupMemberTableDef TableDef {
            get {
                return APDBDef.EvalGroupMember;
            }
        }
        
        /// <summary>
        /// EvalGroupMemberTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalGroupMember.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalGroupMember data) {
            GroupMemberId = data.GroupMemberId;
            GroupId = data.GroupId;
            MemberId = data.MemberId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalGroupMember data) {
            if ((GroupMemberId != data.GroupMemberId)) {
                return false;
            }
            if ((GroupId != data.GroupId)) {
                return false;
            }
            if ((MemberId != data.MemberId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalGroupMemberBpl.Insert(((EvalGroupMember)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalGroupMemberBpl.Update(((EvalGroupMember)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid groupMemberId, Object metadata) {
            APBplDef.EvalGroupMemberBpl.UpdatePartial(groupMemberId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid groupMemberId) {
            APBplDef.EvalGroupMemberBpl.PrimaryDelete(groupMemberId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalGroupMemberBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalGroupMemberBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalGroupMember PrimaryGet(System.Guid groupMemberId) {
            return APBplDef.EvalGroupMemberBpl.PrimaryGet(groupMemberId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalGroupMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalGroupMemberBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalGroupMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalGroupMemberBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalGroupMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalGroupMemberBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalGroupMember> GetAll() {
            return APBplDef.EvalGroupMemberBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 考核组-成员
    /// </summary>
    [Serializable()]
    public partial class EvalGroupMember : EvalGroupMemberBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalGroupMember() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalGroupMember(System.Guid groupMemberId, System.Guid groupId, System.Guid memberId) : 
                base(groupMemberId, groupId, memberId) {
        }
    }
    
    /// <summary>
    /// 考核组-评审人 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalGroupAccessorBase {
        
        /// <summary>
        /// GroupAccessorId
        /// </summary>
        private System.Guid _groupAccessorId;
        
        /// <summary>
        /// 所属考核组ID
        /// </summary>
        private System.Guid _groupId;
        
        /// <summary>
        /// 评审人ID
        /// </summary>
        private System.Guid _accessorId;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.DateTime _modifyDate = DateTime.Now;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalGroupAccessorBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalGroupAccessorBase(System.Guid groupAccessorId, System.Guid groupId, System.Guid accessorId, System.DateTime modifyDate) {
            _groupAccessorId = groupAccessorId;
            _groupId = groupId;
            _accessorId = accessorId;
            _modifyDate = modifyDate;
        }
        
        /// <summary>
        /// GroupAccessorId
        /// </summary>
        [Display(Name="评审人组成员ID")]
        public virtual System.Guid GroupAccessorId {
            get {
                return _groupAccessorId;
            }
            set {
                _groupAccessorId = value;
            }
        }
        
        /// <summary>
        /// GroupAccessorId APColumnDef
        /// </summary>
        public static GuidAPColumnDef GroupAccessorIdDef {
            get {
                return APDBDef.EvalGroupAccessor.GroupAccessorId;
            }
        }
        
        /// <summary>
        /// 所属考核组ID
        /// </summary>
        [Display(Name="考核组ID")]
        public virtual System.Guid GroupId {
            get {
                return _groupId;
            }
            set {
                _groupId = value;
            }
        }
        
        /// <summary>
        /// 所属考核组ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef GroupIdDef {
            get {
                return APDBDef.EvalGroupAccessor.GroupId;
            }
        }
        
        /// <summary>
        /// 评审人ID
        /// </summary>
        [Display(Name="评审人")]
        public virtual System.Guid AccessorId {
            get {
                return _accessorId;
            }
            set {
                _accessorId = value;
            }
        }
        
        /// <summary>
        /// 评审人ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef AccessorIdDef {
            get {
                return APDBDef.EvalGroupAccessor.AccessorId;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="修改时间")]
        public virtual System.DateTime ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.EvalGroupAccessor.ModifyDate;
            }
        }
        
        /// <summary>
        /// EvalGroupAccessorTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalGroupAccessorTableDef TableDef {
            get {
                return APDBDef.EvalGroupAccessor;
            }
        }
        
        /// <summary>
        /// EvalGroupAccessorTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalGroupAccessor.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalGroupAccessor data) {
            GroupAccessorId = data.GroupAccessorId;
            GroupId = data.GroupId;
            AccessorId = data.AccessorId;
            ModifyDate = data.ModifyDate;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalGroupAccessor data) {
            if ((GroupAccessorId != data.GroupAccessorId)) {
                return false;
            }
            if ((GroupId != data.GroupId)) {
                return false;
            }
            if ((AccessorId != data.AccessorId)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalGroupAccessorBpl.Insert(((EvalGroupAccessor)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalGroupAccessorBpl.Update(((EvalGroupAccessor)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid groupAccessorId, Object metadata) {
            APBplDef.EvalGroupAccessorBpl.UpdatePartial(groupAccessorId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid groupAccessorId) {
            APBplDef.EvalGroupAccessorBpl.PrimaryDelete(groupAccessorId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalGroupAccessorBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalGroupAccessorBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalGroupAccessor PrimaryGet(System.Guid groupAccessorId) {
            return APBplDef.EvalGroupAccessorBpl.PrimaryGet(groupAccessorId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalGroupAccessor> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalGroupAccessorBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalGroupAccessor> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalGroupAccessorBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalGroupAccessor> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalGroupAccessorBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalGroupAccessor> GetAll() {
            return APBplDef.EvalGroupAccessorBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 考核组-评审人
    /// </summary>
    [Serializable()]
    public partial class EvalGroupAccessor : EvalGroupAccessorBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalGroupAccessor() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalGroupAccessor(System.Guid groupAccessorId, System.Guid groupId, System.Guid accessorId, System.DateTime modifyDate) : 
                base(groupAccessorId, groupId, accessorId, modifyDate) {
        }
    }
    
    /// <summary>
    /// 评审人-评审对象 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalAccessorTargetBase {
        
        /// <summary>
        /// AccessorTargetId
        /// </summary>
        private System.Guid _accessorTargetId;
        
        /// <summary>
        /// 评审人ID
        /// </summary>
        private System.Guid _accessorId;
        
        /// <summary>
        /// 评审对象ID，包含个人或者考核组
        /// </summary>
        private System.Guid _targetId;
        
        /// <summary>
        /// EvalType
        /// </summary>
        private System.Guid _evalType;
        
        /// <summary>
        /// TableId
        /// </summary>
        private System.Guid _tableId;
        
        /// <summary>
        /// Propertion
        /// </summary>
        private double _propertion;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.DateTime _modifyDate = DateTime.Now;
        
        /// <summary>
        /// PeriodId
        /// </summary>
        private System.Guid _periodId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalAccessorTargetBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalAccessorTargetBase(System.Guid accessorTargetId, System.Guid accessorId, System.Guid targetId, System.Guid evalType, System.Guid tableId, double propertion, System.DateTime modifyDate, System.Guid periodId) {
            _accessorTargetId = accessorTargetId;
            _accessorId = accessorId;
            _targetId = targetId;
            _evalType = evalType;
            _tableId = tableId;
            _propertion = propertion;
            _modifyDate = modifyDate;
            _periodId = periodId;
        }
        
        /// <summary>
        /// AccessorTargetId
        /// </summary>
        public virtual System.Guid AccessorTargetId {
            get {
                return _accessorTargetId;
            }
            set {
                _accessorTargetId = value;
            }
        }
        
        /// <summary>
        /// AccessorTargetId APColumnDef
        /// </summary>
        public static GuidAPColumnDef AccessorTargetIdDef {
            get {
                return APDBDef.EvalAccessorTarget.AccessorTargetId;
            }
        }
        
        /// <summary>
        /// 评审人ID
        /// </summary>
        [Display(Name="评审人ID")]
        public virtual System.Guid AccessorId {
            get {
                return _accessorId;
            }
            set {
                _accessorId = value;
            }
        }
        
        /// <summary>
        /// 评审人ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef AccessorIdDef {
            get {
                return APDBDef.EvalAccessorTarget.AccessorId;
            }
        }
        
        /// <summary>
        /// 评审对象ID，包含个人或者考核组
        /// </summary>
        [Display(Name="评审对象ID")]
        public virtual System.Guid TargetId {
            get {
                return _targetId;
            }
            set {
                _targetId = value;
            }
        }
        
        /// <summary>
        /// 评审对象ID，包含个人或者考核组 APColumnDef
        /// </summary>
        public static GuidAPColumnDef TargetIdDef {
            get {
                return APDBDef.EvalAccessorTarget.TargetId;
            }
        }
        
        /// <summary>
        /// EvalType
        /// </summary>
        [Display(Name="考核类型")]
        public virtual System.Guid EvalType {
            get {
                return _evalType;
            }
            set {
                _evalType = value;
            }
        }
        
        /// <summary>
        /// EvalType APColumnDef
        /// </summary>
        public static GuidAPColumnDef EvalTypeDef {
            get {
                return APDBDef.EvalAccessorTarget.EvalType;
            }
        }
        
        /// <summary>
        /// TableId
        /// </summary>
        public virtual System.Guid TableId {
            get {
                return _tableId;
            }
            set {
                _tableId = value;
            }
        }
        
        /// <summary>
        /// TableId APColumnDef
        /// </summary>
        public static GuidAPColumnDef TableIdDef {
            get {
                return APDBDef.EvalAccessorTarget.TableId;
            }
        }
        
        /// <summary>
        /// Propertion
        /// </summary>
        [Display(Name="分值权重")]
        public virtual double Propertion {
            get {
                return _propertion;
            }
            set {
                _propertion = value;
            }
        }
        
        /// <summary>
        /// Propertion APColumnDef
        /// </summary>
        public static DoubleAPColumnDef PropertionDef {
            get {
                return APDBDef.EvalAccessorTarget.Propertion;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="修改时间")]
        public virtual System.DateTime ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.EvalAccessorTarget.ModifyDate;
            }
        }
        
        /// <summary>
        /// PeriodId
        /// </summary>
        [Display(Name="周期ID")]
        public virtual System.Guid PeriodId {
            get {
                return _periodId;
            }
            set {
                _periodId = value;
            }
        }
        
        /// <summary>
        /// PeriodId APColumnDef
        /// </summary>
        public static GuidAPColumnDef PeriodIdDef {
            get {
                return APDBDef.EvalAccessorTarget.PeriodId;
            }
        }
        
        /// <summary>
        /// EvalAccessorTargetTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalAccessorTargetTableDef TableDef {
            get {
                return APDBDef.EvalAccessorTarget;
            }
        }
        
        /// <summary>
        /// EvalAccessorTargetTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalAccessorTarget.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalAccessorTarget data) {
            AccessorTargetId = data.AccessorTargetId;
            AccessorId = data.AccessorId;
            TargetId = data.TargetId;
            EvalType = data.EvalType;
            TableId = data.TableId;
            Propertion = data.Propertion;
            ModifyDate = data.ModifyDate;
            PeriodId = data.PeriodId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalAccessorTarget data) {
            if ((AccessorTargetId != data.AccessorTargetId)) {
                return false;
            }
            if ((AccessorId != data.AccessorId)) {
                return false;
            }
            if ((TargetId != data.TargetId)) {
                return false;
            }
            if ((EvalType != data.EvalType)) {
                return false;
            }
            if ((TableId != data.TableId)) {
                return false;
            }
            if ((Propertion != data.Propertion)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            if ((PeriodId != data.PeriodId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalAccessorTargetBpl.Insert(((EvalAccessorTarget)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalAccessorTargetBpl.Update(((EvalAccessorTarget)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid accessorTargetId, Object metadata) {
            APBplDef.EvalAccessorTargetBpl.UpdatePartial(accessorTargetId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid accessorTargetId) {
            APBplDef.EvalAccessorTargetBpl.PrimaryDelete(accessorTargetId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalAccessorTargetBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalAccessorTargetBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalAccessorTarget PrimaryGet(System.Guid accessorTargetId) {
            return APBplDef.EvalAccessorTargetBpl.PrimaryGet(accessorTargetId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalAccessorTarget> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalAccessorTargetBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalAccessorTarget> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalAccessorTargetBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalAccessorTarget> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalAccessorTargetBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalAccessorTarget> GetAll() {
            return APBplDef.EvalAccessorTargetBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 评审人-评审对象
    /// </summary>
    [Serializable()]
    public partial class EvalAccessorTarget : EvalAccessorTargetBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalAccessorTarget() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalAccessorTarget(System.Guid accessorTargetId, System.Guid accessorId, System.Guid targetId, System.Guid evalType, System.Guid tableId, double propertion, System.DateTime modifyDate, System.Guid periodId) : 
                base(accessorTargetId, accessorId, targetId, evalType, tableId, propertion, modifyDate, periodId) {
        }
    }
    
    /// <summary>
    /// 评价-结果 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalResultBase {
        
        /// <summary>
        /// ResultId
        /// </summary>
        private System.Guid _resultId;
        
        /// <summary>
        /// PeriodId
        /// </summary>
        private System.Guid _periodId;
        
        /// <summary>
        /// GroupId
        /// </summary>
        private System.Guid _groupId;
        
        /// <summary>
        /// TableId
        /// </summary>
        private System.Guid _tableId;
        
        /// <summary>
        /// TargetId
        /// </summary>
        private System.Guid _targetId;
        
        /// <summary>
        /// 考评人角色ID
        /// </summary>
        private System.Guid _accesserRoleId;
        
        /// <summary>
        /// 考评人ID
        /// </summary>
        private System.Guid _accesserId;
        
        /// <summary>
        /// AccessDate
        /// </summary>
        private System.DateTime _accessDate;
        
        /// <summary>
        /// Score
        /// </summary>
        private double _score;
        
        /// <summary>
        /// EvalType
        /// </summary>
        private System.Guid _evalType;
        
        /// <summary>
        /// 考评对象角色ID
        /// </summary>
        private System.Guid _targetRoleId;
        
        /// <summary>
        /// 调整分ID
        /// </summary>
        private double _adjustScore;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalResultBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalResultBase(System.Guid resultId, System.Guid periodId, System.Guid groupId, System.Guid tableId, System.Guid targetId, System.Guid accesserRoleId, System.Guid accesserId, System.DateTime accessDate, double score, System.Guid evalType, System.Guid targetRoleId, double adjustScore) {
            _resultId = resultId;
            _periodId = periodId;
            _groupId = groupId;
            _tableId = tableId;
            _targetId = targetId;
            _accesserRoleId = accesserRoleId;
            _accesserId = accesserId;
            _accessDate = accessDate;
            _score = score;
            _evalType = evalType;
            _targetRoleId = targetRoleId;
            _adjustScore = adjustScore;
        }
        
        /// <summary>
        /// ResultId
        /// </summary>
        [Display(Name="评价结果ID")]
        public virtual System.Guid ResultId {
            get {
                return _resultId;
            }
            set {
                _resultId = value;
            }
        }
        
        /// <summary>
        /// ResultId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ResultIdDef {
            get {
                return APDBDef.EvalResult.ResultId;
            }
        }
        
        /// <summary>
        /// PeriodId
        /// </summary>
        [Display(Name="周期ID")]
        public virtual System.Guid PeriodId {
            get {
                return _periodId;
            }
            set {
                _periodId = value;
            }
        }
        
        /// <summary>
        /// PeriodId APColumnDef
        /// </summary>
        public static GuidAPColumnDef PeriodIdDef {
            get {
                return APDBDef.EvalResult.PeriodId;
            }
        }
        
        /// <summary>
        /// GroupId
        /// </summary>
        [Display(Name="单位ID")]
        public virtual System.Guid GroupId {
            get {
                return _groupId;
            }
            set {
                _groupId = value;
            }
        }
        
        /// <summary>
        /// GroupId APColumnDef
        /// </summary>
        public static GuidAPColumnDef GroupIdDef {
            get {
                return APDBDef.EvalResult.GroupId;
            }
        }
        
        /// <summary>
        /// TableId
        /// </summary>
        [Display(Name="考核表ID")]
        public virtual System.Guid TableId {
            get {
                return _tableId;
            }
            set {
                _tableId = value;
            }
        }
        
        /// <summary>
        /// TableId APColumnDef
        /// </summary>
        public static GuidAPColumnDef TableIdDef {
            get {
                return APDBDef.EvalResult.TableId;
            }
        }
        
        /// <summary>
        /// TargetId
        /// </summary>
        [Display(Name="被考核人ID")]
        public virtual System.Guid TargetId {
            get {
                return _targetId;
            }
            set {
                _targetId = value;
            }
        }
        
        /// <summary>
        /// TargetId APColumnDef
        /// </summary>
        public static GuidAPColumnDef TargetIdDef {
            get {
                return APDBDef.EvalResult.TargetId;
            }
        }
        
        /// <summary>
        /// 考评人角色ID
        /// </summary>
        [Display(Name="考评人角色")]
        public virtual System.Guid AccesserRoleId {
            get {
                return _accesserRoleId;
            }
            set {
                _accesserRoleId = value;
            }
        }
        
        /// <summary>
        /// 考评人角色ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef AccesserRoleIdDef {
            get {
                return APDBDef.EvalResult.AccesserRoleId;
            }
        }
        
        /// <summary>
        /// 考评人ID
        /// </summary>
        [Display(Name="考评人")]
        public virtual System.Guid AccesserId {
            get {
                return _accesserId;
            }
            set {
                _accesserId = value;
            }
        }
        
        /// <summary>
        /// 考评人ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef AccesserIdDef {
            get {
                return APDBDef.EvalResult.AccesserId;
            }
        }
        
        /// <summary>
        /// AccessDate
        /// </summary>
        [Display(Name="考评时间")]
        public virtual System.DateTime AccessDate {
            get {
                return _accessDate;
            }
            set {
                _accessDate = value;
            }
        }
        
        /// <summary>
        /// AccessDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef AccessDateDef {
            get {
                return APDBDef.EvalResult.AccessDate;
            }
        }
        
        /// <summary>
        /// Score
        /// </summary>
        [Display(Name="得分")]
        public virtual double Score {
            get {
                return _score;
            }
            set {
                _score = value;
            }
        }
        
        /// <summary>
        /// Score APColumnDef
        /// </summary>
        public static DoubleAPColumnDef ScoreDef {
            get {
                return APDBDef.EvalResult.Score;
            }
        }
        
        /// <summary>
        /// EvalType
        /// </summary>
        [Display(Name="考核类型（主观考核，自动考核）")]
        public virtual System.Guid EvalType {
            get {
                return _evalType;
            }
            set {
                _evalType = value;
            }
        }
        
        /// <summary>
        /// EvalType APColumnDef
        /// </summary>
        public static GuidAPColumnDef EvalTypeDef {
            get {
                return APDBDef.EvalResult.EvalType;
            }
        }
        
        /// <summary>
        /// 考评对象角色ID
        /// </summary>
        [Display(Name="考评对象角色")]
        public virtual System.Guid TargetRoleId {
            get {
                return _targetRoleId;
            }
            set {
                _targetRoleId = value;
            }
        }
        
        /// <summary>
        /// 考评对象角色ID APColumnDef
        /// </summary>
        public static GuidAPColumnDef TargetRoleIdDef {
            get {
                return APDBDef.EvalResult.TargetRoleId;
            }
        }
        
        /// <summary>
        /// 调整分ID
        /// </summary>
        [Display(Name="调整分")]
        public virtual double AdjustScore {
            get {
                return _adjustScore;
            }
            set {
                _adjustScore = value;
            }
        }
        
        /// <summary>
        /// 调整分ID APColumnDef
        /// </summary>
        public static DoubleAPColumnDef AdjustScoreDef {
            get {
                return APDBDef.EvalResult.AdjustScore;
            }
        }
        
        /// <summary>
        /// EvalResultTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalResultTableDef TableDef {
            get {
                return APDBDef.EvalResult;
            }
        }
        
        /// <summary>
        /// EvalResultTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalResult.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalResult data) {
            ResultId = data.ResultId;
            PeriodId = data.PeriodId;
            GroupId = data.GroupId;
            TableId = data.TableId;
            TargetId = data.TargetId;
            AccesserRoleId = data.AccesserRoleId;
            AccesserId = data.AccesserId;
            AccessDate = data.AccessDate;
            Score = data.Score;
            EvalType = data.EvalType;
            TargetRoleId = data.TargetRoleId;
            AdjustScore = data.AdjustScore;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalResult data) {
            if ((ResultId != data.ResultId)) {
                return false;
            }
            if ((PeriodId != data.PeriodId)) {
                return false;
            }
            if ((GroupId != data.GroupId)) {
                return false;
            }
            if ((TableId != data.TableId)) {
                return false;
            }
            if ((TargetId != data.TargetId)) {
                return false;
            }
            if ((AccesserRoleId != data.AccesserRoleId)) {
                return false;
            }
            if ((AccesserId != data.AccesserId)) {
                return false;
            }
            if ((AccessDate != data.AccessDate)) {
                return false;
            }
            if ((Score != data.Score)) {
                return false;
            }
            if ((EvalType != data.EvalType)) {
                return false;
            }
            if ((TargetRoleId != data.TargetRoleId)) {
                return false;
            }
            if ((AdjustScore != data.AdjustScore)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalResultBpl.Insert(((EvalResult)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalResultBpl.Update(((EvalResult)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid resultId, Object metadata) {
            APBplDef.EvalResultBpl.UpdatePartial(resultId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid resultId) {
            APBplDef.EvalResultBpl.PrimaryDelete(resultId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalResultBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalResultBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalResult PrimaryGet(System.Guid resultId) {
            return APBplDef.EvalResultBpl.PrimaryGet(resultId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalResultBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalResultBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalResultBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalResult> GetAll() {
            return APBplDef.EvalResultBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 评价-结果
    /// </summary>
    [Serializable()]
    public partial class EvalResult : EvalResultBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalResult() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalResult(System.Guid resultId, System.Guid periodId, System.Guid groupId, System.Guid tableId, System.Guid targetId, System.Guid accesserRoleId, System.Guid accesserId, System.DateTime accessDate, double score, System.Guid evalType, System.Guid targetRoleId, double adjustScore) : 
                base(resultId, periodId, groupId, tableId, targetId, accesserRoleId, accesserId, accessDate, score, evalType, targetRoleId, adjustScore) {
        }
    }
    
    /// <summary>
    /// 评价-结果-结果项 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalResultItemBase {
        
        /// <summary>
        /// ResultItemId
        /// </summary>
        private System.Guid _resultItemId;
        
        /// <summary>
        /// ResultId
        /// </summary>
        private System.Guid _resultId;
        
        /// <summary>
        /// IndicationId
        /// </summary>
        private System.Guid _indicationId;
        
        /// <summary>
        /// EvalItemKey
        /// </summary>
        private string _evalItemKey;
        
        /// <summary>
        /// ChooseValue
        /// </summary>
        private string _chooseValue;
        
        /// <summary>
        /// ResultValue
        /// </summary>
        private string _resultValue;
        
        /// <summary>
        /// Score
        /// </summary>
        private double _score;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalResultItemBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalResultItemBase(System.Guid resultItemId, System.Guid resultId, System.Guid indicationId, string evalItemKey, string chooseValue, string resultValue, double score) {
            _resultItemId = resultItemId;
            _resultId = resultId;
            _indicationId = indicationId;
            _evalItemKey = evalItemKey;
            _chooseValue = chooseValue;
            _resultValue = resultValue;
            _score = score;
        }
        
        /// <summary>
        /// ResultItemId
        /// </summary>
        [Display(Name="结果项ID")]
        public virtual System.Guid ResultItemId {
            get {
                return _resultItemId;
            }
            set {
                _resultItemId = value;
            }
        }
        
        /// <summary>
        /// ResultItemId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ResultItemIdDef {
            get {
                return APDBDef.EvalResultItem.ResultItemId;
            }
        }
        
        /// <summary>
        /// ResultId
        /// </summary>
        [Display(Name="评价结果ID")]
        public virtual System.Guid ResultId {
            get {
                return _resultId;
            }
            set {
                _resultId = value;
            }
        }
        
        /// <summary>
        /// ResultId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ResultIdDef {
            get {
                return APDBDef.EvalResultItem.ResultId;
            }
        }
        
        /// <summary>
        /// IndicationId
        /// </summary>
        public virtual System.Guid IndicationId {
            get {
                return _indicationId;
            }
            set {
                _indicationId = value;
            }
        }
        
        /// <summary>
        /// IndicationId APColumnDef
        /// </summary>
        public static GuidAPColumnDef IndicationIdDef {
            get {
                return APDBDef.EvalResultItem.IndicationId;
            }
        }
        
        /// <summary>
        /// EvalItemKey
        /// </summary>
        [Display(Name="指标项")]
        [StringLength(200)]
        public virtual string EvalItemKey {
            get {
                return _evalItemKey;
            }
            set {
                _evalItemKey = value;
            }
        }
        
        /// <summary>
        /// EvalItemKey APColumnDef
        /// </summary>
        public static StringAPColumnDef EvalItemKeyDef {
            get {
                return APDBDef.EvalResultItem.EvalItemKey;
            }
        }
        
        /// <summary>
        /// ChooseValue
        /// </summary>
        [Display(Name="选择值")]
        [StringLength(20)]
        public virtual string ChooseValue {
            get {
                return _chooseValue;
            }
            set {
                _chooseValue = value;
            }
        }
        
        /// <summary>
        /// ChooseValue APColumnDef
        /// </summary>
        public static StringAPColumnDef ChooseValueDef {
            get {
                return APDBDef.EvalResultItem.ChooseValue;
            }
        }
        
        /// <summary>
        /// ResultValue
        /// </summary>
        [Display(Name="输入值")]
        [StringLength(100)]
        public virtual string ResultValue {
            get {
                return _resultValue;
            }
            set {
                _resultValue = value;
            }
        }
        
        /// <summary>
        /// ResultValue APColumnDef
        /// </summary>
        public static StringAPColumnDef ResultValueDef {
            get {
                return APDBDef.EvalResultItem.ResultValue;
            }
        }
        
        /// <summary>
        /// Score
        /// </summary>
        [Display(Name="得分")]
        public virtual double Score {
            get {
                return _score;
            }
            set {
                _score = value;
            }
        }
        
        /// <summary>
        /// Score APColumnDef
        /// </summary>
        public static DoubleAPColumnDef ScoreDef {
            get {
                return APDBDef.EvalResultItem.Score;
            }
        }
        
        /// <summary>
        /// EvalResultItemTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalResultItemTableDef TableDef {
            get {
                return APDBDef.EvalResultItem;
            }
        }
        
        /// <summary>
        /// EvalResultItemTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalResultItem.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalResultItem data) {
            ResultItemId = data.ResultItemId;
            ResultId = data.ResultId;
            IndicationId = data.IndicationId;
            EvalItemKey = data.EvalItemKey;
            ChooseValue = data.ChooseValue;
            ResultValue = data.ResultValue;
            Score = data.Score;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalResultItem data) {
            if ((ResultItemId != data.ResultItemId)) {
                return false;
            }
            if ((ResultId != data.ResultId)) {
                return false;
            }
            if ((IndicationId != data.IndicationId)) {
                return false;
            }
            if ((EvalItemKey != data.EvalItemKey)) {
                return false;
            }
            if ((ChooseValue != data.ChooseValue)) {
                return false;
            }
            if ((ResultValue != data.ResultValue)) {
                return false;
            }
            if ((Score != data.Score)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalResultItemBpl.Insert(((EvalResultItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalResultItemBpl.Update(((EvalResultItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid resultItemId, Object metadata) {
            APBplDef.EvalResultItemBpl.UpdatePartial(resultItemId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid resultItemId) {
            APBplDef.EvalResultItemBpl.PrimaryDelete(resultItemId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalResultItemBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalResultItemBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalResultItem PrimaryGet(System.Guid resultItemId) {
            return APBplDef.EvalResultItemBpl.PrimaryGet(resultItemId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalResultItemBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalResultItemBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalResultItemBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalResultItem> GetAll() {
            return APBplDef.EvalResultItemBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 评价-结果-结果项
    /// </summary>
    [Serializable()]
    public partial class EvalResultItem : EvalResultItemBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalResultItem() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalResultItem(System.Guid resultItemId, System.Guid resultId, System.Guid indicationId, string evalItemKey, string chooseValue, string resultValue, double score) : 
                base(resultItemId, resultId, indicationId, evalItemKey, chooseValue, resultValue, score) {
        }
    }
    
    /// <summary>
    /// 评价-最终-结果 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalSubmitResultBase {
        
        /// <summary>
        /// SubmitResultId
        /// </summary>
        private System.Guid _submitResultId;
        
        /// <summary>
        /// PeriodId
        /// </summary>
        private System.Guid _periodId;
        
        /// <summary>
        /// UserId
        /// </summary>
        private System.Guid _userId;
        
        /// <summary>
        /// RoleId
        /// </summary>
        private System.Guid _roleId;
        
        /// <summary>
        /// Score
        /// </summary>
        private double _score;
        
        /// <summary>
        /// AdjustScore
        /// </summary>
        private double _adjustScore;
        
        /// <summary>
        /// PeriodName
        /// </summary>
        private string _periodName = string.Empty;
        
        /// <summary>
        /// RoleName
        /// </summary>
        private string _roleName = string.Empty;
        
        /// <summary>
        /// UserName
        /// </summary>
        private string _userName = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalSubmitResultBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalSubmitResultBase(System.Guid submitResultId, System.Guid periodId, System.Guid userId, System.Guid roleId, double score, double adjustScore, string periodName, string roleName, string userName) {
            _submitResultId = submitResultId;
            _periodId = periodId;
            _userId = userId;
            _roleId = roleId;
            _score = score;
            _adjustScore = adjustScore;
            _periodName = periodName;
            _roleName = roleName;
            _userName = userName;
        }
        
        /// <summary>
        /// SubmitResultId
        /// </summary>
        [Display(Name="评价结果ID")]
        public virtual System.Guid SubmitResultId {
            get {
                return _submitResultId;
            }
            set {
                _submitResultId = value;
            }
        }
        
        /// <summary>
        /// SubmitResultId APColumnDef
        /// </summary>
        public static GuidAPColumnDef SubmitResultIdDef {
            get {
                return APDBDef.EvalSubmitResult.SubmitResultId;
            }
        }
        
        /// <summary>
        /// PeriodId
        /// </summary>
        [Display(Name="周期ID")]
        public virtual System.Guid PeriodId {
            get {
                return _periodId;
            }
            set {
                _periodId = value;
            }
        }
        
        /// <summary>
        /// PeriodId APColumnDef
        /// </summary>
        public static GuidAPColumnDef PeriodIdDef {
            get {
                return APDBDef.EvalSubmitResult.PeriodId;
            }
        }
        
        /// <summary>
        /// UserId
        /// </summary>
        [Display(Name="对象ID")]
        public virtual System.Guid UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// UserId APColumnDef
        /// </summary>
        public static GuidAPColumnDef UserIdDef {
            get {
                return APDBDef.EvalSubmitResult.UserId;
            }
        }
        
        /// <summary>
        /// RoleId
        /// </summary>
        [Display(Name="对象角色ID")]
        public virtual System.Guid RoleId {
            get {
                return _roleId;
            }
            set {
                _roleId = value;
            }
        }
        
        /// <summary>
        /// RoleId APColumnDef
        /// </summary>
        public static GuidAPColumnDef RoleIdDef {
            get {
                return APDBDef.EvalSubmitResult.RoleId;
            }
        }
        
        /// <summary>
        /// Score
        /// </summary>
        [Display(Name="得分")]
        public virtual double Score {
            get {
                return _score;
            }
            set {
                _score = value;
            }
        }
        
        /// <summary>
        /// Score APColumnDef
        /// </summary>
        public static DoubleAPColumnDef ScoreDef {
            get {
                return APDBDef.EvalSubmitResult.Score;
            }
        }
        
        /// <summary>
        /// AdjustScore
        /// </summary>
        [Display(Name="调整分")]
        public virtual double AdjustScore {
            get {
                return _adjustScore;
            }
            set {
                _adjustScore = value;
            }
        }
        
        /// <summary>
        /// AdjustScore APColumnDef
        /// </summary>
        public static DoubleAPColumnDef AdjustScoreDef {
            get {
                return APDBDef.EvalSubmitResult.AdjustScore;
            }
        }
        
        /// <summary>
        /// PeriodName
        /// </summary>
        [StringLength(100)]
        public virtual string PeriodName {
            get {
                return _periodName;
            }
            set {
                _periodName = value;
            }
        }
        
        /// <summary>
        /// PeriodName APColumnDef
        /// </summary>
        public static StringAPColumnDef PeriodNameDef {
            get {
                return APDBDef.EvalSubmitResult.PeriodName;
            }
        }
        
        /// <summary>
        /// RoleName
        /// </summary>
        [StringLength(100)]
        public virtual string RoleName {
            get {
                return _roleName;
            }
            set {
                _roleName = value;
            }
        }
        
        /// <summary>
        /// RoleName APColumnDef
        /// </summary>
        public static StringAPColumnDef RoleNameDef {
            get {
                return APDBDef.EvalSubmitResult.RoleName;
            }
        }
        
        /// <summary>
        /// UserName
        /// </summary>
        [StringLength(100)]
        public virtual string UserName {
            get {
                return _userName;
            }
            set {
                _userName = value;
            }
        }
        
        /// <summary>
        /// UserName APColumnDef
        /// </summary>
        public static StringAPColumnDef UserNameDef {
            get {
                return APDBDef.EvalSubmitResult.UserName;
            }
        }
        
        /// <summary>
        /// EvalSubmitResultTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalSubmitResultTableDef TableDef {
            get {
                return APDBDef.EvalSubmitResult;
            }
        }
        
        /// <summary>
        /// EvalSubmitResultTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalSubmitResult.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalSubmitResult data) {
            SubmitResultId = data.SubmitResultId;
            PeriodId = data.PeriodId;
            UserId = data.UserId;
            RoleId = data.RoleId;
            Score = data.Score;
            AdjustScore = data.AdjustScore;
            PeriodName = data.PeriodName;
            RoleName = data.RoleName;
            UserName = data.UserName;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalSubmitResult data) {
            if ((SubmitResultId != data.SubmitResultId)) {
                return false;
            }
            if ((PeriodId != data.PeriodId)) {
                return false;
            }
            if ((UserId != data.UserId)) {
                return false;
            }
            if ((RoleId != data.RoleId)) {
                return false;
            }
            if ((Score != data.Score)) {
                return false;
            }
            if ((AdjustScore != data.AdjustScore)) {
                return false;
            }
            if ((PeriodName != data.PeriodName)) {
                return false;
            }
            if ((RoleName != data.RoleName)) {
                return false;
            }
            if ((UserName != data.UserName)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalSubmitResultBpl.Insert(((EvalSubmitResult)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalSubmitResultBpl.Update(((EvalSubmitResult)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid submitResultId, Object metadata) {
            APBplDef.EvalSubmitResultBpl.UpdatePartial(submitResultId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid submitResultId) {
            APBplDef.EvalSubmitResultBpl.PrimaryDelete(submitResultId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalSubmitResultBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalSubmitResultBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalSubmitResult PrimaryGet(System.Guid submitResultId) {
            return APBplDef.EvalSubmitResultBpl.PrimaryGet(submitResultId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalSubmitResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalSubmitResultBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalSubmitResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalSubmitResultBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalSubmitResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalSubmitResultBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalSubmitResult> GetAll() {
            return APBplDef.EvalSubmitResultBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 评价-最终-结果
    /// </summary>
    [Serializable()]
    public partial class EvalSubmitResult : EvalSubmitResultBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalSubmitResult() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalSubmitResult(System.Guid submitResultId, System.Guid periodId, System.Guid userId, System.Guid roleId, double score, double adjustScore, string periodName, string roleName, string userName) : 
                base(submitResultId, periodId, userId, roleId, score, adjustScore, periodName, roleName, userName) {
        }
    }
    
    /// <summary>
    /// 文件夹 Base
    /// </summary>
    [Serializable()]
    public abstract partial class FolderBase {
        
        /// <summary>
        /// FolderId
        /// </summary>
        private System.Guid _folderId;
        
        /// <summary>
        /// ParentId
        /// </summary>
        private System.Guid _parentId;
        
        /// <summary>
        /// SortId
        /// </summary>
        private int _sortId;
        
        /// <summary>
        /// FolderName
        /// </summary>
        private string _folderName = string.Empty;
        
        /// <summary>
        /// FolderType
        /// </summary>
        private System.Guid _folderType;
        
        /// <summary>
        /// OperatorId
        /// </summary>
        private System.Guid _operatorId;
        
        /// <summary>
        /// FolderPath
        /// </summary>
        private string _folderPath = string.Empty;
        
        /// <summary>
        /// FileCount
        /// </summary>
        private int _fileCount;
        
        /// <summary>
        /// FolderCount
        /// </summary>
        private int _folderCount;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public FolderBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public FolderBase(System.Guid folderId, System.Guid parentId, int sortId, string folderName, System.Guid folderType, System.Guid operatorId, string folderPath, int fileCount, int folderCount) {
            _folderId = folderId;
            _parentId = parentId;
            _sortId = sortId;
            _folderName = folderName;
            _folderType = folderType;
            _operatorId = operatorId;
            _folderPath = folderPath;
            _fileCount = fileCount;
            _folderCount = folderCount;
        }
        
        /// <summary>
        /// FolderId
        /// </summary>
        [Display(Name="文件夹ID")]
        public virtual System.Guid FolderId {
            get {
                return _folderId;
            }
            set {
                _folderId = value;
            }
        }
        
        /// <summary>
        /// FolderId APColumnDef
        /// </summary>
        public static GuidAPColumnDef FolderIdDef {
            get {
                return APDBDef.Folder.FolderId;
            }
        }
        
        /// <summary>
        /// ParentId
        /// </summary>
        public virtual System.Guid ParentId {
            get {
                return _parentId;
            }
            set {
                _parentId = value;
            }
        }
        
        /// <summary>
        /// ParentId APColumnDef
        /// </summary>
        public static GuidAPColumnDef ParentIdDef {
            get {
                return APDBDef.Folder.ParentId;
            }
        }
        
        /// <summary>
        /// SortId
        /// </summary>
        public virtual int SortId {
            get {
                return _sortId;
            }
            set {
                _sortId = value;
            }
        }
        
        /// <summary>
        /// SortId APColumnDef
        /// </summary>
        public static Int32APColumnDef SortIdDef {
            get {
                return APDBDef.Folder.SortId;
            }
        }
        
        /// <summary>
        /// FolderName
        /// </summary>
        [Display(Name="文件夹名称")]
        [StringLength(200)]
        public virtual string FolderName {
            get {
                return _folderName;
            }
            set {
                _folderName = value;
            }
        }
        
        /// <summary>
        /// FolderName APColumnDef
        /// </summary>
        public static StringAPColumnDef FolderNameDef {
            get {
                return APDBDef.Folder.FolderName;
            }
        }
        
        /// <summary>
        /// FolderType
        /// </summary>
        public virtual System.Guid FolderType {
            get {
                return _folderType;
            }
            set {
                _folderType = value;
            }
        }
        
        /// <summary>
        /// FolderType APColumnDef
        /// </summary>
        public static GuidAPColumnDef FolderTypeDef {
            get {
                return APDBDef.Folder.FolderType;
            }
        }
        
        /// <summary>
        /// OperatorId
        /// </summary>
        public virtual System.Guid OperatorId {
            get {
                return _operatorId;
            }
            set {
                _operatorId = value;
            }
        }
        
        /// <summary>
        /// OperatorId APColumnDef
        /// </summary>
        public static GuidAPColumnDef OperatorIdDef {
            get {
                return APDBDef.Folder.OperatorId;
            }
        }
        
        /// <summary>
        /// FolderPath
        /// </summary>
        [StringLength(1000)]
        public virtual string FolderPath {
            get {
                return _folderPath;
            }
            set {
                _folderPath = value;
            }
        }
        
        /// <summary>
        /// FolderPath APColumnDef
        /// </summary>
        public static StringAPColumnDef FolderPathDef {
            get {
                return APDBDef.Folder.FolderPath;
            }
        }
        
        /// <summary>
        /// FileCount
        /// </summary>
        public virtual int FileCount {
            get {
                return _fileCount;
            }
            set {
                _fileCount = value;
            }
        }
        
        /// <summary>
        /// FileCount APColumnDef
        /// </summary>
        public static Int32APColumnDef FileCountDef {
            get {
                return APDBDef.Folder.FileCount;
            }
        }
        
        /// <summary>
        /// FolderCount
        /// </summary>
        public virtual int FolderCount {
            get {
                return _folderCount;
            }
            set {
                _folderCount = value;
            }
        }
        
        /// <summary>
        /// FolderCount APColumnDef
        /// </summary>
        public static Int32APColumnDef FolderCountDef {
            get {
                return APDBDef.Folder.FolderCount;
            }
        }
        
        /// <summary>
        /// FolderTableDef APTableDef
        /// </summary>
        public static APDBDef.FolderTableDef TableDef {
            get {
                return APDBDef.Folder;
            }
        }
        
        /// <summary>
        /// FolderTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Folder.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Folder data) {
            FolderId = data.FolderId;
            ParentId = data.ParentId;
            SortId = data.SortId;
            FolderName = data.FolderName;
            FolderType = data.FolderType;
            OperatorId = data.OperatorId;
            FolderPath = data.FolderPath;
            FileCount = data.FileCount;
            FolderCount = data.FolderCount;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Folder data) {
            if ((FolderId != data.FolderId)) {
                return false;
            }
            if ((ParentId != data.ParentId)) {
                return false;
            }
            if ((SortId != data.SortId)) {
                return false;
            }
            if ((FolderName != data.FolderName)) {
                return false;
            }
            if ((FolderType != data.FolderType)) {
                return false;
            }
            if ((OperatorId != data.OperatorId)) {
                return false;
            }
            if ((FolderPath != data.FolderPath)) {
                return false;
            }
            if ((FileCount != data.FileCount)) {
                return false;
            }
            if ((FolderCount != data.FolderCount)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.FolderBpl.Insert(((Folder)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.FolderBpl.Update(((Folder)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid folderId, Object metadata) {
            APBplDef.FolderBpl.UpdatePartial(folderId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid folderId) {
            APBplDef.FolderBpl.PrimaryDelete(folderId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.FolderBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.FolderBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Folder PrimaryGet(System.Guid folderId) {
            return APBplDef.FolderBpl.PrimaryGet(folderId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Folder> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.FolderBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Folder> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.FolderBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Folder> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.FolderBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Folder> GetAll() {
            return APBplDef.FolderBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 文件夹
    /// </summary>
    [Serializable()]
    public partial class Folder : FolderBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Folder() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Folder(System.Guid folderId, System.Guid parentId, int sortId, string folderName, System.Guid folderType, System.Guid operatorId, string folderPath, int fileCount, int folderCount) : 
                base(folderId, parentId, sortId, folderName, folderType, operatorId, folderPath, fileCount, folderCount) {
        }
    }
    
    /// <summary>
    ///  Base
    /// </summary>
    [Serializable()]
    public abstract partial class FolderFileBase {
        
        /// <summary>
        /// FolderFileId
        /// </summary>
        private System.Guid _folderFileId;
        
        /// <summary>
        /// FolderId
        /// </summary>
        private System.Guid _folderId;
        
        /// <summary>
        /// AttachmentId
        /// </summary>
        private System.Guid _attachmentId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public FolderFileBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public FolderFileBase(System.Guid folderFileId, System.Guid folderId, System.Guid attachmentId) {
            _folderFileId = folderFileId;
            _folderId = folderId;
            _attachmentId = attachmentId;
        }
        
        /// <summary>
        /// FolderFileId
        /// </summary>
        public virtual System.Guid FolderFileId {
            get {
                return _folderFileId;
            }
            set {
                _folderFileId = value;
            }
        }
        
        /// <summary>
        /// FolderFileId APColumnDef
        /// </summary>
        public static GuidAPColumnDef FolderFileIdDef {
            get {
                return APDBDef.FolderFile.FolderFileId;
            }
        }
        
        /// <summary>
        /// FolderId
        /// </summary>
        public virtual System.Guid FolderId {
            get {
                return _folderId;
            }
            set {
                _folderId = value;
            }
        }
        
        /// <summary>
        /// FolderId APColumnDef
        /// </summary>
        public static GuidAPColumnDef FolderIdDef {
            get {
                return APDBDef.FolderFile.FolderId;
            }
        }
        
        /// <summary>
        /// AttachmentId
        /// </summary>
        public virtual System.Guid AttachmentId {
            get {
                return _attachmentId;
            }
            set {
                _attachmentId = value;
            }
        }
        
        /// <summary>
        /// AttachmentId APColumnDef
        /// </summary>
        public static GuidAPColumnDef AttachmentIdDef {
            get {
                return APDBDef.FolderFile.AttachmentId;
            }
        }
        
        /// <summary>
        /// FolderFileTableDef APTableDef
        /// </summary>
        public static APDBDef.FolderFileTableDef TableDef {
            get {
                return APDBDef.FolderFile;
            }
        }
        
        /// <summary>
        /// FolderFileTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.FolderFile.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(FolderFile data) {
            FolderFileId = data.FolderFileId;
            FolderId = data.FolderId;
            AttachmentId = data.AttachmentId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(FolderFile data) {
            if ((FolderFileId != data.FolderFileId)) {
                return false;
            }
            if ((FolderId != data.FolderId)) {
                return false;
            }
            if ((AttachmentId != data.AttachmentId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.FolderFileBpl.Insert(((FolderFile)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.FolderFileBpl.Update(((FolderFile)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid folderFileId, Object metadata) {
            APBplDef.FolderFileBpl.UpdatePartial(folderFileId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid folderFileId) {
            APBplDef.FolderFileBpl.PrimaryDelete(folderFileId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.FolderFileBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.FolderFileBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static FolderFile PrimaryGet(System.Guid folderFileId) {
            return APBplDef.FolderFileBpl.PrimaryGet(folderFileId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<FolderFile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.FolderFileBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<FolderFile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.FolderFileBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<FolderFile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.FolderFileBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<FolderFile> GetAll() {
            return APBplDef.FolderFileBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 
    /// </summary>
    [Serializable()]
    public partial class FolderFile : FolderFileBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public FolderFile() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public FolderFile(System.Guid folderFileId, System.Guid folderId, System.Guid attachmentId) : 
                base(folderFileId, folderId, attachmentId) {
        }
    }
    
    /// <summary>
    /// 建议 Base
    /// </summary>
    [Serializable()]
    public abstract partial class AdviceBase {
        
        /// <summary>
        /// AdviceId
        /// </summary>
        private System.Guid _adviceId;
        
        /// <summary>
        /// AdviceType
        /// </summary>
        private System.Guid _adviceType;
        
        /// <summary>
        /// Title
        /// </summary>
        private string _title = string.Empty;
        
        /// <summary>
        /// Content
        /// </summary>
        private string _content = string.Empty;
        
        /// <summary>
        /// IsAdopt
        /// </summary>
        private bool _isAdopt;
        
        /// <summary>
        /// Reason
        /// </summary>
        private string _reason = string.Empty;
        
        /// <summary>
        /// Status
        /// </summary>
        private System.Guid _status;
        
        /// <summary>
        /// SupportCount
        /// </summary>
        private int _supportCount;
        
        /// <summary>
        /// 添加者
        /// </summary>
        private System.Guid _creatorId;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// 修改者
        /// </summary>
        private System.Guid _modifierId;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.DateTime _modifyDate;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public AdviceBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public AdviceBase(System.Guid adviceId, System.Guid adviceType, string title, string content, bool isAdopt, string reason, System.Guid status, int supportCount, System.Guid creatorId, System.DateTime createDate, System.Guid modifierId, System.DateTime modifyDate) {
            _adviceId = adviceId;
            _adviceType = adviceType;
            _title = title;
            _content = content;
            _isAdopt = isAdopt;
            _reason = reason;
            _status = status;
            _supportCount = supportCount;
            _creatorId = creatorId;
            _createDate = createDate;
            _modifierId = modifierId;
            _modifyDate = modifyDate;
        }
        
        /// <summary>
        /// AdviceId
        /// </summary>
        [Display(Name="文件夹ID")]
        public virtual System.Guid AdviceId {
            get {
                return _adviceId;
            }
            set {
                _adviceId = value;
            }
        }
        
        /// <summary>
        /// AdviceId APColumnDef
        /// </summary>
        public static GuidAPColumnDef AdviceIdDef {
            get {
                return APDBDef.Advice.AdviceId;
            }
        }
        
        /// <summary>
        /// AdviceType
        /// </summary>
        [Display(Name="建议类别")]
        public virtual System.Guid AdviceType {
            get {
                return _adviceType;
            }
            set {
                _adviceType = value;
            }
        }
        
        /// <summary>
        /// AdviceType APColumnDef
        /// </summary>
        public static GuidAPColumnDef AdviceTypeDef {
            get {
                return APDBDef.Advice.AdviceType;
            }
        }
        
        /// <summary>
        /// Title
        /// </summary>
        [Display(Name="建议标题")]
        [StringLength(200)]
        public virtual string Title {
            get {
                return _title;
            }
            set {
                _title = value;
            }
        }
        
        /// <summary>
        /// Title APColumnDef
        /// </summary>
        public static StringAPColumnDef TitleDef {
            get {
                return APDBDef.Advice.Title;
            }
        }
        
        /// <summary>
        /// Content
        /// </summary>
        [Display(Name="建议内容")]
        [StringLength(1000)]
        public virtual string Content {
            get {
                return _content;
            }
            set {
                _content = value;
            }
        }
        
        /// <summary>
        /// Content APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentDef {
            get {
                return APDBDef.Advice.Content;
            }
        }
        
        /// <summary>
        /// IsAdopt
        /// </summary>
        [Display(Name="是否采纳")]
        public virtual bool IsAdopt {
            get {
                return _isAdopt;
            }
            set {
                _isAdopt = value;
            }
        }
        
        /// <summary>
        /// IsAdopt APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsAdoptDef {
            get {
                return APDBDef.Advice.IsAdopt;
            }
        }
        
        /// <summary>
        /// Reason
        /// </summary>
        [Display(Name="未采纳原因")]
        [StringLength(200)]
        public virtual string Reason {
            get {
                return _reason;
            }
            set {
                _reason = value;
            }
        }
        
        /// <summary>
        /// Reason APColumnDef
        /// </summary>
        public static StringAPColumnDef ReasonDef {
            get {
                return APDBDef.Advice.Reason;
            }
        }
        
        /// <summary>
        /// Status
        /// </summary>
        [Display(Name="建议状态")]
        public virtual System.Guid Status {
            get {
                return _status;
            }
            set {
                _status = value;
            }
        }
        
        /// <summary>
        /// Status APColumnDef
        /// </summary>
        public static GuidAPColumnDef StatusDef {
            get {
                return APDBDef.Advice.Status;
            }
        }
        
        /// <summary>
        /// SupportCount
        /// </summary>
        [Display(Name="支持数")]
        public virtual int SupportCount {
            get {
                return _supportCount;
            }
            set {
                _supportCount = value;
            }
        }
        
        /// <summary>
        /// SupportCount APColumnDef
        /// </summary>
        public static Int32APColumnDef SupportCountDef {
            get {
                return APDBDef.Advice.SupportCount;
            }
        }
        
        /// <summary>
        /// 添加者
        /// </summary>
        [Display(Name="添加者")]
        public virtual System.Guid CreatorId {
            get {
                return _creatorId;
            }
            set {
                _creatorId = value;
            }
        }
        
        /// <summary>
        /// 添加者 APColumnDef
        /// </summary>
        public static GuidAPColumnDef CreatorIdDef {
            get {
                return APDBDef.Advice.CreatorId;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.Advice.CreateDate;
            }
        }
        
        /// <summary>
        /// 修改者
        /// </summary>
        [Display(Name="修改者")]
        public virtual System.Guid ModifierId {
            get {
                return _modifierId;
            }
            set {
                _modifierId = value;
            }
        }
        
        /// <summary>
        /// 修改者 APColumnDef
        /// </summary>
        public static GuidAPColumnDef ModifierIdDef {
            get {
                return APDBDef.Advice.ModifierId;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="最近修改时间")]
        public virtual System.DateTime ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.Advice.ModifyDate;
            }
        }
        
        /// <summary>
        /// AdviceTableDef APTableDef
        /// </summary>
        public static APDBDef.AdviceTableDef TableDef {
            get {
                return APDBDef.Advice;
            }
        }
        
        /// <summary>
        /// AdviceTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Advice.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Advice data) {
            AdviceId = data.AdviceId;
            AdviceType = data.AdviceType;
            Title = data.Title;
            Content = data.Content;
            IsAdopt = data.IsAdopt;
            Reason = data.Reason;
            Status = data.Status;
            SupportCount = data.SupportCount;
            CreatorId = data.CreatorId;
            CreateDate = data.CreateDate;
            ModifierId = data.ModifierId;
            ModifyDate = data.ModifyDate;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Advice data) {
            if ((AdviceId != data.AdviceId)) {
                return false;
            }
            if ((AdviceType != data.AdviceType)) {
                return false;
            }
            if ((Title != data.Title)) {
                return false;
            }
            if ((Content != data.Content)) {
                return false;
            }
            if ((IsAdopt != data.IsAdopt)) {
                return false;
            }
            if ((Reason != data.Reason)) {
                return false;
            }
            if ((Status != data.Status)) {
                return false;
            }
            if ((SupportCount != data.SupportCount)) {
                return false;
            }
            if ((CreatorId != data.CreatorId)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((ModifierId != data.ModifierId)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.AdviceBpl.Insert(((Advice)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.AdviceBpl.Update(((Advice)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid adviceId, Object metadata) {
            APBplDef.AdviceBpl.UpdatePartial(adviceId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid adviceId) {
            APBplDef.AdviceBpl.PrimaryDelete(adviceId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.AdviceBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.AdviceBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Advice PrimaryGet(System.Guid adviceId) {
            return APBplDef.AdviceBpl.PrimaryGet(adviceId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Advice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.AdviceBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Advice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.AdviceBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Advice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.AdviceBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Advice> GetAll() {
            return APBplDef.AdviceBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 建议
    /// </summary>
    [Serializable()]
    public partial class Advice : AdviceBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Advice() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Advice(System.Guid adviceId, System.Guid adviceType, string title, string content, bool isAdopt, string reason, System.Guid status, int supportCount, System.Guid creatorId, System.DateTime createDate, System.Guid modifierId, System.DateTime modifyDate) : 
                base(adviceId, adviceType, title, content, isAdopt, reason, status, supportCount, creatorId, createDate, modifierId, modifyDate) {
        }
    }
    
    /// <summary>
    /// 建议支持者明细 Base
    /// </summary>
    [Serializable()]
    public abstract partial class AdviceSupportBase {
        
        /// <summary>
        /// SupportId
        /// </summary>
        private System.Guid _supportId;
        
        /// <summary>
        /// AdviceId
        /// </summary>
        private System.Guid _adviceId;
        
        /// <summary>
        /// 支持者
        /// </summary>
        private System.Guid _supporterId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public AdviceSupportBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public AdviceSupportBase(System.Guid supportId, System.Guid adviceId, System.Guid supporterId) {
            _supportId = supportId;
            _adviceId = adviceId;
            _supporterId = supporterId;
        }
        
        /// <summary>
        /// SupportId
        /// </summary>
        public virtual System.Guid SupportId {
            get {
                return _supportId;
            }
            set {
                _supportId = value;
            }
        }
        
        /// <summary>
        /// SupportId APColumnDef
        /// </summary>
        public static GuidAPColumnDef SupportIdDef {
            get {
                return APDBDef.AdviceSupport.SupportId;
            }
        }
        
        /// <summary>
        /// AdviceId
        /// </summary>
        public virtual System.Guid AdviceId {
            get {
                return _adviceId;
            }
            set {
                _adviceId = value;
            }
        }
        
        /// <summary>
        /// AdviceId APColumnDef
        /// </summary>
        public static GuidAPColumnDef AdviceIdDef {
            get {
                return APDBDef.AdviceSupport.AdviceId;
            }
        }
        
        /// <summary>
        /// 支持者
        /// </summary>
        public virtual System.Guid SupporterId {
            get {
                return _supporterId;
            }
            set {
                _supporterId = value;
            }
        }
        
        /// <summary>
        /// 支持者 APColumnDef
        /// </summary>
        public static GuidAPColumnDef SupporterIdDef {
            get {
                return APDBDef.AdviceSupport.SupporterId;
            }
        }
        
        /// <summary>
        /// AdviceSupportTableDef APTableDef
        /// </summary>
        public static APDBDef.AdviceSupportTableDef TableDef {
            get {
                return APDBDef.AdviceSupport;
            }
        }
        
        /// <summary>
        /// AdviceSupportTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.AdviceSupport.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(AdviceSupport data) {
            SupportId = data.SupportId;
            AdviceId = data.AdviceId;
            SupporterId = data.SupporterId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(AdviceSupport data) {
            if ((SupportId != data.SupportId)) {
                return false;
            }
            if ((AdviceId != data.AdviceId)) {
                return false;
            }
            if ((SupporterId != data.SupporterId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.AdviceSupportBpl.Insert(((AdviceSupport)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.AdviceSupportBpl.Update(((AdviceSupport)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(System.Guid supportId, Object metadata) {
            APBplDef.AdviceSupportBpl.UpdatePartial(supportId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(System.Guid supportId) {
            APBplDef.AdviceSupportBpl.PrimaryDelete(supportId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.AdviceSupportBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.AdviceSupportBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static AdviceSupport PrimaryGet(System.Guid supportId) {
            return APBplDef.AdviceSupportBpl.PrimaryGet(supportId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<AdviceSupport> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.AdviceSupportBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<AdviceSupport> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.AdviceSupportBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<AdviceSupport> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.AdviceSupportBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<AdviceSupport> GetAll() {
            return APBplDef.AdviceSupportBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 建议支持者明细
    /// </summary>
    [Serializable()]
    public partial class AdviceSupport : AdviceSupportBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public AdviceSupport() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public AdviceSupport(System.Guid supportId, System.Guid adviceId, System.Guid supporterId) : 
                base(supportId, adviceId, supporterId) {
        }
    }
}
