@model Bug
@{
	var attahcments = ViewBag.Attahcments as List<Attachment>;
}
<link href="~/assets/plugins/select2-4.0.2/css/select2.min.css" rel="stylesheet" />
<style>
	.dropzonePop {
		display: none;
	}
</style>

<div class="row" style="margin-top:20px;margin-bottom:20px;">
	<a class="btn btn-lg btn-danger col-md-1 col-md-offset-1" href="@Url.Action("List","Bug")">返回Bug列表</a>
	<div class="col-md-6">
		<h4>@Model.SortId - @Model.Level - @Model.BugName</h4>
	</div>
</div>
<div class="row">

	<!-- widget -->
	<div class="widget details col-md-7 col-md-offset-1">

		<form action="@Url.Action("UploadFile", "Attachment")" class="dropzone file"></form>

		<form id="bugForm" class="form-horizontal" action="@Url.Action("Edit","bug")" role="form" data-after-success="afterDialogSuccess()" style="">

			<div class="widget-content">

				<div class="row editTaskInfo">
					<fieldset class="col-sm-12">

						@Html.HiddenFor(t => t.SortId)
						@Html.HiddenFor(t => t.BugId)
						@Html.HiddenFor(x => x.RelativeTaskIds)
						@Html.HiddenFor(x => x.RelativeRequireIds)
						@Html.HiddenFor(x => x.BugStatus)
						@Html.HiddenFor(x => x.CreatorId)


						<div class="form-group">
							@Html.LabelFor(t => t.ProjectName, new { @class = "control-label col-md-2" })
							<div class="col-md-2">
								@Html.DropDownListFor(t => t.Projectid,
									SelectListHelper.GetSelectItems(ViewBag.Projects as List<Project>, "ProjectName", "ProjectId", null, SelectListHelper.Default),
									new { @class = "form-control dropdown-project" })
							</div>
							@Html.ValidationMessageFor(t => t.Projectid)
						</div>

						<div class="form-group">
							@Html.LabelFor(t => t.BugName, new { @class = "control-label col-md-2" })
							<div class="col-md-9">
								@Html.TextBoxFor(t => t.BugName, new { @class = "form-control", @placeholder = "bug名称" })
							</div>
							@Html.ValidationMessageFor(t => t.BugName)
						</div>

						<div class="form-group">
							@Html.LabelFor(t => t.ManagerId, new { @class = "control-label col-md-2" })
							<div class="col-md-2">
								@Html.DropDownList("ManagerId",
									SelectListHelper.GetSelectItems(ViewBag.Users as List<UserInfo>, "UserName", "UserId", v => v.ToString() == Model.ManagerId.ToString(), SelectListHelper.Default),
									new { @class = "form-control" })
							</div>
							@Html.ValidationMessageFor(t => t.ManagerId)

							@Html.LabelFor(t => t.BugStatus, new { @class = "control-label col-md-2" })
							<div class="col-md-2">
								@*@Html.DropDownListFor(t => t.BugStatus,
									DictionaryCache.Cached(BugKeys.StatusGuid)
														.GetSelectListById(Guid.Empty),
									new { @class = "form-control dropdown-taskStatus" })*@

									@Html.Label(Model.Status, new { @class = "form-control" })
							</div>

						</div>

						<div class="form-group">

							@Html.LabelFor(t => t.BugType, new { @class = "control-label col-md-2" })
							<div class="col-md-2">
								@Html.DropDownListFor(t => t.BugType,
									DictionaryCache.Cached(BugKeys.TypeGuid)
														.GetSelectListById(Guid.Empty),
									new { @class = "form-control dropdown-taskType" })
							</div>
							@Html.LabelFor(t => t.BugLevel, new { @class = "control-label col-md-2	" })
							<div class="col-md-2">
								@Html.DropDownListFor(t => t.BugLevel,
									DictionaryCache.Cached(BugKeys.LevelGuid)
													.GetSelectListById(Guid.Empty),
									new { @class = "form-control dropdown-taskLevel" })
							</div>
						</div>

						<div class="form-group">
							@Html.LabelFor(t => t.BrowserName, new { @class = "control-label col-md-2" })
							<div class="col-md-2">
								@Html.DropDownListFor(t => t.BrowserId,
									DictionaryCache.Cached(BugKeys.BrowserGuid)
													.GetSelectListById(Guid.Empty, SelectListHelper.Default),
									new { @class = "form-control dropdown-taskLevel" })
							</div>
							@Html.LabelFor(t => t.SystemName, new { @class = "control-label col-md-2" })
							<div class="col-md-2">
								@Html.DropDownListFor(t => t.SystemId,
									DictionaryCache.Cached(BugKeys.SystemGuid)
													.GetSelectListById(Guid.Empty, SelectListHelper.Default),
									new { @class = "form-control dropdown-taskLevel" })
							</div>
						</div>

						<div class="form-group">
							@Html.LabelFor(t => t.Content, new { @class = "control-label col-md-2" })
							<div class="col-md-9">
								@Html.TextAreaFor(t => t.Content, 12, 2, new { @class = "form-control" })
								@Html.ValidationMessageFor(t => t.Content)
							</div>
						</div>



						<div class="form-group">
							@Html.Label("关联任务", new { @class = "control-label col-md-2" })
							<div class="col-md-2">
								<select id="tasks" class="form-control new-select" multiple="multiple"></select>
							</div>

							@Html.Label("关联需求", new { @class = "control-label col-md-2" })
							<div class="col-md-2">
								<select id="requires" class="form-control new-select" multiple="multiple"></select>
							</div>
						</div>


						<div class="form-group">
							@Html.HiddenFor(t => t.CurrentAttachment.RealName, new { @class = "fileName" })
							@Html.HiddenFor(t => t.CurrentAttachment.Url, new { @class = "filePath" })
							<label class="col-md-2 control-label">上传文件</label>
							<div class="col-md-5">
								<input style="visibility:hidden;position:absolute;" />
								<div class="input-group">
									<label id="uploadName" class="form-control oversize uploadName"></label>
									<span class="input-group-btn">
										<button class="btn btn-danger" type="button" id="btn-upload">附件上传</button>
									</span>
								</div>
							</div>
						</div>

						@if (attahcments != null && attahcments.Count > 0)
						{
							<div class="form-group">
								@Html.Label("已上传", new { @class = "control-label col-md-2" })
								<div class="col-md-9">
									@foreach (var item in attahcments)
									{
										<div><a href="@item.Url">@item.RealName</a></div>
									}
								</div>
							</div>
						}

						@if (Model.BugStatus == BugKeys.hasResolve)
						{
						<div class="form-group">
							@Html.LabelFor(t => t.FixDate, new { @class = "control-label col-md-2	" })
							<div class="col-md-3">
								<div class="input-group date" data-provide="datepicker" data-date-language="zh-CN" data-date-format="yyyy-mm-dd" data-date-autoclose="true">
									@Html.TextBoxFor(t => t.FixDate, "{0:yyyy-MM-dd}", new { @class = "form-control endDate" })
									<div class="input-group-addon"><i class="fa fa-calendar"></i></div>
								</div>
							</div>
						</div>
						}


						<div class="input-group center-block">
							<button id="submit" class="btn btn-info col-md-3 col-md-offset-2 btn-custom-primary">保存</button>
							<a class="btn btn-info col-md-3" href="@Url.Action("List","Bug")" data-dismiss="modal">取消</a>
						</div>

					</fieldset>

				</div>

			</div>

		</form>

	</div>



	@Html.Partial("_taskList", Model.RelativeTasks)
	@Html.Partial("_requireList", Model.RelativeRequires)

</div>

@section Scripts{

	<script src="~/assets/plugins/ckeditor_4.14.1_standard/ckeditor/ckeditor.js"></script>
	<script src="~/assets/plugins/select2-4.0.2/js/select2.min.js"></script>

	<script>

		$(function () {

			ajaxSubmitForm($('#bugForm'), true);

			//initial ckeditor
			var myEditor = initCKEditor('Content');

			$('#submit').click(function () {
				$('#RelativeTaskIds').val($('#tasks').val());
				$('#RelativeRequireIds').val($('#requires').val());
				$('#Content').val(myEditor.getData());
			});

			//bind files uploader
			$('.dropzone.file').dropzone({
				addedContainer: '#flyArea',
				dictResponseError: '上传出错',
				uploadMultiple: false,
				maxFilesize: 200,
				init: function () {
					this.on('success', function (file, data) {
						$('.fileName').val(data.filename);
						$('.filePath').val(data.url);
						setTimeout(function () { $('#uploadName').html(data.filename); }, 1000);
					});
					this.on('error', function (file, message) {
						popupMessage({ result: 'error', msg: message });
					});
				}
			});

			$('#btn-upload').click(function () {
				$('.dropzone.file').trigger('click');
			});


			//bind changed event for project dropdown
			$('#Projectid').on('change', function () {
				var projectId = $(this).val();
				// remove previous select value
				$('#tasks').children().remove();
				// post data for tasks from service side
				$.post('@Url.Action("GetProjectTasks","TaskV2")', { projectId: projectId }, function (data) {
					if (data.rows) {
						var selectTaskIds = '@Model.RelativeTaskIds'.split(',');
						$('#tasks').select2({
							data: data.rows,
							placeholder: "请选择"
						}).val(selectTaskIds).trigger('change'); // bind relative task data
					}
				});


				$.post('@Url.Action("GetProjectRequires", "Require")', { projectId: projectId }, function (data) {
					if (data.rows) {
						var selectIds = '@Model.RelativeRequireIds'.split(',');
						$('#requires').select2({
							data: data.rows,
							placeholder: "请选择"
						}).val(selectIds).trigger('change'); // bind relative task data
					}
				});


			}).change();

		});


		function afterDialogSuccess() {
			location.href = location.href;
			//$('#firstModal').modal('hide');
			//$('#childTaskgrid').bootgrid('reload');
		}

		function bindMulitSelection(dropdown) {
			$(dropdown).select2({
				language: {
					noResults: function (param) {
						return "暂无数据";
					}
				}
			});
		}


	</script>

}

