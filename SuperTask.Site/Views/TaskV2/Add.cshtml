@model WorkTask
@{
	Layout = null;
	var requireId = Request["requireId"] ?? string.Empty;
	var projectId = Request["projectId"] ?? string.Empty;
	var userList= ViewBag.Users as List<UserInfo>;
	var manager = userList.Find(x=>x.UserId==Model.ManagerId)?.RealName;
}

<link href="~/assets/plugins/select2-4.0.2/css/select2.min.css" rel="stylesheet" />
<style>
	.dropzonePop {
		display: none;
	}
</style>

<div class="modal-dialog" style="width:60%">

	<!-- widget -->
	<div class="widget details" >

		<form action="@Url.Action("UploadFile", "Attachment")" class="dropzone file"></form>
		<form class="form-horizontal" action="@Url.Action("Add","TaskV2")" role="form" data-after-success="afterDialogSuccess()" style="border:1px solid red;margin:auto">

			<div class="widget-content" >
				<div class="modal-header">
					<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
					<h4>创建任务</h4>
				</div>
				<div class="modal-body row editTaskInfo">
					<fieldset >
						@Html.HiddenFor(x => x.ParentId)
						@Html.HiddenFor(x => x.RelativeRequireIds)
						@Html.HiddenFor(x => x.RelativeBugIds)
						@Html.HiddenFor(x => x.RelativePublishIds)
						@Html.HiddenFor(x => x.TaskType)

						<div class="form-group projectsDropdown">
							@Html.LabelFor(t => t.ProjectName, new { @class = "control-label col-md-2" })
							<div class="col-md-3">
								@Html.DropDownListFor(t => t.Projectid,
									SelectListHelper.GetSelectItems(ViewBag.Projects as List<Project>, "ProjectName", "ProjectId"),
									new { @class = "form-control dropdown-project" })
							</div>

							<div class="col-md-2 text-right">
								@Html.CheckBox("hasParnetTask", !Model.ParentId.IsEmpty(), new { @class = "" })
								@Html.LabelFor(t => t.ParentTaskName, new { @class = "control-label" })
							</div>
							<div class="col-md-3 parentTasks">
								<select id="parentTasks" name="parentTasks" class="form-control dropdown-parnetTasks hidden"></select>
							</div>
						</div>

						<div class="form-group">
							@Html.LabelFor(t => t.TaskName, new { @class = "control-label col-md-2" })
							<div class="col-md-9">
								@Html.TextBoxFor(t => t.TaskName, new { @class = "form-control" })
								@Html.ValidationMessageFor(t => t.TaskName)
							</div>
						</div>

						<div class="form-group projectsDropdown">
							@Html.LabelFor(t => t.TaskType, new { @class = "control-label col-md-2" })
							<div class="col-md-3">
								@Html.DropDownListFor(t => t.V2Type,
									DictionaryCache.Cached(TaskKeys.TypeV2Guid)
														.GetSelectListById(Guid.Empty),
									new { @class = "form-control dropdown-taskType" })
							</div>

							@Html.LabelFor(t => t.TaskLevel, new { @class = "control-label col-md-3 text-align:left" })
							<div class="col-md-3">
								@Html.DropDownListFor(t => t.V2Level,
									DictionaryCache.Cached(TaskKeys.LevelGuid)
														.GetSelectListById(Guid.Empty),
									new { @class = "form-control dropdown-taskLevel" })
							</div>
						</div>
						<div class="form-group">
							@Html.LabelFor(t => t.StartDate, new { @class = "control-label col-md-2" })
							<div class="col-md-3">
								<div class="input-group date" data-provide="datepicker" data-date-language="zh-CN" data-date-format="yyyy-mm-dd" data-date-autoclose="true">
									@Html.TextBoxFor(t => t.StartDate, "{0:yyyy-MM-dd}", new { @class = "form-control startDate" })
									<div class="input-group-addon"><i class="fa fa-calendar"></i></div>
								</div>
							</div>
							@Html.LabelFor(t => t.EndDate, new { @class = "control-label col-md-3" })
							<div class="col-md-3">
								<div class="input-group date" data-provide="datepicker" data-date-language="zh-CN" data-date-format="yyyy-mm-dd" data-date-autoclose="true">
									@Html.TextBoxFor(t => t.EndDate, "{0:yyyy-MM-dd}", new { @class = "form-control endDate" })
									<div class="input-group-addon"><i class="fa fa-calendar"></i></div>
								</div>
							</div>
						</div>

						<div class="form-group ">
							@Html.LabelFor(t => t.Manager, new { @class = "control-label col-md-2 text-align:left" })
							<div class="col-md-3 dropdown-manager">
								@Html.DropDownListFor(t => t.ManagerId,
									SelectListHelper.GetSelectItems(userList, "UserName", "UserId"),
									new { @class = "form-control " })
							</div>
							@*<div class="col-md-3 label-manager"><label class="form-control">@manager</label> </div>*@

							@Html.Label("预计消耗", new { @class = "control-label col-md-3 text-align:left" })
							<div class="col-md-3">
								@Html.TextBoxFor(t => t.EstimateWorkHours, new { @class = "form-control" })
							</div>
						</div>
						<div class="form-group">
							@Html.Label("执行人", new { @class = "control-label col-md-2 text-align:left" })
							<div class="col-md-3">
								@Html.DropDownListFor(t => t.DefaultExecutorId,
									SelectListHelper.GetSelectItems(userList, "UserName", "UserId", v => v.ToString() == Html.GetUserProfile().UserId.ToString()),
									new { @class = "form-control", @name = "defaultExecutor" })
							</div>
						</div>

						<div class="form-group subTaskExecutor">
							<div class="col-md-3 col-md-offset-2">
								<a href="#" class="btn btn-info" onclick="addSubTaskExecutor()"><i class="fa fa-plus"> </i>新增执行人</a>
							</div>
						</div>

						<div class="form-group">
							@Html.LabelFor(t => t.Description, new { @class = "control-label col-md-2" })
							<div class="col-md-9">
								@Html.TextAreaFor(t => t.Description, 12, 2, new { @class = "form-control" })
								@Html.ValidationMessageFor(t => t.Description)
							</div>
						</div>

						<div class="form-group">
							@Html.Label("关联需求", new { @class = "control-label  col-md-2" })
							<div class="col-md-2">
								<select id="requires" class="form-control new-select" multiple="multiple"></select>
							</div>

							@Html.Label("关联bug", new { @class = "control-label col-md-2" })
							<div class="col-md-2">
								<select id="bugs" class="form-control new-select" multiple="multiple"></select>
							</div>

							@Html.Label("关联发布", new { @class = "control-label col-md-2" })
							<div class="col-md-2">
								<select id="publishs" class="form-control new-select" multiple="multiple"></select>
							</div>
						</div>

						<div class="form-group">
							@Html.HiddenFor(t => t.CurrentAttachment.RealName, new { @class = "fileName" })
							@Html.HiddenFor(t => t.CurrentAttachment.Url, new { @class = "filePath" })
							<label class="col-md-2 control-label">上传文件</label>
							<div class="col-md-5">
								<input style="visibility:hidden;position:absolute;" />
								<div class="input-group">
									<label id="uploadName" class="form-control oversize uploadName"></label>
									<span class="input-group-btn">
										<button class="btn btn-danger" type="button" id="btn-upload">附件上传</button>
									</span>
								</div>
							</div>
						</div>

						<div class="input-group center-block">
							<button id="submit" class="btn btn-info col-md-3 col-md-offset-3 btn-custom-primary">保存</button>
							<a class="btn btn-info col-md-3" data-dismiss="modal">取消</a>
						</div>

					</fieldset>

				</div>

			</div>

		</form>

	</div>


</div>

<script src="~/assets/plugins/ckeditor_4.14.1_standard/ckeditor/ckeditor.js"></script>
<script src="~/assets/plugins/select2-4.0.2/js/select2.min.js"></script>
<script>
	$(function () {

		//submit form by ajax
		ajaxSubmitForm($('.modal-dialog form'), true);

		//initial ckeditor
		var myEditor = initCKEditor('Description');
		$('#submit').click(function () {
			$('#RelativeRequireIds').val($('#requires').val());
			$('#RelativeBugIds').val($('#bugs').val());
			$('#RelativePublishIds').val($('#publishs').val());
			$('#Description').val(myEditor.getData());
		});

		// bind project dropdown event
		bindProjectDropdown();

		if ($('#hasParnetTask').is(':checked')) {
			$('.parentTasks').show();
			$('.subTaskExecutor').hide();
		}
		else {
			$('.parentTasks').hide();
			$('.subTaskExecutor').show();
		}

		isShow = false;
		$('#hasParnetTask').click(function () {
			if ($(this).is(':checked') && !isShow) {
				isShow = true;
				$('.parentTasks').show();
				$('.subTaskExecutor').hide();
			}
			else {
				isShow = false;
				$('.parentTasks').hide();
				$('.subTaskExecutor').show();
			}
		});


		//文件上传
		initDropZone();

	});


	function addSubTaskExecutor() {
		$.post('@Url.Action("AddExecutor", "TaskV2")', function (html) {
			$('.subTaskExecutor:last').after(html);
		})
	}


	function removeSubTaskExecutor() {
		$.post('@Url.Action("AddExecutor", "TaskV2")', function (html) {
			$('.subTaskExecutor:last').after(html);
		})
	}

	function bindProjectDropdown(door) {
		$('.dropdown-project').searchableSelect({
			afterSelectItem: function (v) {
				bindTasksDropDown(v);
				bindRequiresDropDown(v);
				bindBugsDropDown(v);
				bindPublishsDropDown(v);
			}
		});
	}

	function bindTasksDropDown(projectId) {
		var $dp = $('.dropdown-parnetTasks');
		bindDropDownByAjax($dp, '@Url.Action("GetLeafTasks", "TaskV2")', { projectId: projectId }, function (o) {
			if ($('#hasParnetTask').is(':checked')) {
				$('#ParentId').val(o);
			}
		}, $("#ParentId").val());
	}	

	function bindRequiresDropDown(projectId) {
		var requireId = '@requireId';
		if (projectId != '@projectId')
			requireId = '';
		// remove previous select value
		$('#requires').children().remove();
		// post data for tasks from service side
		$.post('@Url.Action("GetProjectRequires", "Require")', { projectId: projectId }, function (data) {
			if (data.rows) {
				var selectRequireIds = requireId.split(',');
				$('#requires').select2({
					data: data.rows,
					placeholder: "请选择"
				}).val(selectRequireIds).trigger('change'); // bind relative task data
			}
		});
	}

	function bindBugsDropDown(projectId) {
		// remove previous select value
		$('#bugs').children().remove();
		// post data for tasks from service side
		$.post('@Url.Action("GetProjectBugs", "Bug")', { projectId: projectId }, function (data) {	
			if (data.rows) {
				$('#bugs').select2({
					data: data.rows,
					placeholder: "请选择"
				}).trigger('change'); // bind relative bug data
			}
		});
	}

	function bindPublishsDropDown(projectId) {
		// remove previous select value
		$('#publishs').children().remove();
		// post data for tasks from service side
		$.post('@Url.Action("GetProjectPublishs", "Publish")', { projectId: projectId }, function (data) {
			if (data.rows) {
				$('#publishs').select2({
					data: data.rows,
					placeholder: "请选择"
				}).trigger('change'); // bind relative bug data
			}
		});
	}

	function removeSubTaskExecutor(obj) {
		$(obj).parent().parent().remove();
	}

	function afterDialogSuccess() {
		$('#firstModal').modal('hide');
		$('#bootgrid').bootgrid('reload');
	}

</script>
